{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"MongooseIM platform overview","text":"<ul> <li>Home: https://github.com/esl/MongooseIM</li> <li>Product page: https://www.erlang-solutions.com/products/mongooseim.html</li> <li>Documentation: https://esl.github.io/MongooseDocs/</li> <li>Try it now: https://trymongoose.im</li> </ul>"},{"location":"#get-to-know-mongooseim","title":"Get to know MongooseIM","text":"<p>MongooseIM is a robust, scalable and efficient XMPP server at the core of an Instant Messaging platform aimed at large installations.</p> <p></p> <p>Designed for enterprise, it is fault-tolerant, can utilise the resources of multiple clustered machines, and easily scales for more capacity by simply adding a box or a VM.</p> <p>MongooseIM can accept client sessions over vanilla XMPP, GraphQL API, REST API and SSE, as well as Websockets and BOSH (HTTP long-polling).</p> <p>As a platform, MongooseIM includes several server-side (backend) and client-side (frontend) components. We provide a test suite, metrics, a load testing platform, and a monitoring server. We recommend third-party, open source client libraries for XMPP, GraphQL API and REST API.</p> <p>MongooseIM is brought to you by Erlang Solutions.</p>"},{"location":"#mongooseim-platform-components","title":"MongooseIM platform components","text":""},{"location":"#server-side-components","title":"Server-side components","text":"<p>We offer a set of additional server-side components:</p> <ul> <li>WombatOAM is a powerful monitoring platform that comes with a dedicated MongooseIM plugin</li> <li>mongoose_metrics is a internal module that provides various metrics about the server, if you use WombatOAM with MongooseIM plugin then you will see them otherwise you can use e.g. InfluxDB and Grafana to store and visualize them</li> <li>Test suite is written with the help of these useful tools:<ul> <li>escalus: an XMPP client for Erlang</li> <li>amoc: a load testing tool</li> </ul> </li> <li>MongooseICE: is a STUN and TURN server written for traversing NATs and relaying streams</li> <li>MongoosePush: is a flexible push notification server with APNS and FCM support</li> </ul>"},{"location":"#client-side-components","title":"Client-side components","text":"<ul> <li>XMPP client libraries - we recommend the following client libraries:<ul> <li>iOS, Objective-C: XMPPFramework</li> <li>Android, Java: Smack</li> <li>Web, JavaScript: Stanza.io, Strophe.js</li> </ul> </li> <li>REST API client libraries - we recommend the following client libraries:<ul> <li>iOS, Swift: Jayme</li> <li>Android, Java: Retrofit</li> </ul> </li> </ul>"},{"location":"#download-packages","title":"Download packages","text":"<p>For a quick start just download:</p> <ul> <li>The pre-built packages that suit your platform (Ubuntu, Debian and CentOS)</li> <li>The Docker image (source code repository)</li> <li>The Helm chart (source code repository)</li> </ul> <p>See the installation guide for more details.</p>"},{"location":"#public-testing","title":"Public testing","text":"<p>Check out our test results:</p> <ul> <li>CI testing:<ul> <li>GH Actions</li> <li>CircleCI</li> </ul> </li> <li>Code coverage:<ul> <li>Codecov - reported by CircleCI.</li> <li>Coveralls - reported by GH Actions.</li> </ul> </li> </ul>"},{"location":"#versions","title":"Versions","text":"<p>See the documentation for the latest releases:</p> <ul> <li>Master</li> <li>6.2.0</li> <li>6.1.0</li> <li>6.0.0</li> <li>5.1.0</li> <li>5.0.0</li> <li>4.2.0</li> <li>4.1.0</li> <li>4.0.1</li> <li>3.7.1</li> <li>3.6.2</li> <li>3.5.0</li> <li>3.4.1</li> <li>3.3.0</li> <li>3.2.0</li> <li>3.1.1</li> <li>3.0.1</li> </ul>"},{"location":"#participate","title":"Participate!","text":"<p>Suggestions, questions, thoughts? Contact us directly:</p> <ul> <li>Raise a GitHub issue</li> <li>Email us at mongoose-im@erlang-solutions.com</li> <li>Follow our Twitter account</li> </ul>"},{"location":"Contributions/","title":"Contributions to the Ecosystem","text":"<p>Our contributions to the ecosystem.</p>"},{"location":"Contributions/#third-party-opensource-projects","title":"Third-party opensource projects","text":""},{"location":"Contributions/#xmppframework-for-ios","title":"XMPPFramework for iOS","text":"<p>Available on: robbiehanson/XMPPFramework</p> <ul> <li>XEP-0363: HTTP File Upload</li> <li>XEP-0313: Message Archive Management</li> <li>XEP-0030: Service Discovery</li> <li>MUC light</li> <li>Token-based reconnection</li> <li>Revamped README: making people feel like this is a well maintained and up to date framework</li> <li>Created a way to Mock a piece of the framework to improve the way we write tests</li> </ul>"},{"location":"Contributions/#smack-for-android","title":"Smack for Android","text":"<p>Available on: igniterealtime/Smack</p> <ul> <li>XEP-0357: Push Notifications</li> <li>XEP-0191: Blocking Command</li> <li>XEP-0313: Message Archive Management</li> <li>XEP-0308: Last Message Correction</li> <li>MUC light</li> <li>Token-based reconnection</li> <li>Instant Stream Resumption</li> <li>XEP-0231: Bits of Binary</li> <li>XEP-0333: Chat Markers</li> <li>MAM documentation</li> </ul>"},{"location":"Contributions/#movim","title":"Movim","text":"<p>See movim/movim on GitHub for more details.</p> <ul> <li>Docker image for Movim</li> </ul>"},{"location":"Contributions/#software-by-erlang-solutions","title":"Software by Erlang Solutions","text":""},{"location":"Contributions/#escalus","title":"escalus","text":"<p>See esl/escalus on GitHub for more details.</p> <p>An XMPP client library in Erlang for conveniently testing XMPP servers</p> <p>Apache license 2.0</p>"},{"location":"Contributions/#amoc","title":"amoc","text":"<p>See esl/amoc on GitHub for more details.</p> <p>amoc is a simple tool for running massively parallel XMPP tests</p> <p>Apache license 2.0</p> <p>Info</p> <p>amoc stands for \"A Murder of Crows\"</p>"},{"location":"Contributions/#amoc-arsenal-xmpp","title":"amoc-arsenal-xmpp","text":"<p>See esl/amoc-arsenal-xmpp on GitHub for more details.</p> <p>A collection of scenarios for amoc, which we use to test MongooseIM. They can however be used to load test any XMPP server.</p> <p>Apache license 2.0</p>"},{"location":"Contributions/#exml","title":"exml","text":"<p>See esl/exml on GitHub for more details.</p> <p>XML parsing library in Erlang</p> <p>Apache license 2.0</p>"},{"location":"Contributions/#mongooseice-ice-stunturn-server","title":"MongooseICE: ICE (STUN/TURN) server","text":"<p>See MongooseICE on GitHub for more details.</p>"},{"location":"Contributions/#mongoosepush-push-notifications-server-apnsfcm","title":"MongoosePush: Push notifications server (APNS/FCM)","text":"<p>See MongoosePush on GitHub for more details.</p>"},{"location":"Contributions/#open-standards","title":"Open standards","text":""},{"location":"Contributions/#muc-light","title":"MUC light","text":"<p>MUC stands for Multi-User Chat. MUC light is a presenceless and subscription-based group chat, relying on a simplified version of MUC.</p>"},{"location":"Contributions/#token-based-reconnection","title":"Token-based reconnection","text":"<p>Token-based reconnection (TBR) Reconnection mechanism, for temporary disconnections, using tokens instead of passwords</p>"},{"location":"History/","title":"MongooseIM history","text":""},{"location":"History/#2023-c2s-and-cets","title":"2023: C2S and CETS","text":"<p>Created an alternative to Mnesia RAM-only tables - CETS. It allows to run MongooseIM without Mnesia completely in RDBMS+CETS setup.</p> <p>Moved the C2S implementation to state machine. Added Docker image for arm64.</p> <p>Releases:</p> <ul> <li>MongooseIM 6.2.0 in December 2023.</li> <li>MongooseIM 6.1.0 in May 2023.</li> </ul>"},{"location":"History/#2022-graphql","title":"2022: GraphQL","text":"<p>New GraphQL API allows to access MongooseIM using HTTP protocol to extract data and make changes in a flexible way. The command-line interface (CLI) has been reworked to match the GraphQL functionality. The configuration for the admin and the client API has been simplified.</p> <p>Release:</p> <ul> <li>MongooseIM 6.0.0 in December 2022.</li> </ul>"},{"location":"History/#2020-2021-friendly-cloud-native-and-dynamic","title":"2020-2021: Friendly, cloud-native and dynamic","text":"<p>With the new configuration format, improved logging, and many more changes, MongooseIM has become more friendly for DevOps than ever before. This goes hand in hand with the prioritisation of solutions that enable MongooseIM to be easily deployed to the cloud.</p> <p>Whether in the cloud or on-premise, it is now possible to have a multi-tenant setup, powered by the new dynamic XMPP domains feature. It means thousands of domains can be simply set up, managed, and removed dynamically, without a noticeable performance overhead.</p> <p>Releases:</p> <ul> <li>MongooseIM 5.1.0 in June 2022.</li> <li>MongooseIM 5.0.0 in October 2021.</li> <li>MongooseIM 4.2.0 in April 2021.</li> <li>MongooseIM 4.1.0 in February 2021.</li> <li>MongooseIM 4.0.0 in September 2020.</li> <li>MongooseIM 3.7.0 in May 2020.</li> <li>MongooseIM 3.6.0 in January 2020.</li> </ul>"},{"location":"History/#2018-2019-global-distribution-ready","title":"2018-2019: Global distribution ready","text":"<ul> <li>Focus on global scale architecture.</li> <li>Chat bot integrations.</li> <li>Optimizations for IoT clients.</li> <li>GDPR compliance.</li> <li>New XML parser exml.</li> </ul> <p>Releases:</p> <ul> <li>MongooseIM 3.5.0 in October 2019.</li> <li>MongooseIM 3.4.0 in June 2019.</li> <li>MongooseIM 3.3.0 in March 2019.</li> <li>MongooseIM 3.2.0 in November 2018.</li> <li>MongooseIM 3.1.1 in July 2018.</li> <li>MongooseIM 3.0.1 in May 2018.</li> <li>MongooseIM 2.2.2 in April 2018.</li> <li>MongooseIM 2.1.1 in January 2018.</li> </ul>"},{"location":"History/#2017-platform-expansion-and-strengthening","title":"2017: Platform expansion and strengthening","text":"<p>MongooseIM 2.1.0 in October 2017.</p> <p>New components were added to the MongooseIM platform:</p> <ul> <li>MongoosePush, push notifications server</li> <li>MongooseICE, ICE server to help with voice calls functionality</li> <li>Mangosta iOS, demo XMPP client application for iOS</li> <li>Mangosta Android, demo XMPP client application for Android</li> </ul>"},{"location":"History/#2016-pivot-to-fullstack-messaging-platform","title":"2016: Pivot to fullstack messaging platform","text":"<p>MongooseIM Platform was created, that included a list of components:</p> <ul> <li>MongooseIM XMPP server 2.0.0, featuring a unique REST API for client developers and MUC light</li> <li>WombatOAM, for monitoring and operations</li> <li>escalus, an Erlang XMPP client for test automation</li> <li>amoc, for load generation</li> <li>Smack for Android in Java (third party)</li> <li>XMPPFramework for iOS in Objective-C (third party)</li> <li>Retrofit by Square for Android in Java (third party)</li> <li>Jayme by Inaka for iOS in Swift</li> </ul>"},{"location":"History/#2012-2015-fully-independent-project-growing-fast","title":"2012-2015: Fully independent project growing fast","text":"<ul> <li>Full OTP and <code>rebar</code> compliance.</li> <li>Removal of obsolete and/or rarely used modules.</li> <li>Reduction of the runtime memory consumption and functional test coverage.</li> <li>Added Message Archive Management support (XEP-0313).</li> </ul> <p>Releases:</p> <ul> <li>MongooseIM 1.6.x in October 2015.</li> <li>MongooseIM 1.5.x in December 2014.</li> <li>MongooseIM 1.4.x in May 2014.</li> <li>MongooseIM 1.3.x in January 2014.</li> <li>MongooseIM 1.2.x in May 2013.</li> <li>MongooseIM 1.1.x in December 2012.</li> <li>MongooseIM 1.0.0 in July 2012.</li> </ul>"},{"location":"History/#2011-fork-of-ejabberd","title":"2011: Fork of ejabberd","text":"<p>This project began its life as a fork of ejabberd v.2.1.8.</p> <p>Version 0.1.0 included:</p> <ul> <li>Replaced strings with binaries to significantly reduce memory consumption.</li> <li>Refactored directory structure of the project to be OTP complient.</li> <li>Replaced <code>autotools</code> with the <code>rebar</code> build tool.</li> <li>Removed obsolete and/or rarely used modules to reduce maintenance burden.</li> <li>Added functional tests based on RFCs and XEPs.</li> </ul>"},{"location":"authentication-methods/anonymous/","title":"Anonymous","text":""},{"location":"authentication-methods/anonymous/#overview","title":"Overview","text":"<p>This authentication method allows the users to connect anonymously.</p>"},{"location":"authentication-methods/anonymous/#configuration-options","title":"Configuration options","text":""},{"location":"authentication-methods/anonymous/#authanonymousallow_multiple_connections","title":"<code>auth.anonymous.allow_multiple_connections</code>","text":"<ul> <li>Syntax: boolean</li> <li>Default: <code>false</code></li> <li>Example: <code>allow_multiple_connections = true</code></li> </ul> <p>When set to true, allows multiple connections from the same JID using the <code>anonymous</code> authentication method.</p>"},{"location":"authentication-methods/anonymous/#authanonymousprotocol","title":"<code>auth.anonymous.protocol</code>","text":"<ul> <li>Syntax: string, one of <code>\"sasl_anon\"</code>, <code>\"login_anon\"</code>, <code>\"both\"</code></li> <li>Default: <code>sasl_anon</code></li> <li>Example: <code>protocol = \"both\"</code></li> </ul> <p>Specifies the SASL mechanisms supported by the <code>anonymous</code> authentication method:</p> <ul> <li><code>sasl_anon</code> - support only the the <code>ANONYMOUS</code> mechanism,</li> <li><code>login_anon</code> - support the non-anonymous mechanisms (<code>PLAIN</code>, <code>DIGEST-MD5</code>, <code>SCRAM-*</code>),</li> <li><code>both</code> - support both types of mechanisms.</li> </ul>"},{"location":"authentication-methods/anonymous/#authanonymousbackend","title":"<code>auth.anonymous.backend</code>","text":"<ul> <li>Syntax: string, one of <code>mnesia</code>, <code>cets</code></li> <li>Default: <code>mnesia</code></li> <li>Example: <code>backend = cets</code></li> </ul> <p>Sets the backend where anonymous sessions will be stored in-memory. See internal databases</p>"},{"location":"authentication-methods/anonymous/#example","title":"Example","text":"<pre><code>[auth.anonymous]\n  allow_multiple_connections = true\n  protocol = \"both\"\n</code></pre>"},{"location":"authentication-methods/dummy/","title":"Dummy","text":""},{"location":"authentication-methods/dummy/#overview","title":"Overview","text":"<p>The purpose of this method is to make it possible to authenticate a user without the need for real authentication. In other words, using this module allows to connect any user to the server without providing any password, certificate, etc.</p> <p>This kind of authorization sometimes really comes in handy, especially during development and testing.</p> <p>The backend just accepts every authentication attempt and introduces a random delay (50-500ms) to an authorization response. The delay works like <pre><code>    timer:sleep(Base + rand:uniform(Variance)),\n</code></pre> where <code>Base</code> is <code>base_time</code> and <code>Variance</code> is <code>variance</code>, as configured below.</p>"},{"location":"authentication-methods/dummy/#configuration","title":"Configuration","text":""},{"location":"authentication-methods/dummy/#authdummybase_time","title":"<code>auth.dummy.base_time</code>","text":"<ul> <li>Syntax: non-negative integer</li> <li>Default: 50</li> <li>Example: <code>base_time = 5</code></li> </ul>"},{"location":"authentication-methods/dummy/#authdummyvariance","title":"<code>auth.dummy.variance</code>","text":"<ul> <li>Syntax: positive integer</li> <li>Default: 450</li> <li>Example: <code>variance = 10</code></li> </ul>"},{"location":"authentication-methods/dummy/#example","title":"Example","text":"<pre><code>[auth.dummy]\n  base = 5\n  variance = 10\n</code></pre>"},{"location":"authentication-methods/external/","title":"External","text":""},{"location":"authentication-methods/external/#overview","title":"Overview","text":"<p>This authentication method delegates the authentication to an external script.</p> <p>It uses the <code>SASL PLAIN</code> mechanism.</p>"},{"location":"authentication-methods/external/#script-api-specification","title":"Script API specification","text":"<p>All \"commands\" sent from Erlang VM to the script are prefixed with a 2-byte unsigned integer (command length), MSB first. The script is expected to return responses in the same format.</p> <p>Currently only 2 response packets are supported:</p> <ul> <li><code>0x0000</code> = <code>false</code> (for failure).</li> <li><code>0x0001</code> = <code>true</code> (for success).</li> </ul> <p>The following list describes packets that the script should support.</p> <ul> <li><code>auth:&lt;username&gt;:&lt;domain&gt;:&lt;password&gt;</code> - Check password.</li> <li><code>setpass:&lt;username&gt;:&lt;domain&gt;:&lt;password&gt;</code> - Set password.</li> <li><code>tryregister:&lt;username&gt;:&lt;domain&gt;:&lt;password&gt;</code> - Register a user.</li> <li><code>removeuser:&lt;username&gt;:&lt;domain&gt;</code> - Remove a user.</li> <li><code>isuser:&lt;username&gt;:&lt;domain&gt;</code> - Check if a user exists.</li> </ul>"},{"location":"authentication-methods/external/#configuration-options","title":"Configuration options","text":""},{"location":"authentication-methods/external/#authexternalprogram","title":"<code>auth.external.program</code>","text":"<ul> <li>Syntax: string</li> <li>Default: no default, this option is mandatory for the <code>external</code> authentication method</li> <li>Example: <code>program = \"/usr/bin/auth-script.sh\"</code></li> </ul> <p>Path to the external authentication program.</p>"},{"location":"authentication-methods/external/#authexternalinstances","title":"<code>auth.external.instances</code>","text":"<ul> <li>Syntax: positive integer</li> <li>Default: <code>1</code></li> <li>Example: <code>instances = 2</code></li> </ul> <p>Specifies the number of workers serving external authentication requests.</p>"},{"location":"authentication-methods/external/#example","title":"Example","text":"<pre><code>[auth.external]\n  program = \"/home/user/authenticator\"\n  instances = 5\n</code></pre>"},{"location":"authentication-methods/http/","title":"HTTP","text":""},{"location":"authentication-methods/http/#overview","title":"Overview","text":"<p>The purpose of this method is to connect to an external REST API and delegate the authentication operations to it. The component must implement the API described below.</p> <p>This method can be especially useful when the user database is shared with other services. It fits perfectly when the client application uses a custom authentication token and MongooseIM has to validate it externally.</p>"},{"location":"authentication-methods/http/#configuration-options","title":"Configuration options","text":"<p>The <code>auth</code> method uses an outgoing HTTP connection pool called <code>auth</code>, which has to be defined in the <code>outgoing_pools</code> section.</p> <p>For additional configuration, the following options can be provided in the <code>auth</code> section:</p>"},{"location":"authentication-methods/http/#authhttpbasic_auth","title":"<code>auth.http.basic_auth</code>","text":"<ul> <li>Syntax: string</li> <li>Default: not set</li> <li>Example: <code>basic_auth = \"admin:secret\"</code></li> </ul> <p>Optional HTTP Basic Authentication in format <code>\"username:password\"</code> - used to authenticate MongooseIM in the HTTP service.</p>"},{"location":"authentication-methods/http/#example","title":"Example","text":"<p>Authentication:</p> <pre><code>[auth.http]\n  basic_auth = \"mongooseim:DzviNQw3qyGJDrJDu+ClyA\"\n</code></pre> <p>Outgoing pools:</p> <pre><code>[outgoing_pools.http.auth]\n  connection.host = \"https://auth-service:8000\"\n</code></pre>"},{"location":"authentication-methods/http/#scram-support","title":"SCRAM support","text":"<p>The <code>http</code> method can use the <code>SASL SCRAM-*</code> mechanisms. When SCRAM is enabled, the passwords sent to the auth service are serialised and the same serialised format is expected when fetching a password from the component.</p> <p>It is transparent when MongooseIM is responsible for all DB operations such as password setting, account creation etc.</p> <p>The service CAN perform the (de)serialization of SCRAM-encoded passwords. You can find more details on the SCRAM serialization page.</p>"},{"location":"authentication-methods/http/#authentication-service-api","title":"Authentication service API","text":""},{"location":"authentication-methods/http/#url-format","title":"URL format","text":"<p>All GET requests include the following URL-encoded query string: <code>?user=&lt;username&gt;&amp;server=&lt;domain&gt;&amp;pass=&lt;password&gt;</code>.</p> <p>All POST requests have the following URL-encoded string in the request body: <code>user=&lt;username&gt;&amp;server=&lt;domain&gt;&amp;pass=&lt;password&gt;</code>.</p> <p>If a certain method does not need a password, the value of <code>pass</code> is undefined, so it shouldn't be used.</p>"},{"location":"authentication-methods/http/#return-codes","title":"Return codes","text":"<p>For the best integration, the return code range should not exceed the list below:</p> <ul> <li>500 - internal server error</li> <li>409 - conflict</li> <li>404 - not found</li> <li>403 - not allowed</li> <li>401 - not authorised</li> <li>400 - other error, should be sent in response body</li> <li>204 - success, no return data</li> <li>201 - created</li> <li>200 - success, return value in response body</li> </ul> <p>Whenever the specification says \"anything else\", service should use one of the codes from the list above.</p> <p>Some requests consider multiple return codes a \"success\". It is up to the server-side developer to pick one of the codes.</p>"},{"location":"authentication-methods/http/#http-header-content-length","title":"HTTP header <code>Content-Length</code>","text":"<p>IMPORTANT: The authentication server MUST include a <code>Content-Length</code> HTTP header in the response. A body can be missing in the first data chunk read from a socket, leading to strange authentication errors.</p>"},{"location":"authentication-methods/http/#method-register","title":"Method <code>register</code>","text":"<ul> <li>Description: Creates a user account.</li> <li>HTTP method: POST</li> <li>Type: mandatory when <code>mod_register</code> is enabled</li> <li>Return values:<ul> <li>201 - success</li> <li>409 - user already exists</li> <li>anything else - will be treated as failure</li> </ul> </li> </ul>"},{"location":"authentication-methods/http/#method-check_password","title":"Method <code>check_password</code>","text":"<ul> <li>Description: Must respond if the password is valid for the user.</li> <li>HTTP method: GET</li> <li>Type: mandatory when SCRAM is not used</li> <li>Return values:<ul> <li>200, <code>true</code> or <code>false</code> in the body</li> <li>anything else - will be treated as <code>false</code></li> </ul> </li> </ul>"},{"location":"authentication-methods/http/#method-get_password","title":"Method <code>get_password</code>","text":"<ul> <li>Description: Must return the user's password in plaintext or in the SCRAM serialised form.</li> <li>HTTP method: GET</li> <li>Type: mandatory when SCRAM or DIGEST SASL mechanism is used</li> <li>Return values:<ul> <li>200, password in the body</li> <li>anything else - <code>get_password</code> will fail</li> </ul> </li> </ul>"},{"location":"authentication-methods/http/#method-get_certs","title":"Method <code>get_certs</code>","text":"<ul> <li>Description: Must return all the valid certificates of a user in the PEM format.</li> <li>HTTP method: GET</li> <li>Type: mandatory when EXTERNAL SASL mechanism is used</li> <li>Return values:<ul> <li>200, all the user's certificates listed one after another (as in a PEM file)</li> <li>anything else - <code>get_certs</code> will fail</li> </ul> </li> </ul>"},{"location":"authentication-methods/http/#method-user_exists","title":"Method <code>user_exists</code>","text":"<ul> <li>Description: Must return the information whether the user exists in DB.</li> <li>HTTP method: GET</li> <li>Type: mandatory</li> <li>Return values:<ul> <li>200, <code>true</code> or <code>false</code> in body</li> <li>anything else - will be treated as <code>false</code></li> </ul> </li> </ul>"},{"location":"authentication-methods/http/#method-set_password","title":"Method <code>set_password</code>","text":"<ul> <li>Description: Must set user's password in the internal database to a provided value.  The value should not be transformed (except for URL-decoding) before writing into the DB.</li> <li>HTTP method: POST</li> <li>Type: mandatory when <code>mod_register</code> is enabled</li> <li>Return values:<ul> <li>200 or 201 or 204 - success</li> <li>anything else - will be treated as <code>false</code></li> </ul> </li> </ul>"},{"location":"authentication-methods/http/#method-remove_user","title":"Method <code>remove_user</code>","text":"<ul> <li>Description: Removes a user account.</li> <li>HTTP method: POST</li> <li>Type: mandatory when <code>mod_register</code> is enabled</li> <li>Return values:<ul> <li>200 or 201 or 204 - success</li> <li>404 - user does not exist</li> <li>403 - not allowed for some reason</li> <li>40X - will be treated as <code>bad request</code></li> </ul> </li> </ul>"},{"location":"authentication-methods/http/#authentication-service-api-recipes","title":"Authentication service API recipes","text":"<p>Below you can find some examples of the auth service APIs and MongooseIM-side configuration along with use cases.</p>"},{"location":"authentication-methods/http/#system-using-a-common-custom-auth-token","title":"System using a common, custom auth token","text":"<p>An Auth token is provided as a password.</p> <ul> <li>Service implements: <code>check_password</code>, <code>user_exists</code></li> <li>MongooseIM config: <code>password.format</code>: <code>plain</code>, <code>mod_register</code> disabled</li> <li>Client side: Must NOT use the <code>DIGEST-MD5</code> mechanism; use <code>PLAIN</code> instead</li> </ul>"},{"location":"authentication-methods/http/#central-database-of-plaintext-passwords","title":"Central database of plaintext passwords","text":"<ul> <li>Service implements: <code>check_password</code>, <code>get_password</code>, <code>user_exists</code></li> <li>MongooseIM config: <code>password.format</code>: <code>plain</code>, <code>mod_register</code> disabled</li> <li>Client side: May use any available SASL mechanism</li> </ul>"},{"location":"authentication-methods/http/#central-database-able-to-process-scram","title":"Central database able to process SCRAM","text":"<ul> <li>Service implements: <code>get_password</code>, <code>user_exists</code></li> <li>MongooseIM config: <code>password.format</code>: <code>scram</code>, <code>mod_register</code> disabled</li> <li>Client side: May use any available SASL mechanism</li> </ul>"},{"location":"authentication-methods/http/#godlike-mongooseim","title":"Godlike MongooseIM","text":"<ul> <li>Service implements: all methods</li> <li>MongooseIM config: <code>password.format</code>: <code>scram</code> (recommended) or <code>plain</code>, <code>mod_register</code> enabled</li> <li>Client side: May use any available SASL mechanism</li> </ul>"},{"location":"authentication-methods/jwt/","title":"JWT","text":""},{"location":"authentication-methods/jwt/#overview","title":"Overview","text":"<p>This authentication method can verify JSON Web Tokens provided by the clients. A wide range of signature algorithms is supported, including those using public key cryptography.</p> <p>The module checks the signature and validity of the following parameters:</p> <ul> <li><code>exp</code> - an expired token is rejected,</li> <li><code>iat</code> - a token must be issued in the past,</li> <li><code>nbf</code> - a token might not be valid yet.</li> </ul> <p>It requires the <code>SASL PLAIN</code> mechanism listed in <code>sasl_mechanisms</code>.</p>"},{"location":"authentication-methods/jwt/#configuration-options","title":"Configuration options","text":""},{"location":"authentication-methods/jwt/#authjwtsecret","title":"<code>auth.jwt.secret</code>","text":"<ul> <li>Syntax: TOML table with exactly one of the possible items listed below:<ul> <li><code>file</code> - string, path to the file with the JWT secret,</li> <li><code>env</code>- string, environment variable name with the JWT secret,</li> <li><code>value</code> - string, the JWT secret value.</li> </ul> </li> <li>Default: no default, this option is mandatory</li> <li>Example: <code>secret.env = \"JWT_SECRET\"</code></li> </ul> <p>This is the JWT secret used for the authentication. You can store it in a file, as an environment variable or specify it directly.</p>"},{"location":"authentication-methods/jwt/#authjwtalgorithm","title":"<code>auth.jwt.algorithm</code>","text":"<ul> <li>Syntax: string, one of: <code>\"HS256\"</code>, <code>\"RS256\"</code>, <code>\"ES256\"</code>, <code>\"HS386\"</code>, <code>\"RS386\"</code>, <code>\"ES386\"</code>, <code>\"HS512\"</code>, <code>\"RS512\"</code>, <code>\"ES512\"</code></li> <li>Default: no default, this option is mandatory</li> <li>Example: <code>algorithm = \"HS512\"</code></li> </ul> <p>Name of the algorithm used to sign the JWT.</p>"},{"location":"authentication-methods/jwt/#authjwtusername_key","title":"<code>auth.jwt.username_key</code>","text":"<ul> <li>Syntax: string</li> <li>Default: no default, this option is mandatory</li> <li>Example: <code>username_key = \"user_name\"</code></li> </ul> <p>Name of the JWT key that contains the user name to verify.</p>"},{"location":"authentication-methods/jwt/#example","title":"Example","text":"<pre><code>[auth.jwt]\n  secret.value = \"top-secret123\"\n  algorithm = \"HS256\"\n  username_key = \"user\"\n</code></pre>"},{"location":"authentication-methods/ldap/","title":"LDAP","text":""},{"location":"authentication-methods/ldap/#overview","title":"Overview","text":"<p>This authentication method provides a read-only abstraction over an LDAP directory.</p> <p>The following SASL mechanisms are supported:</p>"},{"location":"authentication-methods/ldap/#sasl-external","title":"SASL EXTERNAL","text":"<p>User credentials are verified by performing an LDAP search with the user name provided by the client. This can be used to verify that the user is allowed to log in after the provided certificate has been verified.</p> <p>This method requires one connection pool with the <code>default</code> tag (unless you change it with the <code>pool_tag</code> option). You need to provide the root DN and password unless your LDAP password allows anonymous searches.</p> <p>Example:</p> <pre><code>[outgoing_pools.ldap.default]\n  workers = 5\n  connection.servers = [\"ldap-server.example.com\"]\n  connection.rootdn = \"cn=admin,dc=example,dc=com\"\n  connection.password = \"ldap-admin-password\"\n</code></pre> <p>For more details see outgoing connections.</p>"},{"location":"authentication-methods/ldap/#sasl-plain","title":"SASL PLAIN","text":"<p>User credentials are verified by performing an LDAP search followed by a bind with the user name and password provided by the client.</p> <p>To use SASL PLAIN, you need to configure two connection pools:</p> <ul> <li>one with the <code>default</code> tag (unless you change it with the <code>pool_tag</code> option) for the search operations (like for SASL EXTERNAL),</li> <li>one with the <code>bind</code> tag (unless you change it with the <code>bind_pool_tag</code> option) for the bind operations - for this one it is not necessary to provide the root DN and password as the bind operations will be performed with users' credentials. This pool has to be used exclusively for the bind operations as the authentication state of the connection changes with each request.</li> </ul> <p>Example:</p> <pre><code>[outgoing_pools.ldap.default]\n  workers = 5\n  connection.servers = [\"ldap-server.example.com\"]\n  connection.rootdn = \"cn=admin,dc=example,dc=com\"\n  connection.password = \"ldap-admin-password\"\n\n[outgoing_pools.ldap.bind]\n  connection.servers = [\"ldap-server.example.com\"]\n</code></pre> <p>For more details see outgoing connections.</p>"},{"location":"authentication-methods/ldap/#configuration-options","title":"Configuration options","text":""},{"location":"authentication-methods/ldap/#authldappool_tag","title":"<code>auth.ldap.pool_tag</code>","text":"<ul> <li>Syntax: string</li> <li>Default: <code>\"default\"</code></li> <li>Example: <code>pool_tag = \"my_pool\"</code></li> </ul> <p>Specifies the tag for the primary outgoing connection pool for LDAP authentication.</p>"},{"location":"authentication-methods/ldap/#authldapbind_pool_tag","title":"<code>auth.ldap.bind_pool_tag</code>","text":"<ul> <li>Syntax: string</li> <li>Default: <code>\"bind\"</code></li> <li>Example: <code>bind_pool_tag = \"my_bind_pool\"</code></li> </ul> <p>Specifies the tag for the secondary outgoing connection pool for LDAP authentication, used for operations requiring the <code>bind</code> operations, such as checking passwords.</p>"},{"location":"authentication-methods/ldap/#authldapbase","title":"<code>auth.ldap.base</code>","text":"<ul> <li>Syntax: string</li> <li>Default: no default, this option is mandatory</li> <li>Example: <code>base = \"ou=Users,dc=example,dc=com\"</code></li> </ul> <p>LDAP base directory which stores user accounts.</p>"},{"location":"authentication-methods/ldap/#authldapuids","title":"<code>auth.ldap.uids</code>","text":"<ul> <li>Syntax: array of TOML tables with the following content:<ul> <li><code>attr</code> - string, mandatory, name of the attribute</li> <li><code>format</code> - pattern, default: <code>\"%u\"</code>, requires <code>attr</code></li> </ul> </li> <li>Default: <code>[{attr = \"uid\"}]</code></li> <li>Example: <code>uids = [{attr = \"uid\", format = \"%u@example.org\"}, {attr = \"another_uid\"}]</code></li> </ul> <p>List of LDAP attributes that contain the user name (user's part of the JID), used to search for user accounts. They are used as alternatives - it is enough if one of them contains the name. By default the whole value of the attribute is expected to be the user name. If this is not the case, use the <code>format</code> option. It must contain one and only one pattern variable <code>%u</code> which will be replaced by the user name.</p>"},{"location":"authentication-methods/ldap/#authldapfilter","title":"<code>auth.ldap.filter</code>","text":"<ul> <li>Syntax: string</li> <li>Default: not set</li> <li>Example: <code>filter = \"(&amp;(objectClass=shadowAccount)(memberOf=Jabber Users))\"</code></li> </ul> <p>An additional LDAP filter used to narrow down the search for user accounts. Do not forget to close the brackets and do not use superfluous whitespaces as this expression is processed before sending to LDAP - the match for user name (see <code>ldap.uids</code>) is added automatically.</p>"},{"location":"authentication-methods/ldap/#authldapdn_filter","title":"<code>auth.ldap.dn_filter</code>","text":"<ul> <li>Syntax: TOML table with the following content:<ul> <li><code>filter</code> - string (LDAP filter), mandatory</li> <li><code>attributes</code> - array of strings (attribute names)</li> </ul> </li> <li>Default: not set</li> <li>Example: <code>dn_filter = {filter = \"(&amp;(name=%s)(owner=%D)(user=%u@%d))\", attributes = [\"sn\"]}</code></li> </ul> <p>This filter is applied to the results returned by the main filter. It performs an additional LDAP lookup to provide the complete result. This is useful when you are unable to define all filter rules in <code>ldap.filter</code>. You can define <code>%u</code>, <code>%d</code>, <code>%s</code> and <code>%D</code> pattern variables in the filter:</p> <ul> <li><code>%u</code> is replaced by the user\u2019s part of a JID,</li> <li><code>%d</code> is replaced by the corresponding domain (virtual host),</li> <li><code>%s</code> variables are consecutively replaced by values of the attributes listen as <code>attributes</code></li> <li><code>%D</code> is replaced by the Distinguished Name.</li> </ul> <p>Since this filter makes additional LDAP lookups, use it only as the last resort; try to define all filter rules in <code>ldap.filter</code> if possible.</p>"},{"location":"authentication-methods/ldap/#authldaplocal_filter","title":"<code>auth.ldap.local_filter</code>","text":"<ul> <li>Syntax: TOML table with the following content:<ul> <li><code>operation</code> - string, mandatory, <code>\"equal\"</code> or <code>\"notequal\"</code></li> <li><code>attribute</code> - string, mandatory, LDAP attribute</li> <li><code>values</code> - array of strings (attribute values)</li> </ul> </li> <li>Default: not set</li> <li>Example: <code>local_filter = {operation = \"equal\", attribute = \"accountStatus\", values = [\"enabled\"]}</code></li> </ul> <p>If you can\u2019t use the <code>ldap.filter</code> due to performance reasons (the LDAP server has many users registered), you can use this local filter. The local filter checks an attribute in MongooseIM, not in LDAP, so this limits the load on the LDAP directory.</p> <p>The example above shows a filter which matches accounts with the \"enabled\" status. Another example is shown below - it matches any account that is neither \"disabled\" nor \"blacklisted\". It also shows the usage of TOML dotted keys, which is recommended when the inline table grows too big.</p> <pre><code>   local_filter.operation = \"notequal\"\n   local_filter.attribute = \"accountStatus\"\n   local_filter.values = [\"disabled\", \"blacklisted\"]\n</code></pre>"},{"location":"authentication-methods/ldap/#authldapderef","title":"<code>auth.ldap.deref</code>","text":"<ul> <li>Syntax: string, one of: <code>\"never\"</code>, <code>\"always\"</code>, <code>\"finding\"</code>, <code>\"searching\"</code></li> <li>Default: <code>\"never\"</code></li> <li>Example: <code>deref = \"always\"</code></li> </ul> <p>Specifies whether or not to dereference aliases: <code>finding</code> means to dereference only when finding the base and <code>searching</code> - only when performing the LDAP search. See the documentation on LDAP search operation for more information.</p>"},{"location":"authentication-methods/ldap/#example","title":"Example","text":"<pre><code>[auth.ldap]\n  base = \"ou=Users,dc=example,dc=com\"\n  filter = \"(objectClass=inetOrgPerson)\"\n</code></pre>"},{"location":"authentication-methods/pki/","title":"PKI","text":""},{"location":"authentication-methods/pki/#overview","title":"Overview","text":"<p>This is a simple authentication method, meant to be used with the <code>SASL EXTERNAL</code> mechanism. It simply accepts all usernames as long as they are validated by the SASL logic.</p> <p>Warning</p> <p>Some of its callbacks return hardcoded values, as it's impossible for this backend to properly acquire certain pieces of information. These include:</p> Function Hardcoded value Explanation <code>does_user_exist</code> <code>true</code> PKI reponds with <code>true</code> to modules checking if user's interlocutor actually exists so e.g. messages to nonexistent users will always be stored by <code>mod_mam</code>. This is not necessarily a security threat but something to be aware of. <code>dirty_get_registered_users</code>, <code>get_vh_registered_users</code>, <code>get_vh_registered_users_number</code> <code>[]</code> Any metrics or statistics (e.g. available via <code>mongooseimctl</code>) related to accounts list or numbers, won't display proper values, as this backend cannot possibly \"know\" how many users there are."},{"location":"authentication-methods/pki/#configuration-options","title":"Configuration options","text":"<p>None.</p>"},{"location":"authentication-methods/pki/#example","title":"Example","text":"<pre><code>[auth.pki]\n</code></pre>"},{"location":"authentication-methods/rdbms/","title":"RDBMS","text":""},{"location":"authentication-methods/rdbms/#overview","title":"Overview","text":"<p>This authentication method stores user accounts in a relational database, e.g. MySQL or PostgreSQL.</p>"},{"location":"authentication-methods/rdbms/#configuration-options","title":"Configuration options","text":"<p>The <code>rdbms</code> method uses an outgoing connection pool of type <code>rdbms</code> with the <code>default</code> tag - it has to be defined in the <code>outgoing_pools</code> section.</p>"},{"location":"authentication-methods/rdbms/#authrdbmsusers_number_estimate","title":"<code>auth.rdbms.users_number_estimate</code>","text":"<ul> <li>Syntax: boolean</li> <li>Default: false</li> <li>Example: <code>users_number_estimate = true</code></li> </ul> <p>By default querying MongooseIM for the number of registered users uses the <code>SELECT COUNT</code> query, which might be slow. Enabling this option makes MongooseIM use an alternative query that might be not as accurate, but is always fast.</p> <p>Note</p> <p>This option is effective only for MySQL and PostgreSQL.</p>"},{"location":"authentication-methods/rdbms/#example","title":"Example","text":"<p>Authentication:</p> <pre><code>[auth.rdbms]\n  users_number_estimate = true\n</code></pre> <p>Outgoing pools:</p> <pre><code>[outgoing_pools.rdbms.default.connection]\n  driver = \"pgsql\"\n  host = \"localhost\"\n  database = \"mongooseim\"\n  username = \"mongooseim\"\n  password = \"mongooseim_secret\"\n</code></pre>"},{"location":"configuration/Erlang-cookie-security/","title":"Erlang Cookie Security","text":"<p>In order for MongooseIM nodes to communicate with each other, they have to share a common secret - i.e. a cookie - which is a feature of the underlying Erlang VM. The cookie itself is an UTF-8 string that is up to 255 characters in size. Thanks to the cookie, MongooseIM nodes can determine if they are allowed to communicate with each other and with no cookie no communication would flow between the nodes - a feature especially useful when you are running more than one applications on a single machine. </p> <p>For ease of deployment and staging, each MongooseIM node is configured with a predefined erlang cookie. However, one should remember that for production environments this cookie should be reconfigured to a new secret cookie, as this will secure your system from intrusion. You can change the cookie by changing the parameters of the <code>-setcookie</code> parameter in the <code>vm.args</code> file.</p> <p>Nonetheless, one should remember that communication between Erlang nodes is unencrypted by default, hence, the cookie is vulnerable to sniffing. If one has access to a MongooseIM cookie and figures out the hostname of a node, one can execute shell commands remotely on that node. Therefore, one should either provide privacy at the network layer (strongly recommended) or disable port 4369 for ultimate security.</p>"},{"location":"configuration/Modules/","title":"Options: Extension Modules","text":"<p>MongooseIM provides a wide range of pluggable and configurable modules, that implement various features including XEPs. For instance <code>mod_muc</code> enables Multi-User Chat (group chat), <code>mod_mam</code> gives us Message Archive Management, and <code>mod_stream_management</code> is for stanza acknowledgement and stream resumption. This modular architecture provides great flexibility for everyday operations and feature development.</p> <p>A module configuration generally looks like this: <pre><code>[modules.mod_muc]\n  host = \"muc.@HOST@\"\n  access = \"muc\"\n  access_create = \"muc_create\"\n</code></pre></p>"},{"location":"configuration/Modules/#iq-processing-policies","title":"IQ processing policies","text":"<p>Some of the modules feature an <code>iqdisc</code> parameter. It defines the method for handling incoming IQ stanzas.</p> <p>The server may use one of the following strategies to handle incoming IQ stanzas:</p>"},{"location":"configuration/Modules/#modulesiqdisctype","title":"<code>modules.*.iqdisc.type</code>","text":"<ul> <li>Syntax: string, one of <code>\"one_queue\"</code>, <code>\"no_queue\"</code>, <code>\"queues\"</code>, or <code>\"parallel\"</code></li> <li>Example: <code>iqdisc.type = \"one_queue\"</code></li> </ul> <p>Note</p> <p>In the <code>\"queues\"</code> case alone, the following key becomes mandatory:</p>"},{"location":"configuration/Modules/#modulesiqdiscworkers","title":"<code>modules.*.iqdisc.workers</code>","text":"<ul> <li>Syntax: positive integer</li> <li>Example: <code>iqdisc.workers = 50</code></li> </ul> <p>Their semantics works as follows:</p> <ul> <li><code>no_queue</code> registers a new IQ handler, which will be called in the   context of the process serving the connection on which the IQ arrives.</li> <li><code>one_queue</code> spawns a new process by which the incoming IQ stanzas will be handled.</li> <li><code>queues</code> spawns N worker processes, as provided by the <code>iqdisc.workers</code> key.   Every incoming stanza will be then handled by one of those processes.</li> <li><code>parallel</code> registers the handler without spawning any process:   a new process will be spawned in place, for each incoming stanza.</li> </ul>"},{"location":"configuration/Modules/#modules-list","title":"Modules list","text":""},{"location":"configuration/Modules/#mod_adhoc","title":"mod_adhoc","text":"<p>Implements XEP-0050: Ad-Hoc Commands for advertising and executing application-specific commands, such as those related to a configuration workflow, using XEP-0004: Data Forms in order to structure the information exchange. This is extremely useful for use cases such as remote administration, user engagement via polls, and ChatBots.</p>"},{"location":"configuration/Modules/#mod_amp","title":"mod_amp","text":"<p>Implements a subset of XEP-0079: Advanced Message Processing functionality, that enables entities to request, and servers to perform advanced processing of XMPP message stanzas, including reliable data transport, time-sensitive delivery, and expiration of transient messages.</p>"},{"location":"configuration/Modules/#mod_auth_token","title":"mod_auth_token","text":"<p>A module used by SASL X-OAUTH mechanism. It provides an API to manage custom OAuth tokens. It requires mod_keystore as an actual key database.</p>"},{"location":"configuration/Modules/#mod_blocking","title":"mod_blocking","text":"<p>Implements XEP-0191: Blocking Command, a simplified interface to privacy lists.</p>"},{"location":"configuration/Modules/#mod_bind2","title":"mod_bind2","text":"<p>Implements XEP-0386: Bind 2.</p>"},{"location":"configuration/Modules/#mod_bosh","title":"mod_bosh","text":"<p>Allows users to connect to MongooseIM using BOSH (Bidirectional-streams Over Synchronous HTTP), the HTTP long-polling technique described in XEP-0124: Bidirectional-streams Over Synchronous HTTP (BOSH) and XEP-0206: XMPP Over BOSH.</p>"},{"location":"configuration/Modules/#mod_caps","title":"mod_caps","text":"<p>Implements XEP-0115: Entity Capabilities. It queries clients for their supported functionalities and caches them in Mnesia. This module tightly cooperates with mod_pubsub in order to deliver PEP events to user's subscribers.</p>"},{"location":"configuration/Modules/#mod_carboncopy","title":"mod_carboncopy","text":"<p>Implements XEP-0280: Message Carbons in order to keep all IM clients for a user engaged in a real-time conversation by carbon-copying all inbound and outbound messages to all interested resources (Full JIDs).</p>"},{"location":"configuration/Modules/#mod_csi","title":"mod_csi","text":"<p>Enables the XEP-0352: Client State Indication functionality.</p>"},{"location":"configuration/Modules/#mod_disco","title":"mod_disco","text":"<p>Implements XEP-0030: Service Discovery for discovering information (capabilities, protocols, features) about other XMPP entities.</p>"},{"location":"configuration/Modules/#mod_event_pusher","title":"mod_event_pusher","text":"<p>A framework module to build other notification-based modules on.</p>"},{"location":"configuration/Modules/#mod_event_pusher_sns","title":"mod_event_pusher_sns","text":"<p>Allows sending online/offline notifications, chat and groupchat messages as events to Amazon Simple Notification Service.</p>"},{"location":"configuration/Modules/#mod_event_pusher_rabbit","title":"mod_event_pusher_rabbit","text":"<p>Allows sending presence changes (to available/unavailable), chat and groupchat messages as events to a RabbitMQ server.</p>"},{"location":"configuration/Modules/#mod_event_pusher_push","title":"mod_event_pusher_push","text":"<p>Implements XEP-0357: Push Notifications to provide push notifications to clients that are temporary unavailable.</p>"},{"location":"configuration/Modules/#mod_event_pusher_http","title":"mod_event_pusher_http","text":"<p>Forward events to an external HTTP service. This applies to situations such as sending messages or presences to mobile/SMS/email push service, big data, or an analytics service.</p>"},{"location":"configuration/Modules/#mod_extdisco","title":"mod_extdisco","text":"<p>Implements XEP-0215: External Service Discovery for discovering information about services external to the XMPP network. The main use-case is to help discover STUN/TURN servers to allow for negotiating media exchanges.</p>"},{"location":"configuration/Modules/#mod_http_upload","title":"mod_http_upload","text":"<p>Implements XEP-0363: HTTP File Upload for coordinating with an XMPP server to upload files via HTTP and receive URLs that can be shared in messages.</p>"},{"location":"configuration/Modules/#mod_inbox","title":"mod_inbox","text":"<p>Implements custom inbox XEP</p>"},{"location":"configuration/Modules/#mod_global_distrib","title":"mod_global_distrib","text":"<p>Enables sharing a single XMPP domain between distinct datacenters (experimental).</p>"},{"location":"configuration/Modules/#mod_jingle_sip","title":"mod_jingle_sip","text":"<p>Enables Jingle to SIP and SIP to Jingle translator.</p>"},{"location":"configuration/Modules/#mod_keystore","title":"mod_keystore","text":"<p>Serves as a storage for crypto keys for <code>mod_auth_token</code>.</p>"},{"location":"configuration/Modules/#mod_last","title":"mod_last","text":"<p>Implements XEP-0012: Last Activity for communicating information about the last activity associated with an XMPP entity (most recent presence information from an offline contact).</p>"},{"location":"configuration/Modules/#mod_mam","title":"mod_mam","text":"<p>Implements XEP-0313: Message Archive Management, that defines a protocol to query and control an archive of messages stored on a server.</p>"},{"location":"configuration/Modules/#mod_muc","title":"mod_muc","text":"<p>Implements XEP-0045: Multi-User Chat, for a featureful multi-user text chat (group chat), whereby multiple XMPP users can exchange messages in the context of a chat room. It is tightly coupled with user presence in chat rooms.</p>"},{"location":"configuration/Modules/#mod_muc_log","title":"mod_muc_log","text":"<p>Implements a logging subsystem for mod_muc.</p>"},{"location":"configuration/Modules/#mod_muc_light","title":"mod_muc_light","text":"<p>Implements XEP Multi-User Chat Light.</p>"},{"location":"configuration/Modules/#mod_offline","title":"mod_offline","text":"<p>Provides an offline messages storage that is compliant with XEP-0160: Best Practices for Handling Offline Messages.</p>"},{"location":"configuration/Modules/#mod_offline_stub","title":"mod_offline_stub","text":"<p>Prevents <code>&lt;service-unavailable/&gt;</code> error when the message recipient is offline.</p>"},{"location":"configuration/Modules/#mod_ping","title":"mod_ping","text":"<p>Implements XEP-0199: XMPP Ping, enabling periodic XMPP pings sent to clients and responds to those sent from clients.</p>"},{"location":"configuration/Modules/#mod_privacy","title":"mod_privacy","text":"<p>This module implements XEP-0016: Privacy Lists, for enabling or disabling communication with other entities on a network.</p>"},{"location":"configuration/Modules/#mod_private","title":"mod_private","text":"<p>Implements XEP-0049: Private XML Storage to store and query private user data in XML format.</p>"},{"location":"configuration/Modules/#mod_pubsub","title":"mod_pubsub","text":"<p>This extension implements XEP-0060: Publish-Subscribe. It is a pluggable implementation using behaviours provided by <code>node_*.erl</code> and <code>nodetree_*.erl</code> modules.</p>"},{"location":"configuration/Modules/#mod_push_service_mongoosepush","title":"mod_push_service_mongoosepush","text":"<p>Handles push notifications generated by mod_pubsub's <code>node_push</code> and passes them to MongoosePush service.</p>"},{"location":"configuration/Modules/#mod_register","title":"mod_register","text":"<p>Implements XEP-0077: In-Band Registration, that enables creating an account and changing the password once connected. This does not provide a solution to the forgotten password use case via SMS or email.</p>"},{"location":"configuration/Modules/#mod_roster","title":"mod_roster","text":"<p>Roster support, specified in RFC 6121. Includes support for XEP-0237: Roster Versioning.</p>"},{"location":"configuration/Modules/#mod_sasl2","title":"mod_sasl2","text":"<p>Implements XEP-0388: Extensible SASL Profile.</p>"},{"location":"configuration/Modules/#mod_shared_roster_ldap","title":"mod_shared_roster_ldap","text":"<p>This module, when enabled, will inject roster entries fetched from LDAP.</p>"},{"location":"configuration/Modules/#mod_sic","title":"mod_sic","text":"<p>Implements XEP-0279: Server IP Check that enables a client to discover its external IP address.</p>"},{"location":"configuration/Modules/#mod_stream_management","title":"mod_stream_management","text":"<p>Enables XEP-0198: Stream Management functionality that defines the active management of an XML stream between two XMPP entities, including features for stanza acknowledgements and stream resumption.</p>"},{"location":"configuration/Modules/#mod_time","title":"mod_time","text":"<p>XEP-0202: Entity Time implementation. With this extensions, clients can get the current server time.</p>"},{"location":"configuration/Modules/#mod_vcard","title":"mod_vcard","text":"<p>Provides support for vCards, as specified in XEP-0054: vcard-temp and XEP-0055: Jabber Search.</p>"},{"location":"configuration/Modules/#mod_version","title":"mod_version","text":"<p>This module provides the functionality specified in XEP-0092: Software Version.</p>"},{"location":"configuration/Modules/#modules-incompatible-with-dynamic-domains","title":"Modules incompatible with dynamic domains","text":"<p>There are some modules that don't support dynamic domains for now. These must not be enabled when using host types in <code>modules</code> or <code>host_config.modules</code> sections:</p> <ul> <li>mod_event_pusher</li> <li>mod_global_distrib</li> <li>mod_jingle_sip</li> <li>mod_pubsub</li> <li>mod_push_service_mongoosepush</li> <li>mod_shared_roster_ldap</li> </ul> <p>Please note, that <code>s2s</code> and the XMPP components (XEP-0114) mechanism, as configured in the <code>listen.service</code> section, do not support dynamic domains as well.</p>"},{"location":"configuration/Services/","title":"Options: Services","text":"<p>Some functionalities in MongooseIM are provided by \"services\". A service is similar to a module, but while a module is started for every host type and may have global or specific configuration, a service is started only once with global configuration. Currently, three modules are categorised as \"service providers\". Eventually the modules which are not specific for a host type will be refactored to be services.</p> <ul> <li>Syntax: Each service is specified in its own <code>services.*</code> section.</li> <li>Default: None - each service needs to be enabled explicitly. Typical services are already specified in the example configuration file.</li> <li>Example: A configuration of the <code>service_domain_db</code> service.</li> </ul> <pre><code>[services.service_domain_db]\n  event_cleaning_interval = 1000\n  event_max_age = 5000\n</code></pre>"},{"location":"configuration/Services/#service_mongoose_system_metrics","title":"service_mongoose_system_metrics","text":"<p>MongooseIM system metrics are being gathered to analyse the trends and needs of our users, improve MongooseIM, and get to know where to focus our efforts. See System Metrics Privacy Policy for more details.</p>"},{"location":"configuration/Services/#servicesservice_mongoose_system_metricsreport","title":"<code>services.service_mongoose_system_metrics.report</code>","text":"<ul> <li>Syntax: boolean</li> <li>Default: not specified</li> <li>Example: <code>report = true</code></li> </ul> <p>An explicit acknowledgement that the metrics are gathered and reported. When this option is not specified, the reports are gathered, and a notification appears in logs on startup. Enabling this option silences the notification reminder that metrics are gathered. When this option is set to <code>false</code>, System Metrics Service is not started and metrics are not collected.</p>"},{"location":"configuration/Services/#servicesservice_mongoose_system_metricsintial_report","title":"<code>services.service_mongoose_system_metrics.intial_report</code>","text":"<ul> <li>Syntax: non-negative integer</li> <li>Default: <code>300_000</code> (milliseconds - 5 minutes).</li> <li>Example: <code>intial_report = 300_000</code></li> </ul> <p>Time delay counted when the service is started after which the first metrics report is created and sent.</p>"},{"location":"configuration/Services/#servicesservice_mongoose_system_metricsperiodic_report","title":"<code>services.service_mongoose_system_metrics.periodic_report</code>","text":"<ul> <li>Syntax: non-negative integer</li> <li>Default: <code>108_000_000</code> (milliseconds - 3 hours)</li> <li>Example: <code>periodic_report = 108_000_000</code></li> </ul> <p>Time delay for a periodic update report to be created and sent.</p>"},{"location":"configuration/Services/#servicesservice_mongoose_system_metricstracking_idid","title":"<code>services.service_mongoose_system_metrics.tracking_id.id</code>:","text":"<ul> <li>Syntax: string</li> <li>Default: no default.</li> <li>Example: <code>tracking_id.id = \"G-123456789\"</code></li> </ul> <p>Tracking ID to forward the reported metrics so that they can be viewed in the Google Analytics dashboard.</p>"},{"location":"configuration/Services/#servicesservice_mongoose_system_metricstracking_idsecret","title":"<code>services.service_mongoose_system_metrics.tracking_id.secret</code>:","text":"<ul> <li>Syntax: string</li> <li>Default: no default.</li> <li>Example: <code>tracking_id.secret = \"Secret\"</code></li> </ul> <p>Removing the <code>services.service_mongoose_system_metrics</code> entry will result in the service not being started. Metrics will not be collected and shared. It will generate a notification that the feature is not being used. The notification can be silenced by setting the <code>no_report</code> option explicitly.</p>"},{"location":"configuration/Services/#service_domain_db","title":"service_domain_db","text":"<p>This service is needed to use the dynamic domains API. It is used to synchronise dynamic domains between nodes after starting.</p>"},{"location":"configuration/Services/#servicesservice_domain_dbdb_pool","title":"<code>services.service_domain_db.db_pool</code>","text":"<ul> <li>Syntax: string</li> <li>Default: <code>global</code></li> <li>Example: <code>db_pool = \"my_host_type\"</code></li> </ul> <p>By default, this service uses the RDBMS connection pool configured with the scope <code>\"global\"</code>. You can put a specific host type there to use the <code>default</code> pool with the <code>host_type</code> scope for that particular host type. See the outgoing connections docs for more information about pool scopes.</p>"},{"location":"configuration/Services/#servicesservice_domain_dbevent_cleaning_interval","title":"<code>services.service_domain_db.event_cleaning_interval</code>","text":"<ul> <li>Syntax: positive integer</li> <li>Default: <code>1800</code> (seconds - 30 minutes)</li> <li>Example: <code>event_cleaning_interval = 1800</code></li> </ul> <p>The number of seconds between cleaning attempts of the <code>domain_events</code> table.</p>"},{"location":"configuration/Services/#servicesservice_domain_dbevent_max_age","title":"<code>services.service_domain_db.event_max_age</code>","text":"<ul> <li>Syntax: positive integer</li> <li>Default: <code>7200</code> (seconds - 2 hours)</li> <li>Example: <code>event_max_age = 7200</code></li> </ul> <p>The number of seconds after an event must be deleted from the <code>domain_events</code> table.</p>"},{"location":"configuration/Services/#example-configuration","title":"Example configuration","text":"<pre><code>[services.service_mongoose_system_metrics]\n  report = true\n  initial_report = 300_000\n  periodic_report = 108_000_000\n  tracking_id.id = \"G-123456789\"\n  tracking_id.secret = \"Secret\"\n\n[services.service_domain_db]\n  db_pool = \"global\"\n  event_cleaning_interval = 1800\n  event_max_age = 7200\n</code></pre>"},{"location":"configuration/TLS-hardening/","title":"TLS Hardening","text":""},{"location":"configuration/TLS-hardening/#otp-tls-vs-fast-tls","title":"OTP TLS vs. Fast TLS","text":"<p>Before we explain the TLS hardening in MongooseIM, we need to describe the TLS libraries used in the project. These are \"OTP TLS\" and \"Fast TLS\".</p> <p>The former is provided by (as the name suggests) OTP as the <code>ssl</code> application. Large part of the logic is implemented in Erlang but it calls OpenSSL API for some operations anyway.</p> <p>The latter is a community-maintained driver, which is implemented as NIFs (native C code). It uses OpenSSL API for all operations.</p> <p>Most MongooseIM components use the TLS library provided by OTP. However, some of them choose to integrate with <code>fast_tls</code> library instead. The former one is used primarily by MIM dependencies, while the latter is used only by MIM modules.</p> <p>None of them is strictly better than the other. Below you may find a summary of the differences between them.</p> <ul> <li><code>fast_tls</code> is faster</li> <li>There are options that OTP TLS (a.k.a <code>just_tls</code> in the C2S listener configuration) supports exclusively:<ul> <li>Immediate connection drop when the client certificate is invalid</li> <li>Certificate Revocation Lists</li> <li>More flexible certificate verification options</li> </ul> </li> <li>Allowed protocol versions may be configured:<ul> <li>Globally for OTP TLS via an environment variable</li> <li>Per socket in Fast TLS via OpenSSL cipher string</li> </ul> </li> </ul>"},{"location":"configuration/TLS-hardening/#deprecations","title":"Deprecations","text":"<p>MongooseIM is configured to allow only TLS 1.2 or higher, due to known vulnerabilities in TLS 1.0 and 1.1. It is still possible to enable earlier versions, however it is strongly discouraged.</p>"},{"location":"configuration/TLS-hardening/#otp-tls-hardening","title":"OTP TLS hardening","text":"<p>Protocol list for OTP TLS is set via the <code>protocol_version</code> environment variable. It's an Erlang runtime variable, so it is not configured in the OS but rather in the<code>app.config</code> file. It may be found in <code>etc/</code> folder inside MongooseIM release and in <code>[repository root]/rel/files/</code>.</p> <p>In order to change the list, please find the following lines:</p> <pre><code>{protocol_version, ['tlsv1.2',\n                    'tlsv1.3'\n          ]}\n</code></pre> <p>The remaining valid values are: <code>'tlsv1.1'</code>, <code>tlsv1</code>, <code>sslv3</code>.</p> <p>This setting affects the following MongooseIM components:</p> <ul> <li>Raw XMPP over TCP connections, if a C2S listener is configured to use <code>just_tls</code></li> <li>All outgoing connections (databases, AMQP, SIP etc.)</li> <li>HTTP endpoints</li> </ul>"},{"location":"configuration/TLS-hardening/#fast-tls-hardening","title":"Fast TLS hardening","text":"<p>Fast TLS expects an OpenSSL cipher string as one of optional connection parameters. This string is configured individually for every module that uses it. By default, MongooseIM sets this option to <code>TLSv1.2:TLSv1.3</code> for each component.</p> <p>The list below enumerates all components that use Fast TLS and describes how to change this string.</p> <ul> <li><code>listen.c2s</code> - main user session abstraction + XMPP over TCP listener<ul> <li>Please consult the respective section in Listener modules.</li> </ul> </li> <li><code>listen.s2s</code> - incoming S2S connections (XMPP Federation)<ul> <li>Please consult the respective section in Listener modules.</li> </ul> </li> <li><code>s2s</code> - outgoing S2S connections (XMPP Federation)<ul> <li>Please check the documentation for <code>s2s_ciphers</code> option.</li> </ul> </li> <li><code>mod_global_distrib</code> - Global Distribution module<ul> <li>Please add <code>connections.tls.ciphers = \"string\"</code> to <code>modules.mod_global_distrib</code> module, as described in the documentation.</li> </ul> </li> </ul>"},{"location":"configuration/access/","title":"Options: Access","text":"<p>The <code>access</code> section is used to define access rules which return specific values for specific access classes.</p> <ul> <li>Syntax: each access rule is a key-value pair, where:<ul> <li>Key is the name of the rule,</li> <li>Value is a TOML array of rule clauses - TOML tables, whose format is described below.</li> </ul> </li> <li>Default: no default - each access rule needs to be specified explicitly.</li> <li>Example: see the examples below.</li> </ul>"},{"location":"configuration/access/#access-rule-clauses","title":"Access rule clauses","text":"<p>Whenever a rule is checked to obtain the resulting value for a user, the clauses are traversed one by one until a matching one is found or the list is exhausted (in which case the special value <code>deny</code> is returned).</p> <p>Each clause has to contain the following keys:</p>"},{"location":"configuration/access/#accessacl","title":"<code>access.*.acl</code>","text":"<ul> <li>Syntax: string</li> <li>Example: <code>acl = \"local\"</code></li> </ul> <p>The access class defined in the <code>acl</code> section. The user is matched against it. The special name <code>all</code> is a catch-all value that matches any user. If the class does not exist, the clause does not match (there is no error).</p>"},{"location":"configuration/access/#accessvalue","title":"<code>access.*.value</code>","text":"<ul> <li>Syntax: string or integer</li> <li>Example: <code>value = \"allow\"</code></li> </ul> <p>For rules determining access, the value will be <code>\"allow\"</code> or <code>\"deny\"</code>. For other rules it can be an integer or a string.</p>"},{"location":"configuration/access/#rule-examples","title":"Rule examples","text":"<p>The following access rules are already defined in the example configuration file.</p>"},{"location":"configuration/access/#c2s-access","title":"C2S Access","text":"<p>The <code>c2s</code> rule is used to allow/deny the users to establish C2S connections:</p> <pre><code>  c2s = [\n    {acl = \"blocked\", value = \"deny\"},\n    {acl = \"all\", value = \"allow\"}\n  ]\n</code></pre> <p>It has the following logic:</p> <ul> <li>if the access class is <code>blocked</code>, the returned value is <code>\"deny\"</code>,</li> <li>otherwise, the returned value is <code>\"allow\"</code>.</li> </ul> <p>The <code>blocked</code> access class can be defined in the <code>acl</code> section and match blacklisted users.</p> <p>For this rule to take effect, it needs to be referenced in the options of a C2S listener.</p>"},{"location":"configuration/access/#c2s-shaper","title":"C2S Shaper","text":"<p>The <code>c2s_shaper</code> rule is used to determine the shaper used to limit the incoming traffic on C2S connections:</p> <pre><code>  c2s_shaper = [\n    {acl = \"admin\", value = \"none\"},\n    {acl = \"all\", value = \"normal\"}\n  ]\n</code></pre> <p>It has the following logic:</p> <ul> <li>if the access class is <code>admin</code>, the returned value is <code>\"none\"</code>,</li> <li>otherwise, the returned value is <code>\"normal\"</code>.</li> </ul> <p>The <code>admin</code> access class can be defined in the <code>acl</code> to specify admin users who will bypass the <code>normal</code> shaper.</p> <p>For this rule to take effect, it needs to be referenced in the options of a C2S listener.</p>"},{"location":"configuration/access/#s2s-shaper","title":"S2S Shaper","text":"<p>The <code>s2s_shaper</code> rule is used to determine the shaper used to limit the incoming traffic on C2S connections:</p> <pre><code>  s2s_shaper = [\n    {acl = \"all\", value = \"fast\"}\n  ]\n</code></pre> <p>It assigns the <code>fast</code> shaper to all S2S connections.</p> <p>For this rule to take effect, it needs to be referenced in the options of an S2S listener.</p>"},{"location":"configuration/access/#muc","title":"MUC","text":"<p>The following rules manage the permissions of MUC operations:</p> <pre><code>  muc_admin = [\n    {acl = \"admin\", value = \"allow\"}\n  ]\n\n  muc_create = [\n    {acl = \"local\", value = \"allow\"}\n  ]\n\n  muc = [\n    {acl = \"all\", value = \"allow\"}\n  ]\n</code></pre> <p>They are referenced in the options of the <code>mod_muc</code> module.</p>"},{"location":"configuration/access/#registration","title":"Registration","text":"<p>This rule manages the permissions to create new users with <code>mod_register</code>.</p> <pre><code>  register = [\n    {acl = \"all\", value = \"allow\"}\n  ]\n</code></pre> <p>It needs to be referenced in the options of the <code>mod_register</code> module.</p>"},{"location":"configuration/access/#mam-permissions","title":"MAM permissions","text":"<p>These rules set the permissions for MAM operations triggered by IQ stanzas and handled by the <code>mod_mam</code> module.</p> <pre><code>  mam_set_prefs = [\n    {acl = \"all\", value = \"default\"}\n  ]\n\n  mam_get_prefs = [\n    {acl = \"all\", value = \"default\"}\n  ]\n\n  mam_lookup_messages = [\n    {acl = \"all\", value = \"default\"}\n  ]\n</code></pre> <p>They can return <code>\"allow\"</code>, <code>\"deny\"</code> or <code>\"default\"</code>. The last value uses the default setting for the operation, which is to allow the operation when the sender and recipient JID's are the same.</p> <p>MAM for MUC permissions has <code>muc_</code> prefix:</p> <pre><code>  muc_mam_set_prefs = [\n    {acl = \"all\", value = \"default\"}\n  ]\n\n  muc_mam_get_prefs = [\n    {acl = \"all\", value = \"default\"}\n  ]\n\n  muc_mam_lookup_messages = [\n    {acl = \"all\", value = \"default\"}\n  ]\n</code></pre>"},{"location":"configuration/access/#mam-shapers","title":"MAM shapers","text":"<p>These rules limit the rate of MAM operations triggered by IQ stanzas.</p> <pre><code>  mam_set_prefs_shaper = [\n    {acl = \"all\", value = \"mam_shaper\"}\n  ]\n\n  mam_get_prefs_shaper = [\n    {acl = \"all\", value = \"mam_shaper\"}\n  ]\n\n  mam_lookup_messages_shaper = [\n    {acl = \"all\", value = \"mam_shaper\"}\n  ]\n\n  mam_set_prefs_global_shaper = [\n    {acl = \"all\", value = \"mam_global_shaper\"}\n  ]\n\n  mam_get_prefs_global_shaper = [\n    {acl = \"all\", value = \"mam_global_shaper\"}\n  ]\n\n  mam_lookup_messages_global_shaper = [\n    {acl = \"all\", value = \"mam_global_shaper\"}\n  ]\n</code></pre> <p>For each operation there are two rules:</p> <ul> <li><code>*_shaper</code> - limits the number of operations per user connection per second,</li> <li><code>*_global_shaper</code> - limits the number of operations per server node per second.</li> </ul> <p>The values returned by the rules (<code>mam_shaper</code>, <code>mam_global_shaper</code>) are shaper names, which need to be defined in the <code>shaper</code> section.</p> <p>MAM for MUC shapers has <code>muc_</code> prefix.</p>"},{"location":"configuration/access/#maximum-number-of-sessions","title":"Maximum number of sessions","text":"<p>The <code>max_user_sessions</code> rule is used to determine the maximum number of sessions a user can open.</p> <pre><code>  max_user_sessions = [\n    {acl = \"all\", value = 10}\n  ]\n</code></pre> <p>By default, all users can open at most 10 concurrent sessions.</p>"},{"location":"configuration/access/#maximum-number-of-offline-messages","title":"Maximum number of offline messages","text":"<p>The <code>max_user_offline_messages</code> rule is used to determine the maximum number of messages that is stored for a user by the <code>mod_offline</code> module.</p> <pre><code>  max_user_offline_messages = [\n    {acl = \"admin\", value = 5000},\n    {acl = \"all\", value = 100}\n  ]\n</code></pre> <p>It has the following logic:</p> <ul> <li>if the access class is <code>admin</code>, the returned value is <code>5000</code>,</li> <li>otherwise, the returned value is <code>100</code>.</li> </ul> <p>This means that the admin users can have 5000 messages stored offline, while the others can have at most 100. The <code>admin</code> access class can be defined in the <code>acl</code> section.</p>"},{"location":"configuration/access/#for-developers","title":"For developers","text":"<p>To access the rule functionality, one has to use the <code>acl:match_rule/3</code> function.</p> <p>Given the following rule:</p> <pre><code>  register = [\n    {acl = \"all\", value = \"deny\"}\n  ]\n</code></pre> <p>One can call:</p> <p><code>acl:match_rule(&lt;&lt;\"localhost\"&gt;&gt;, register, jid:make(&lt;&lt;\"p\"&gt;&gt;, &lt;&lt;\"localhost\"&gt;&gt;, &lt;&lt;&gt;&gt;)).</code></p> <p>Which in our case will return <code>deny</code>. If the rule is not host specific, one can use <code>global</code> instead of <code>&lt;&lt;\"localhost\"&gt;&gt;</code>.</p>"},{"location":"configuration/acl/","title":"Options: Acl","text":"<p>The <code>acl</code> section is used to define access classes to which the connecting users are assigned. These classes are used in access rules.</p> <ul> <li>Syntax: each access class is a key-value pair, where:<ul> <li>Key is the name of the access class,</li> <li>Value is a TOML array of patterns - TOML tables, whose format is described below.</li> </ul> </li> <li>Default: no default - each access class needs to be specified explicitly.</li> <li>Example: the <code>local</code> access class is used for the regular users connecting to the C2S listener. The pattern <code>{}</code> matches all users from the current server, because it is equivalent to <code>{match = \"current_domain\"}</code> (see below).</li> </ul> <pre><code>  local = [{}]\n</code></pre> <p>When there are multiple patterns listed, the resulting pattern will be the union of all of them.</p>"},{"location":"configuration/acl/#patterns","title":"Patterns","text":"<p>Each pattern consists of one or more conditions, specified with the options listed below. All defined conditions need to be satisfied for the pattern to be matched successfully.</p>"},{"location":"configuration/acl/#aclmatch","title":"<code>acl.*.match</code>","text":"<ul> <li>Syntax: string, one of: <code>\"all\"</code>, <code>\"current_domain\"</code>, <code>\"any_hosted_domain\"</code>, <code>\"none\"</code></li> <li>Default: <code>\"current_domain\"</code></li> <li>Example: <code>match = \"all\"</code></li> </ul> <p>By default only users from the current domain (the one of the server) are matched. Setting it to <code>\"any_hosted_domain\"</code> results in matching users from all domains hosted by this server. You can also set this option to <code>\"all\"</code>, extending the pattern to users from external domains. This option makes a difference for some access rules, e.g. MAM, MUC and registration ones. Setting the option to <code>\"none\"</code> makes the pattern never match.</p> <pre><code>  everyone = [\n    {match = \"all\"}\n  ]\n</code></pre>"},{"location":"configuration/acl/#acluser","title":"<code>acl.*.user</code>","text":"<ul> <li>Syntax: string</li> <li>Example: <code>user = \"admin\"</code></li> </ul> <p>Matches all JIDs with the specified user name. The following class includes <code>alice@localhost</code>, but not <code>bob@localhost</code>:</p> <pre><code>  admin = [\n    {user = \"alice\"},\n    {user = \"charlie\"}\n  ]\n</code></pre>"},{"location":"configuration/acl/#aclserver","title":"<code>acl.*.server</code>","text":"<ul> <li>Syntax: string</li> <li>Example: <code>server = \"localhost\"</code></li> </ul> <p>Matches all JIDs with the specified domain name. The following class includes <code>alice@localhost</code>, but not <code>alice@xmpp.org</code>:</p> <pre><code>  localhost_users = [\n    {server = \"localhost\"}\n  ]\n</code></pre> <p>This option can be combined with <code>user</code> - only <code>alice@localhost</code> belongs to the following class:</p> <pre><code>  admin = [\n    {user = \"alice\", server = \"localhost\"}\n  ]\n</code></pre>"},{"location":"configuration/acl/#aclresource","title":"<code>acl.*.resource</code>","text":"<ul> <li>Syntax: string</li> <li>Example: <code>resource = \"mobile\"</code></li> </ul> <p>Matches all JIDs with the specified resource name. The following class includes <code>alice@localhost/mobile</code>, but not <code>alice@localhost/home</code>:</p> <p><pre><code>  mobile_users = [\n    {resource = \"mobile\"}\n  ]\n</code></pre> This option can be combined with <code>user</code> and <code>server</code> - only <code>alice@localhost/mobile</code> belongs to the following class:</p> <pre><code>  admin = [\n    {user = \"alice\", server = \"localhost\", resource = \"mobile\"}\n  ]\n</code></pre>"},{"location":"configuration/acl/#acluser_regexp","title":"<code>acl.*.user_regexp</code>","text":"<ul> <li>Syntax: string, regular expression</li> <li>Example: <code>user_regexp = \"^user.*\"</code></li> </ul> <p>Matches all JIDs with the user name matching the regular expression. The following class includes <code>alice@localhost</code> and <code>albert@jabber.org</code>, but not <code>bob@localhost</code>:</p> <pre><code>  ae = [\n    {user_regexp = \"^a.*e\"}\n  ]\n</code></pre> <p>This option can be combined with <code>server</code> - here <code>albert@jabber.org</code> is excluded:</p> <pre><code>  localhost_ae = [\n    {user_regexp = \"^a.*e\", server = \"localhost\"}\n  ]\n</code></pre>"},{"location":"configuration/acl/#aclserver_regexp","title":"<code>acl.*.server_regexp</code>","text":"<ul> <li>Syntax: string, regular expression</li> <li>Example: <code>server = \"localhost\"</code></li> </ul> <p>Matches all JIDs with the domain name matching the regular expression. The following class includes <code>alice@host1</code>, but not <code>alice@xmpp.org</code>:</p> <pre><code>  host_users = [\n    {server_regexp = \"host\"}\n  ]\n</code></pre> <p>This option can be combined with <code>user_regexp</code>, e.g. we can require the user name to contain 'a' and the domain name to start with 'a':</p> <pre><code>  a = [\n    {user_regexp = \"a\", server_regexp = \"^a\"}\n  ]\n</code></pre>"},{"location":"configuration/acl/#aclresource_regexp","title":"<code>acl.*.resource_regexp</code>","text":"<ul> <li>Syntax: string, regular expression</li> <li>Example: <code>resource_regexp = \"^res\"</code></li> </ul> <p>Matches all JIDs with the resource name matching the regular expression. This class includes <code>bob@xmpp.org/res123</code>, but not <code>bob@xmpp.org/home</code>:</p> <pre><code>  digital_resources = [\n    {resource_regexp = '^res\\d+$'}\n  ]\n</code></pre> <p>Note the use of a literal string (single quotes) to prevent <code>\\d</code> from being escaped.</p>"},{"location":"configuration/acl/#acluser_glob","title":"<code>acl.*.user_glob</code>","text":"<ul> <li>Syntax: string, glob pattern</li> <li>Example: <code>user_glob = \"^user.*\"</code></li> </ul> <p>Matches all JIDs with the user name matching the pattern: The following class includes <code>alice@localhost</code> and <code>albert@jabber.org</code>, but not <code>bob@localhost</code>:</p> <pre><code>  ae_users = [\n    {user_glob = \"a*e*\"}\n  ]\n</code></pre> <p>This option can be combined with <code>server</code> - here <code>albert@jabber.org</code> is excluded:</p> <pre><code>  localhost_ae_users = [\n    {user_glob = \"a*e*\", server = \"localhost\"}\n  ]\n</code></pre>"},{"location":"configuration/acl/#aclserver_glob","title":"<code>acl.*.server_glob</code>","text":"<ul> <li>Syntax: string, glob pattern</li> <li>Example: <code>server = \"localhost\"</code></li> </ul> <p>Matches all JIDs with the domain name matching the pattern. The following class includes <code>alice@host1</code>, but not <code>alice@xmpp.org</code>:</p> <pre><code>  localhost_users = [\n    {server_glob = \"host*\"}\n  ]\n</code></pre> <p>This option can be combined with <code>user_glob</code>, e.g. we can require the user name to contain 'a' and the domain name to start with 'a':</p> <pre><code>  a = [\n    {user_glob = \"*a*\", server_glob = \"a*\"}\n  ]\n</code></pre>"},{"location":"configuration/acl/#aclresource_glob","title":"<code>acl.*.resource_glob</code>","text":"<ul> <li>Syntax: string, glob pattern</li> <li>Example: <code>resource_glob = \"^res\"</code></li> </ul> <p>Matches all JIDs with the resource name matching the pattern. This class includes <code>bob@xmpp.org/res123</code>, but not <code>bob@xmpp.org/home</code>:</p> <pre><code>  limited_resources = [\n    {resource_glob = \"res???\"}\n  ]\n</code></pre>"},{"location":"configuration/auth/","title":"Options: Auth","text":"<p>The <code>auth</code> section is used to choose and configure the method which is used by MongooseIM to authenticate connecting users. The following methods are supported:</p> <ul> <li><code>internal</code> - stores the user accounts in an internal Mnesia database,</li> <li><code>rdbms</code> - stores the user accounts in a SQL database,</li> <li><code>external</code> - uses an external program to authenticate the user,</li> <li><code>anonymous</code> - allows anonymous connections,</li> <li><code>ldap</code> - checks the user credentials in LDAP,</li> <li><code>jwt</code> - authenticates the users with JSON Web Tokens,</li> <li><code>http</code> - uses an external HTTP service to authenticate the user,</li> <li><code>pki</code> - uses the certificate provided by the user to authenticate them,</li> <li><code>dummy</code> - no authentication, only for development and testing.</li> </ul> <p>To allow the users to connect, you need to choose the authentication method from the list above and enable it by adding a corresponding section. For example, the default configuration file has the <code>[auth.internal]</code> section, which enables the <code>internal</code> method, using the internal Mnesia database to store users and their passwords. However, for production systems other methods like <code>rdbms</code> are recommended, as using an external database offers easier maintenance, flexibility, scalability and configurability in a typical setup. Some methods have more complex setup procedures and have their own specific options - the method names above are links to their descriptions. There are some general authentication options as well, which are described below.</p> <p>Warning</p> <p>Make sure that the compatible SASL mechanisms are enabled, see capabilities.</p>"},{"location":"configuration/auth/#general-options","title":"General Options","text":"<p>The options listed here affect more than one configuration method.</p>"},{"location":"configuration/auth/#authmethods","title":"<code>auth.methods</code>","text":"<ul> <li>Syntax: array of strings. Allowed values: <code>\"internal\"</code>, <code>\"rdbms\"</code>, <code>\"external\"</code>, <code>\"anonymous\"</code>, <code>\"ldap\"</code>, <code>\"jwt\"</code>, <code>\"http\"</code>, <code>\"pki\"</code>, <code>\"dummy\"</code></li> <li>Default: not set</li> <li>Example: <code>methods = [\"internal\", \"anonymous\"]</code></li> </ul> <p>It is possible to enable more than one method - they are queried one by one in the alphabetical order until one of them succeeds or there are no more methods. You can change the default order by using this option. Make sure that all methods from the list have their corresponding sections included in the <code>auth</code> section, e.g.</p> <pre><code>[auth]\n  methods = [\"internal\", \"dummy\"]\n\n  [auth.internal]\n\n  [auth.dummy]\n    variance = 1000\n</code></pre>"},{"location":"configuration/auth/#authsasl_mechanisms","title":"<code>auth.sasl_mechanisms</code>","text":"<ul> <li>Syntax: array of strings. Allowed values: <code>\"scram_sha512_plus\"</code>, <code>\"scram_sha512\"</code>, <code>\"scram_sha384_plus\"</code>, <code>\"scram_sha384\"</code>, <code>\"scram_sha256_plus\"</code>, <code>\"scram_sha256\"</code>, <code>\"scram_sha224_plus\"</code>, <code>\"scram_sha224\"</code>, <code>\"scram_sha1_plus\"</code>, <code>\"scram_sha1\"</code>, <code>\"plain\"</code>, <code>\"anonymous\"</code>, <code>\"oauth\"</code>, <code>\"external\"</code>, <code>\"digest\"</code></li> <li>Default: <code>[\"scram_sha512_plus\", \"scram_sha512\", \"scram_sha384_plus\", \"scram_sha384\", \"scram_sha256_plus\", \"scram_sha256\", \"scram_sha224_plus\", \"scram_sha224\", \"scram_sha1_plus\", \"scram_sha1\", \"plain\", \"anonymous\", \"oauth\"]</code></li> <li>Example: <code>sasl_mechanisms = [\"external\", \"plain\"]</code></li> </ul> <p>Specifies the list of allowed SASL mechanisms, which are announced during stream negotiation and eventually enforced (users can't pick a mechanism not listed here).</p> <p>Notes</p> <ul> <li>This list is still filtered by capabilities. For example, if you use the <code>internal</code> method, only the <code>PLAIN</code>, <code>DIGEST-MD5</code> and <code>SCRAM-SHA-*</code> mechanisms from the list will be supported. If there are no compatible mechanisms on the list, the users will not be able to authenticate.</li> <li>Configuring the <code>sasl_mechanisms</code> replaces the default list entirely.</li> <li>The order in which the mechanisms are listed in the config will be taken as the order in which they are advertised.</li> <li>All <code>SCRAM-SHA-*</code> mechanisms (specified as <code>scram_sha*</code>) have their counterparts which support channel binding and are advertised as separate authentication mechanisms suffixed by <code>-PLUS</code> (specified as <code>scram_sha*_plus</code>).</li> <li>The <code>DIGEST-MD5</code> mechanism (specified as <code>digest</code>) is deprecated and will be removed in the next release.</li> </ul>"},{"location":"configuration/auth/#authentication-method-capabilities","title":"Authentication method capabilities","text":"<p>The table below shows the supported SASL mechanisms (columns) for each authentication method (row).</p> plain digest scram_sha* anonymous external internal x x x rdbms x x x external x anonymous x x x x ldap x x jwt x http x x x pki x dummy x"},{"location":"configuration/auth/#authsasl_external","title":"<code>auth.sasl_external</code>","text":"<ul> <li>Syntax: list of strings, allowed values: <code>\"standard\"</code>, <code>\"common_name\"</code>, <code>\"auth_id\"</code></li> <li>Default: <code>[\"standard\"]</code></li> <li>Example: <code>sasl_external = [\"standard\", \"common_name\"]</code></li> </ul> <p>There are three possible ways of using the <code>SASL EXTERNAL</code> mechanism:</p> <ul> <li><code>standard</code> - do not accept a certificate with no <code>xmpp_addrs</code> field (default),</li> <li><code>common_name</code> - use the <code>common_name</code> field if it is provided in the certificate,</li> <li><code>auth_id</code> - accept a certificate without <code>xmpp_addrs</code> and use the user identity from the authentication request.</li> </ul> <p>This option allows you to list the enabled ones in the order of preference (they are tried until one succeeds or the list is exhausted).</p>"},{"location":"configuration/auth/#authmax_users_per_domain","title":"<code>auth.max_users_per_domain</code>","text":"<ul> <li>Syntax: positive integer or string <code>\"infinity\"</code>, representing maximum amount of users that can be registered in a domain</li> <li>Default: <code>\"infinity\"</code></li> <li>Example: <code>max_users_per_domain = 10000</code></li> </ul> <p>Limits the number of users that can be registered for each domain. If the option is configured to the value <code>\"infinity\"</code>, no limit is present.</p> <p>Warning</p> <p>The limit only works for the following authentication methods: <code>internal</code>, <code>rdbms</code> and <code>ldap</code>.</p>"},{"location":"configuration/auth/#password-related-options","title":"Password-related options","text":"<p>These options are common to the <code>http</code>, <code>rdbms</code> and <code>internal</code> methods.</p>"},{"location":"configuration/auth/#authpasswordformat","title":"<code>auth.password.format</code>","text":"<ul> <li>Syntax: string, one of: <code>\"plain\"</code>, <code>\"scram\"</code></li> <li>Default: <code>\"scram\"</code></li> <li>Example: <code>password.format = \"plain\"</code></li> </ul> <p>Decide whether user passwords will be kept plain or hashed in the database. Currently, popular XMPP clients support the SCRAM method and it is strongly recommended to use the hashed version. The older XMPP clients can still use the <code>PLAIN</code> mechanism even if the format is set to <code>scram</code>.</p> <p>Note</p> <p>The <code>DIGEST-MD5</code> mechanism is not available with the <code>scram</code> password format.</p>"},{"location":"configuration/auth/#scram-options","title":"SCRAM options","text":"<p>For these options to take effect, <code>password.format</code> should be set to <code>scram</code>.</p>"},{"location":"configuration/auth/#authpasswordhash","title":"<code>auth.password.hash</code>","text":"<ul> <li>Syntax: list of strings, allowed values: <code>\"sha\"</code>, <code>\"sha224\"</code>, <code>\"sha256\"</code>, <code>\"sha384\"</code>, <code>\"sha512\"</code></li> <li>Default: not set - all hash functions supported</li> <li>Example: <code>password.hash = [\"sha384\", \"sha512\"]</code></li> </ul> <p>MongooseIM supports SHA-1, SHA-224, SHA-256, SHA-384 and SHA-512 for SCRAM hashing. You can use this option to limit the supported hash functions by listing them explicitly. The value <code>\"sha\"</code> stands for the SHA-1 algorithm.</p> <p>Warning</p> <p>This option limits the supported <code>SCRAM-SHA-*</code> SASL mechanisms to the ones compatible with the specified hash functions.</p>"},{"location":"configuration/auth/#authpasswordscram_iterations","title":"<code>auth.password.scram_iterations</code>","text":"<ul> <li>Syntax: positive integer</li> <li>Default: 10000, as recommended in this XEP and this NIST Guidelines</li> <li>Example: <code>password.scram_iterations = 20_000</code></li> </ul> <p>Hash function round count. This is a tradeoff between latency and security. The higher the value, the more difficult breaking the hashes is: increasing the count increases the work it requires to compute a full derivation, which effectively slows down brute-force attacks. But it adds load on both client and server, so this parameter should be tuned as high as the business-rules allow. Note that increasing the security of a password has a higher impact over the security of the algorithm, without impacting its load. See more information in this NIST guide, Appendix A.2.2</p>"},{"location":"configuration/auth/#examples","title":"Examples","text":"<p>Internal authentication method without any general options - you can skip the <code>auth</code> section in this case:</p> <pre><code>[auth.internal]\n</code></pre> <p>Internal authentication method with some general options:</p> <pre><code>[auth]\n  password.hash = [\"sha512\"]\n  password.scram_iterations = 20000\n\n  [auth.internal]\n</code></pre> <p>For more specific examples, see the links below.</p>"},{"location":"configuration/auth/#method-specific-options","title":"Method-specific options","text":"<p>See the links below for options related to the particular methods:</p> <ul> <li>RDBMS method options</li> <li>Anonymous method options</li> <li>External method options</li> <li>LDAP method options</li> <li>JWT method options</li> <li>HTTP method options</li> </ul>"},{"location":"configuration/configuration-files/","title":"Configuration Files","text":"<p>The following files are used to configure MongooseIM:</p> <ul> <li> <p><code>mongooseim.toml</code> for MongooseIM settings,</p> </li> <li> <p><code>vm.args</code> to affect the Erlang VM behaviour (performance tuning, node name),</p> </li> <li> <p><code>app.config</code> to change low-level logging parameters and settings of other Erlang applications.</p> </li> </ul>"},{"location":"configuration/configuration-files/#mongooseimtoml","title":"mongooseim.toml","text":"<p>This TOML file contains the configuration options for the MongooseIM server. It is located at <code>[MongooseIM repo root]/rel/files/</code> if you are building from source or <code>[MongooseIM install root]/etc/</code> if you are using a pre-built version.</p> <p>The file is divided into the following sections:</p> <ul> <li>general - Served XMPP domains, log level, server language and some other miscellaneous settings.</li> <li>listen - Configured listeners, receiving incoming XMPP and HTTP connections.</li> <li>auth - Supported client authentication methods and their options.</li> <li>internal_databases - Options for Mnesia and CETS. They are primarily used for clustering.</li> <li>outgoing_pools - Outgoing connections to external services, including databases, message queues and HTTP services.</li> <li>services - Internal services like an administration API and system metrics.</li> <li>modules - XMPP extension modules, which extend the basic functionality provided by XMPP.</li> <li>shaper - Traffic shapers that limit the incoming XMPP traffic, providing a safety valve to protect the server.</li> <li>acl - Access classes to which connecting users are assigned.</li> <li>access - Access rules, specifying the privileges of the defined access classes.</li> <li>s2s - Server-to-server connection options, used for XMPP federation.</li> <li>host_config - Configuration options for different XMPP domains or host types (groups of domains).</li> </ul> <p>The section names above are links to the detailed documentation of each section.</p> <p>Warning</p> <p>It is recommended to use the same configuration file for all nodes in the cluster, but there is no protection against using different option values for each node, because it can happen in two cases:</p> <ul> <li>During a rolling upgrade procedure, when nodes are restarted one by one with new configuration.</li> <li>When you need different network-specific parameters (e.g. listening IP addresses) for each node.</li> </ul>"},{"location":"configuration/configuration-files/#vmargs","title":"vm.args","text":"<p>This file contains parameters passed directly to the Erlang VM. To configure it, go to <code>[MongooseIM root]/rel/files/</code>.</p> <p>Let's explore the default options.</p>"},{"location":"configuration/configuration-files/#options","title":"Options","text":"<ul> <li><code>-sname</code> - Erlang node name. Can be changed to <code>name</code>, if necessary</li> <li><code>-setcookie</code> - Erlang cookie. All nodes in a cluster must use the same cookie value.</li> <li><code>+K</code> - Enables kernel polling. It improves the stability when a large number of sockets is opened, but some systems might benefit from disabling it. Might be a subject of individual load testing.</li> <li><code>+A 5</code> - Sets the asynchronous threads number. Async threads improve I/O operations efficiency by relieving scheduler threads of IO waits.</li> <li><code>+P 10000000</code> - Process count limit. This is a maximum allowed number of processes running per node. In general, it should exceed the tripled estimated online user count.</li> <li><code>-env ERL_MAX_PORTS 250000</code> - Open port count. This is a maximum allowed number of ports opened per node. In general, it should exceed the tripled estimated online user count. Keep in mind that increasing this number also increases the memory usage by a constant amount, so finding the right balance for it is important for every project.</li> <li><code>-env ERL_FULLSWEEP_AFTER 2</code> - affects garbage collection. Reduces memory consumption (forces often full g.c.) at the expense of CPU usage.</li> <li><code>-sasl sasl_error_logger false</code> - MongooseIM's solution for logging is Lager, so SASL error logger is disabled.</li> </ul>"},{"location":"configuration/configuration-files/#appconfig","title":"app.config","text":"<p>A file with Erlang application configuration. To configure it, go to <code>[MongooseIM root]/rel/files/</code>. By default only the following applications can be found there:</p> <ul> <li><code>logger</code> - check Logger's documentation for more information.</li> <li><code>ssl</code><ul> <li><code>session_lifetime</code> (default specified in the file: <code>600</code> seconds) - This parameter says for how long should the ssl session remain in the cache for further re-use, should <code>ssl session resumption</code> happen.</li> </ul> </li> </ul>"},{"location":"configuration/configuration-files/#configuring-tls-certificates-keys","title":"Configuring TLS: Certificates &amp; Keys","text":"<p>TLS is configured in one of two ways: some modules need a private key and certificate (chain) in separate files, while others need both in a single file. This is because recent additions use OTP's <code>ssl</code> library, while older modules use <code>p1_tls</code>, respectively.</p> <ul> <li>Client-to-server connections need both in the same <code>.pem</code> file</li> <li>Server-to-server connections need both in the same <code>.pem</code> file</li> <li>BOSH, WebSockets and REST APIs need them in separate files</li> </ul> <p>In order to create private key &amp; certificate bundle, you may simply concatenate them.</p> <p>More information about configuring TLS for these endpoints is available in the listen section configuration page.</p>"},{"location":"configuration/database-backends-configuration/","title":"Database Backends","text":"<p>MongooseIM can work with several databases, both RDBMS (SQL) and NoSQL ones. Some of them require extra work before they can be used. For example the SQL databases require defining a schema. MongooseIM is tested with CI, so the CI scripts can be used as a reference.</p>"},{"location":"configuration/database-backends-configuration/#a-brief-overview","title":"A Brief Overview","text":"<p>Data in MongooseIM is either transient or persistent:</p> <ul> <li>transient: volatile data changing often, such as session data, stream management data, and other in-memory data.  These don't need any backup, since after a potential failure, they will naturally rebuild as clients reconnect.</li> <li>persistent: long-lived data, such as roster items, credentials, and chat archives.  These absolutely need regular and tested backups.</li> </ul>"},{"location":"configuration/database-backends-configuration/#choosing-a-database-for-mongooseim","title":"Choosing a database for MongooseIM","text":"<p>Here is some general advice on the use of databases. Subsequent sections go into more depth on each database: what they are suitable for and how to set them up.</p> <p>Transient data:</p> <ul> <li> <p>CETS - a library to synchronise ETS tables between nodes.   A new choice to share live data across the MongooseIM cluster.   We recommend to use this backend for transient data.   This backend requires an RDBMS database configured because we use an external database to discover nodes in the cluster.   For a CETS config example, see tutorials.</p> </li> <li> <p>Mnesia - a built-in Erlang Database.   Mnesia is fine for a cluster of fixed size with reliable networking between nodes and with nodes rarely restarted.   There are some issues when nodes are restarting or new ones joining the cluster. For this case, we recommend to use CETS instead.   Mnesia is still the default backend for some modules for compatibility reasons with older config files.</p> </li> <li> <p>Redis - A fantastic choice for storing live data.  It's highly scalable and it can be easily shared by multiple MongooseIM nodes.  Additionally, Redis' great performance makes it an excellent choice for storing <code>user session</code> data.  We recommend caution, since it has not yet been widely tested in production.</p> </li> </ul> <p>Persistent Data:</p> <ul> <li> <p>RDBMS - MongooseIM has a strong backend support for relational databases.  Reliable and battle proven, they are a great choice for regular MongooseIM use cases and features like <code>privacy lists</code>, <code>vcards</code>, <code>roster</code>, <code>private storage</code>, <code>last activity</code> and <code>message archive</code>.  Never loose your data.  Use MySQL, MariaDB, PostgreSQL, or MS SQL Server.</p> </li> <li> <p>Cassandra - Only for MAM (Message Archive Management).</p> </li> <li> <p>ElasticSearch - Only for MAM (Message Archive Management).</p> </li> <li> <p>Mnesia - some backends support Mnesia to store data, but it is not recommended.   It is still the default option, when not specifying a backend for many modules, so be careful.</p> <p>Warning</p> <p>We strongly recommend keeping persistent data in an external DB (RDBMS) for production. Mnesia is not suitable for the volumes of persistent data which some modules may require. Sooner or later a migration will be needed which may be painful. It is possible to store all data in Mnesia, but only for testing purposes, not for any serious deployments.</p> </li> </ul> <p>User Data:</p> <ul> <li>LDAP -  Used for: users, shared rosters, vCards</li> </ul>"},{"location":"configuration/database-backends-configuration/#rdbms","title":"RDBMS","text":""},{"location":"configuration/database-backends-configuration/#mysql","title":"MySQL","text":"<p>Can be used for:</p> <ul> <li>users (credentials)</li> <li>vcards</li> <li>roster</li> <li>private storage</li> <li>privacy/block lists</li> <li>last activity</li> <li>mam (message archive management)</li> <li>muc_light rooms</li> </ul> <p>Setup</p> <p>The schema files can be found in the <code>priv</code> directory. The default schema is defined in the <code>mysql.sql</code> file.</p> <p>You can use the following command to apply it on localhost:</p> <pre><code>mysql -h localhost -u user -p -e 'create database mongooseim'\nmysql -h localhost -u user -p mongooseim &lt; mysql.sql\n</code></pre> <p>You should also configure the MySQL database in the <code>mongooseim.toml</code> file. Please refer to the RDBMS options for more information.</p> <p>Version notice</p> <p>The required minimum version of MySQL is <code>8.0</code> because MongooseIM uses the JSON data type and the <code>INSERT INTO ... AS ...</code> query syntax.</p>"},{"location":"configuration/database-backends-configuration/#postgresql","title":"PostgreSQL","text":"<p>Can be used for:</p> <ul> <li>users (credentials)</li> <li>vcards</li> <li>roster</li> <li>private storage</li> <li>privacy/block lists</li> <li>last activity</li> <li>mam (message archive management)</li> <li>muc_light rooms</li> </ul> <p>Setup</p> <p>The schema files can be found in the <code>priv</code> directory. The default schema is defined in the <code>pg.sql</code> file.</p> <p>You can use the following command to apply it on localhost:</p> <p><pre><code>psql -h localhost -U user -c \"CREATE DATABASE mongooseim;\"\npsql -h localhost -U user -q -d mongooseim -f pg.sql\n</code></pre> You should also configure the Postgres database in the <code>mongooseim.toml</code> file. Please refer to the RDBMS options and general database options for more information.</p>"},{"location":"configuration/database-backends-configuration/#microsoft-sql-server","title":"Microsoft SQL Server","text":"<p>Microsoft SQL Server, sometimes called MSSQL, or Azure SQL Database.</p> <p>Warning</p> <p>MongooseIM can only connect to MSSQL on Ubuntu Xenial x64.</p> <p>This can be used for:</p> <ul> <li>users (credentials)</li> <li>vcards</li> <li>roster</li> <li>private storage</li> <li>privacy/block lists</li> <li>last activity</li> <li>mam (message archive management)</li> <li>muc_light rooms</li> </ul> <p>Setup</p> <p>MSSQL can be used from MongooseIM through the ODBC layer with FreeTDS driver, so you need them installed on your system.</p> <pre><code># Ubuntu\n$ sudo apt install freetds-dev tdsodbc\n\n# CentOS\n$ sudo yum install freetds\n\n# macOS\n$ brew install freetds\n</code></pre> <p>Then you need to configure the connection. Add your database (<code>mongooseim</code> here) to the <code>/etc/odbc.ini</code> or <code>$HOME/.odbc.ini</code> file:</p> <pre><code>[mongoose-mssql]\n; Ubuntu\nDriver      = /usr/lib/x86_64-linux-gnu/odbc/libtdsodbc.so\nSetup       = /usr/lib/x86_64-linux-gnu/odbc/libtdsS.so\n; CentOS\n; Driver      = /usr/lib64/libtdsodbc.so.0\n; Setup       = /usr/lib64/libtdsS.so\n; macOS\n; Driver      = /usr/local/Cellar/freetds/[current version]/lib/libtdsodbc.so\nServer      = 127.0.0.1\nPort        = 1433\nDatabase    = mongooseim\nCharset     = UTF-8\nTDS_Version = 7.2\nclient_charset = UTF-8\n</code></pre> <p>Please amend the paths above to match your current OS if necessary.</p> <p>For more details, please refer to the freetds.conf documentation and unixodbc documentation.</p> <p>MongooseIM is built with ODBC support by default.</p> <p>Deadlocks notice</p> <p>If muc_light's backend is set to ODBC and there are many rooms created in parallel in your system, there may be some deadlocks due to the <code>READ_COMMITTED_SNAPSHOT</code> set to <code>OFF</code> by default. In this case we recommend setting this database property to <code>ON</code>, this will enable row level locking which significantly reduces deadlock chances around muc_light operations.</p> <p>This property can be set by the following <code>ALTER DATABASE</code> query:</p> <pre><code>ALTER DATABASE $name_of_your_db SET READ_COMMITTED_SNAPSHOT ON\n</code></pre> <p>The command above may take some time.</p> <p>Then you need to import the SQL schema from  <code>mssql2012.sql</code>. You can use a Microsoft's GUI tool (the provided .sql files should work with it) or isql, but after a slight modification of the dump file:</p> <pre><code>cat mssql2012.sql | tr -d '\\r' | tr '\\n' ' ' | sed 's/GO/\\n/g' |\nisql mongoose-mssql username password -b\n</code></pre> <p>The final step is to configure <code>mongooseim.toml</code> appropriately. Set the following option in the <code>general</code> section:</p> <pre><code>[general]\n  rdbms_server_type = \"mssql\"\n</code></pre> <p>Configure the <code>outgoing_pools.rdbms</code> section as follows:</p> <pre><code>[outgoing_pools.rdbms.default]\n  workers = 5\n\n  [outgoing_pools.rdbms.default.connection]\n    driver = \"odbc\"\n    settings = \"DSN=mongoose-mssql;UID=username;PWD=password\"\n</code></pre>"},{"location":"configuration/database-backends-configuration/#nosql","title":"NoSQL","text":""},{"location":"configuration/database-backends-configuration/#cassandra","title":"Cassandra","text":"<p>Setup</p> <p>This will prepare Cassandra for connection from MongooseIM. Make sure Cassandra is running, open a new terminal window and enter the following commands: <pre><code>$ cqlsh\n$ cqlsh&gt; source '$REPO/priv/casssandra.cql';\n</code></pre></p>"},{"location":"configuration/database-backends-configuration/#elasticsearch","title":"ElasticSearch","text":"<p>Can be used for:</p> <ul> <li>MAM (Message Archive Management)</li> </ul> <p>Setup</p> <p>Please note that MongooseIM has been tested to work properly with ElasticSearch version 5.6.9.</p> <p>In order to use ElasticSearch as a MAM backend, you'll need to create required indexes and mappings. From the root of MongooseIM's repository run:</p> <pre><code>curl -X PUT $ELASTICSEARCH_URL/messages -d '@priv/elasticsearch/pm.json'\ncurl -X PUT $ELASTICSEARCH_URL/muc_messages -d '@priv/elasticsearch/muc.json'\n</code></pre> <p>where <code>$ELASTICSEARCH_URL</code> is a URL pointing to your ElasticSearch node's HTTP API endpoint.</p> <p>Please refer to the advanced configuration page to check how to configure MongooseIM to connect to ElasticSearch node.</p>"},{"location":"configuration/database-backends-configuration/#redis","title":"Redis","text":"<p>Can be used for:</p> <ul> <li>users sessions</li> </ul> <p>Setup</p> <p>Please refer to the Redis options for more information.</p>"},{"location":"configuration/database-backends-configuration/#ldap","title":"LDAP","text":"<p>Can be used for:</p> <ul> <li>users (credentials)</li> <li>shared roster</li> <li>vcard</li> </ul> <p>Setup</p> <p>Please refer to the LDAP options for more information.</p>"},{"location":"configuration/general/","title":"Options: General","text":"<p>The <code>general</code> section contains basic settings as well as some miscellaneous options. You can start with providing only the basic options, for example configuring the loglevel, a single host (XMPP domain) as the default, and setting the server language:</p> <pre><code>[general]\n  loglevel = \"warning\"\n  hosts = [\"my-xmpp-domain.com\"]\n  default_server_domain = \"my-xmpp-domain.com\"\n  language = \"en\"\n</code></pre> <p>All options are described below.</p>"},{"location":"configuration/general/#general-options","title":"General options","text":"<p>These are the basic settings that you should configure before running your MongooseIM server.</p>"},{"location":"configuration/general/#generalloglevel","title":"<code>general.loglevel</code>","text":"<ul> <li>Syntax: string, one of <code>\"none\"</code>, <code>\"emergency\"</code>, <code>\"alert\"</code>, <code>\"critical\"</code>, <code>\"error\"</code>, <code>\"warning\"</code>, <code>\"notice\"</code>, <code>\"info\"</code>, <code>\"debug\"</code>, <code>\"all\"</code>.</li> <li>Default: <code>\"warning\"</code></li> <li>Example: <code>loglevel = \"error\"</code></li> </ul> <p>Verbosity level of the logger. Values recommended for production systems are <code>\"error\"</code> and <code>\"warning\"</code>. The <code>\"debug\"</code> level is good for development.</p>"},{"location":"configuration/general/#generalhosts","title":"<code>general.hosts</code>","text":"<ul> <li>Syntax: array of strings representing the domain names.</li> <li>Default: none. If omitted, at least one host type has to be defined in <code>general.host_types</code>.</li> <li>Example: <code>hosts = [\"localhost\", \"domain2\"]</code></li> </ul> <p>This option specifies the statically defined XMPP domains served by this cluster. In order to configure these hosts independently, use the <code>host_config</code> section.</p> <p>Note</p> <p>At least one of <code>general.hosts</code> or <code>general.host_types</code> have to be provided.</p> <p>Warning</p> <p>Extension modules and database backends will be started separately for every domain from this list. When increasing the number of domains, please make sure you have enough resources available (e.g. connection limit set in the DBMS).</p>"},{"location":"configuration/general/#generalhost_types","title":"<code>general.host_types</code>","text":"<ul> <li>Syntax: array of strings the names for host types.</li> <li>Default: none. If omitted, at least one hast has to be defined in <code>general.hosts</code>.</li> <li>Example: <code>host_types = [\"first type\", \"second type\"]</code></li> </ul> <p>This is the list of names for the types of hosts that will serve dynamic XMPP domains. Each host type can be seen as a label for a group of independent domains that use the same server configuration. In order to configure these host types independently, use the <code>host_config</code> section. The domains can be added or removed dynamically with the command line interface or using the API.</p> <p>If you use the host type mechanism, make sure you only configure modules which support dynamic domains in the <code>modules</code> or <code>host_config.modules</code> sections. MongooseIM will not start otherwise. Most of the modules are compatible with host types, but please read the particular extension module's page, or the incompatible modules list to see which do not. Moreover, <code>s2s</code> as well as XMPP components (XEP-0114), as configured in the <code>listen.service</code> section, do not support dynamic domains.</p> <p>Note</p> <p>At least one of <code>general.hosts</code> or <code>general.host_types</code> have to be provided.</p> <p>Warning</p> <p>Extension modules and database backends will be started separately for every host type from this list. When increasing the number of host types, please make sure you have enough resources available (e.g. connection limit set in the DBMS).</p>"},{"location":"configuration/general/#generaldefault_server_domain","title":"<code>general.default_server_domain</code>","text":"<ul> <li>Syntax: a string</li> <li>Default: none, this option is mandatory.</li> <li>Example: <code>default_server_domain = \"my-xmpp-domain.com\"</code></li> </ul> <p>This domain is used as a default when one cannot be determined, for example when sending XMPP stream errors to unauthenticated clients.</p>"},{"location":"configuration/general/#generallanguage","title":"<code>general.language</code>","text":"<ul> <li>Syntax: string representing the two-letter language code.</li> <li>Default: <code>\"en\"</code></li> <li>Example: <code>language = \"pl\"</code></li> </ul> <p>Default language for messages sent by the server to users. You can get a full list of supported codes by executing <code>cd [MongooseIM root] ; ls priv/*.msg | awk '{split($0,a,\"/\"); split(a[4],b,\".\"); print b[1]}'</code> (<code>en</code> is not listed there)</p>"},{"location":"configuration/general/#database-settings","title":"Database settings","text":"<p>RDBMS connection pools are set using outgoing connections configuration. There are some additional options that influence all database connections in the server:</p>"},{"location":"configuration/general/#generalrdbms_server_type","title":"<code>general.rdbms_server_type</code>","text":"<ul> <li>Syntax: string, <code>\"mssql\"</code> or <code>\"pgsql\"</code></li> <li>Default: not set</li> <li>Example: <code>rdbms_server_type = \"mssql\"</code></li> </ul> <p>When using MSSQL or PostgreSQL databases, this option allows MongooseIM to optimize some queries for these DBs (e.g. <code>mod_mam_rdbms_user</code> uses different queries for <code>mssql</code>).</p>"},{"location":"configuration/general/#access-management","title":"Access management","text":"<p>User access rules are configured mainly in the <code>acl</code> and <code>access</code> sections.</p>"},{"location":"configuration/general/#security","title":"Security","text":"<p>Here you can find some additional options related to system security.</p>"},{"location":"configuration/general/#generalregistration_timeout","title":"<code>general.registration_timeout</code>","text":"<ul> <li>Syntax: the string <code>\"infinity\"</code> or a number of seconds (positive integer)</li> <li>Default: <code>600</code></li> <li>Example: <code>registration_timeout = \"infinity\"</code></li> </ul> <p>Limits the registration frequency from a single IP address. The special value <code>infinity</code> means no limit.</p>"},{"location":"configuration/general/#generalhide_service_name","title":"<code>general.hide_service_name</code>","text":"<ul> <li>Syntax: boolean</li> <li>Default: <code>false</code></li> <li>Example: <code>hide_service_name = true</code></li> </ul> <p>According to RFC 6210, even when a client sends invalid data after opening a connection, the server must open an XML stream and return a stream error anyway. For extra security, this option may be enabled. It changes MIM behaviour to simply close the connection without any errors returned (effectively hiding the server's identity).</p>"},{"location":"configuration/general/#user-session-management","title":"User session management","text":"<p>These options can be used to configure the way MongooseIM manages user sessions.</p>"},{"location":"configuration/general/#generalsm_backend","title":"<code>general.sm_backend</code>","text":"<ul> <li>Syntax: string: <code>\"mnesia\"</code>, <code>\"cets\"</code> or <code>\"redis\"</code></li> <li>Default: <code>\"mnesia\"</code></li> <li>Example: <code>sm_backend = \"redis\"</code></li> </ul> <p>Backend for storing user session data. All nodes in a cluster must have access to a complete session database. CETS is a new backend, requires RDBMS configured to work properly. Mnesia is a legacy backend, sufficient in most cases, use Redis only in large deployments when you notice issues with the mnesia backend. Requires a redis pool with the <code>default</code> tag defined in the <code>outgoing_pools</code> section. See the section about redis connection setup for more information.</p> <p>Warning</p> <p>When set to <code>mnesia</code> or <code>cets</code>, the corresponding internal database has to be enabled.</p>"},{"location":"configuration/general/#generalreplaced_wait_timeout","title":"<code>general.replaced_wait_timeout</code>","text":"<ul> <li>Syntax: positive integer, representing time in milliseconds</li> <li>Default: <code>2000</code></li> <li>Example: <code>replaced_wait_timeout = 5000</code></li> </ul> <p>When a user's session is replaced (due to a full JID conflict) by a new one, this parameter specifies the time MongooseIM waits for the old sessions to close. The default value is sufficient in most cases. If you observe <code>replaced_wait_timeout</code> warning in logs, then most probably the old sessions are frozen for some reason and it should be investigated.</p>"},{"location":"configuration/general/#xmpp-federation-s2s","title":"XMPP federation (S2S)","text":""},{"location":"configuration/general/#generals2s_backend","title":"<code>general.s2s_backend</code>","text":"<ul> <li>Syntax: string: <code>\"mnesia\"</code> or <code>\"cets\"</code></li> <li>Default: <code>\"mnesia\"</code></li> <li>Example: <code>s2s_backend = \"cets\"</code></li> </ul> <p>Backend for replicating the list of outgoing Server to Server (S2S) connections across the nodes of the local MongooseIM cluster.</p> <p>Warning</p> <p>The corresponding internal database has to be enabled.</p>"},{"location":"configuration/general/#external-xmpp-components","title":"External XMPP components","text":""},{"location":"configuration/general/#generalcomponent_backend","title":"<code>general.component_backend</code>","text":"<ul> <li>Syntax: string: <code>\"mnesia\"</code> or <code>\"cets\"</code></li> <li>Default: <code>\"mnesia\"</code></li> <li>Example: <code>component_backend = \"cets\"</code></li> </ul> <p>Backend for replicating the list of connected external components across the nodes of the local MongooseIM cluster.</p> <p>Warning</p> <p>The corresponding internal database has to be enabled.</p>"},{"location":"configuration/general/#message-routing","title":"Message routing","text":"<p>The following options influence the way MongooseIM routes incoming messages to their recipients.</p>"},{"location":"configuration/general/#generalroute_subdomains","title":"<code>general.route_subdomains</code>","text":"<ul> <li>Syntax: string, the only accepted value is <code>\"s2s\"</code></li> <li>Default: not set</li> <li>Example: <code>route_subdomains = \"s2s\"</code></li> </ul> <p>If a stanza is addressed to a subdomain of the served domain and this option is set to <code>s2s</code>, such a stanza will be transmitted over a server-to-server connection. Without it, MongooseIM will try to route the stanza to one of its internal services.</p>"},{"location":"configuration/general/#generalrouting_modules","title":"<code>general.routing_modules</code>","text":"<ul> <li>Syntax: a list of strings representing the routing module names.</li> <li>Default: <code>[\"mongoose_router_global\", \"mongoose_router_localdomain\", \"mongoose_router_external_localnode\", \"mongoose_router_external\", \"mongoose_router_dynamic_domains\", \"ejabberd_s2s\"]</code></li> <li>Example: <code>routing_modules = [\"mongoose_router_global\", \"mongoose_router_localdomain\"]</code></li> </ul> <p>Provides an ordered list of modules used for routing messages. All available modules are enabled by default, and you can change their order or disable some of them by providing your own list. See the Message routing section of the developer's guide for more information.</p>"},{"location":"configuration/general/#miscellaneous","title":"Miscellaneous","text":"<p>The options listed below are used to configure more specific settings, that do not need to be changed in usual use cases.</p>"},{"location":"configuration/general/#generalall_metrics_are_global","title":"<code>general.all_metrics_are_global</code>","text":"<ul> <li>Syntax: boolean</li> <li>Default: <code>false</code></li> <li>Example: <code>all_metrics_are_global = true</code></li> </ul> <p>When enabled, all per-host metrics are merged into global equivalents. It means it is no longer possible to view individual host1, host2, host3, ... metrics, only sums are available. This option significantly reduces CPU and (especially) memory footprint in setups with exceptionally many domains (thousands, tens of thousands).</p>"},{"location":"configuration/general/#generalhttp_server_name","title":"<code>general.http_server_name</code>","text":"<ul> <li>Syntax: string</li> <li>Default: <code>\"Cowboy\"</code></li> <li>Example: <code>http_server_name = \"Apache\"</code></li> </ul> <p>Replaces Cowboy's default name returned in the <code>server</code> HTTP response header. It may be used for extra security, as it makes it harder for the malicious user to learn what HTTP software is running under a specific port. This option applies to all configured HTTP listeners.</p>"},{"location":"configuration/general/#generalmax_fsm_queue","title":"<code>general.max_fsm_queue</code>","text":"<ul> <li>Syntax: positive integer</li> <li>Default: not set</li> <li>Example: <code>max_fsm_queue = 5000</code></li> </ul> <p>When specified, will terminate certain processes (e.g. client handlers) that have more messages accumulated in the queue than the specified limit, to prevent resource exhaustion. This option is set for C2S, outgoing S2S and component connections and can be overridden for particular <code>s2s</code> or <code>service</code> listeners in their configurations. Use with caution!</p>"},{"location":"configuration/general/#generaldomain_certfile","title":"<code>general.domain_certfile</code>","text":"<ul> <li>Syntax: array of TOML tables with the following mandatory content:<ul> <li><code>domain</code> - string, XMPP domain name. In case of dynamic domains it should be a host type instead.</li> <li><code>certfile</code> - string, path in the file system</li> </ul> </li> <li>Default: not set</li> <li>Example:</li> </ul> <pre><code>  domain_certfile = [\n    {domain = \"localhost1.com\", certfile = \"cert1.pem\"},\n    {domain = \"localhost2.com\", certfile = \"cert2.pem\"}\n  ]\n</code></pre> <p>This option overrides the configured certificate file for specific local XMPP domains.</p> <p>Notes</p> <ul> <li>This option applies to S2S and C2S connections.</li> <li>Each domain (or host type) needs to be included in the list of <code>hosts</code> or <code>host types</code>.</li> </ul>"},{"location":"configuration/host_config/","title":"Options: Host config","text":"<p>The <code>host_config</code> section is used to configure options for specific XMPP domains or for host types, which are used to group multiple domains. For each domain or host type requiring such options, a <code>host_config</code> section needs to be created with the following format:</p> <ul> <li>Syntax: domain subsection starts with <code>[[host_config]]</code> and contains the options listed below.</li> <li>Default: none - all domain-level options need to be specified explicitly.</li> <li>Example: see the examples for each section below.</li> </ul> <p>Note</p> <p>Each hosted domain needs to be included in the list of <code>hosts</code> in the <code>general</code> section. Similarly, each host type needs to be included in <code>general.host_types</code>.</p>"},{"location":"configuration/host_config/#general-options","title":"General options","text":""},{"location":"configuration/host_config/#host_confighost","title":"<code>host_config.host</code>","text":"<ul> <li>Syntax: string, domain name</li> <li>Default: no default, either this option or <code>host_config.host_type</code> is mandatory</li> <li>Example: <code>host = \"my-xmpp-server.com\"</code></li> </ul> <p>This option specifies the XMPP domain that this section refers to.</p>"},{"location":"configuration/host_config/#host_confighost_type","title":"<code>host_config.host_type</code>","text":"<ul> <li>Syntax: string, host type name</li> <li>Default: no default, either this option or <code>host_config.host</code> is mandatory</li> <li>Example: <code>host_type = \"first type\"</code></li> </ul> <p>This option specifies the host type that this section refers to.</p>"},{"location":"configuration/host_config/#configuration-sections","title":"Configuration sections","text":"<p>The following sections are accepted in <code>host_config</code>:</p>"},{"location":"configuration/host_config/#host_configgeneral","title":"<code>host_config.general</code>","text":"<p>The options defined here override the ones defined in the top-level <code>general</code> section. The following options are allowed:</p> <ul> <li><code>route_subdomains</code></li> <li><code>replaced_wait_timeout</code></li> </ul>"},{"location":"configuration/host_config/#example","title":"Example","text":"<p>The <code>replaced_wait_timeout</code> option is set to <code>2000</code> only for <code>domain2.com</code>.</p> <pre><code>[general]\n  hosts = [\"domain1.com\", \"domain2.com\", \"domain3.com\"]\n  loglevel = \"info\"\n  replaced_wait_timeout = 1000\n\n[[host_config]]\n  host = \"domain2.com\"\n\n  [host_config.general]\n    replaced_wait_timeout = 2000\n</code></pre>"},{"location":"configuration/host_config/#host_configauth","title":"<code>host_config.auth</code>","text":"<p>This section completely overrides the top-level <code>auth</code> section, all options are allowed.</p>"},{"location":"configuration/host_config/#example_1","title":"Example","text":"<p>In the example below the number of <code>scram_iterations</code> is increased for <code>domain2</code>. It is necessary to put <code>methods</code> and <code>password.hash</code> and there as well, as otherwise they would not be set for <code>domain2</code>.</p> <pre><code>[general]\n  hosts = [\"domain1.com\", \"domain2.com\", \"domain3.com\"]\n\n[auth]\n  methods = [\"rdbms\"]\n  password.hash = [\"sha256\"]\n\n[[host_config]]\n  host = \"domain2.com\"\n\n  [host_config.auth]\n    methods = [\"rdbms\"]\n    password.hash = [\"sha256\"]\n    scram_iterations = 40_000\n</code></pre>"},{"location":"configuration/host_config/#host_configmodules","title":"<code>host_config.modules</code>","text":"<p>This section completely overrides the top-level <code>modules</code> section. Remember that only the modules supporting dynamic domains are allowed if you are specifying options for a host type. The ones that do not support it can be found in the modules list.</p>"},{"location":"configuration/host_config/#example_2","title":"Example","text":"<p>The modules enabled for <code>domain2.com</code> will be <code>mod_disco</code> and <code>mod_stream_management</code>. If we wanted to enable <code>mod_roster</code>, it would need to be repeated in <code>host_config</code>.</p> <pre><code>[general]\n  hosts = [\"domain1.com\", \"domain2.com\", \"domain3.com\"]\n\n[modules.mod_disco]\n  users_can_see_hidden_services = false\n\n[modules.mod_roster]\n  backend = \"rdbms\"\n\n[[host_config]]\n  host = \"domain2.com\"\n\n  [host_config.modules.mod_disco]\n    users_can_see_hidden_services = false\n\n  [host_config.modules.mod_stream_management]\n</code></pre>"},{"location":"configuration/host_config/#host_configoutgoing_pools","title":"<code>host_config.outgoing_pools</code>","text":"<p>This section overrides any pool with the same type and tag that was defined in the top-level <code>outgoing_pools</code> section. If we wanted to enable a <code>default</code> <code>rdbms</code> pool only for <code>\"host-type-basic\"</code> for example, we could do so as follows:</p> <pre><code>[general]\n  host_type = [\"host-type-basic\", \"host-type-advanced\", \"host-type-privacy\"]\n\n[[host_config]]\n  host = \"host-type-basic\"\n\n  [outgoing_pools.rdbms.default]\n    workers = 5\n    [outgoing_pools.rdbms.default.connection]\n    ...\n</code></pre> <p>Configuration for such pools is all the same, except that the <code>scope</code> key is here disallowed.</p>"},{"location":"configuration/host_config/#host_configacl","title":"<code>host_config.acl</code>","text":"<p>The access classes defined here are merged with the ones defined in the top-level <code>acl</code> section - when a class is defined in both places, the result is a union of both classes.</p>"},{"location":"configuration/host_config/#example_3","title":"Example","text":"<p>The <code>blocked</code> access class is extended for <code>host_config</code> by adding <code>hacker2</code>.</p> <pre><code>[general]\n  hosts = [\"domain1.com\", \"domain2.com\", \"domain3.com\"]\n\n[acl]\n  blocked = [\n    {user = \"spammer\"},\n    {user = \"hacker1\"}\n  ]\n\n[[host_config]]\n  host = \"domain2.com\"\n\n  [host_config.acl]\n    blocked = [\n      {user = \"hacker2\"}\n    ]\n</code></pre>"},{"location":"configuration/host_config/#host_configaccess","title":"<code>host_config.access</code>","text":"<p>The access rules defined here are merged with the ones defined in the top-level <code>access</code> section: When a rule is defined in both places:</p> <ul> <li>If the top-level rule ends with a catch-all clause <code>{acl = \"all\", value = \"allow\"}</code>, the resulting domain-specific rule has the clauses from both rules with the domain-specific clauses inserted after the top-level ones, but before the catch-all clause.</li> <li>If the top-level rule does not end with a catch-all clause, the resulting domain-specific rule has the clauses from both rules with the domain-specific clauses inserted after the top-level ones.</li> </ul>"},{"location":"configuration/host_config/#example_4","title":"Example","text":"<p>The <code>c2s</code> access rule defined at the top level allows anyone to connect. However, the rule for <code>domain2.com</code> is extended to prevent the <code>blocked</code> users from connecting:</p> <pre><code>[general]\n  hosts = [\"domain1.com\", \"domain2.com\", \"domain3.com\"]\n\n[access]\n  c2s = [\n    {acl = \"admin\", value = \"allow\"},\n    {acl = \"all\", value = \"allow\"}\n  ]\n\n[[host_config]]\n  host = \"domain2.com\"\n\n  [host_config.access]\n    c2s = [\n      {acl = \"blocked\", value = \"deny\"}\n    ]\n\n    register = [\n      {acl = \"all\", value = \"deny\"}\n    ]\n</code></pre> <p>The resulting rule for <code>domain2.com</code> could be written as:</p> <pre><code>c2s = [\n  {acl = \"admin\", value = \"allow\"},\n  {acl = \"blocked\", value = \"deny\"},\n  {acl = \"all\", value = \"allow\"}\n]\n</code></pre> <p>The <code>register</code> rule is defined only for <code>domain2.com</code>.</p> <p>Note</p> <p>Some access rules are checked outside of the context of any domain, e.g. the access rule for external components - defining them in <code>host_config</code> would have no effect.</p>"},{"location":"configuration/host_config/#host_configs2s","title":"<code>host_config.s2s</code>","text":"<p>This section completely overrides the top-level <code>s2s</code> section, all options are allowed.</p>"},{"location":"configuration/host_config/#example_5","title":"Example","text":"<p>The <code>host_policy</code> option is changed for <code>domain2.com</code>:</p> <pre><code>[general]\n  hosts = [\"domain1.com\", \"domain2.com\", \"domain3.com\"]\n\n[s2s]\n  default_policy = \"deny\"\n\n  host_policy = [\n    {host = \"good-xmpp.org\", policy = \"allow\"},\n    {host = \"bad-xmpp.org\", policy = \"deny\"}\n  ]\n\n[[host_config]]\n  host = \"domain2.com\"\n\n  [host_config.s2s]\n    host_policy = [\n      {host = \"bad-xmpp.org\", policy = \"allow\"},\n      {host = \"evil-xmpp.org\", policy = \"deny\"}\n    ]\n</code></pre> <p>Note that <code>default_policy</code> for <code>domain2.com</code> has the default value <code>allow</code>, because <code>host_config.s2s</code> completely overrides the top-level <code>s2s</code> section, and all options are reset to the respective default values, unless they are explicitly changed.</p>"},{"location":"configuration/internal-databases/","title":"Options: Internal Databases","text":"<p>Internal databases are used to cluster MongooseIM nodes, and to replicate in-memory data (e.g. client sessions) between them.</p> <p>Mnesia is a legacy way to cluster MongooseIM nodes. It is also could be used to store persistent data, but we recommend to use RDBMS databases instead because of scalability and stability reasons.</p> <p>CETS is a new way to cluster MongooseIM nodes. CETS needs to know a list of nodes for the node discovery. There are two ways to get a list of nodes:</p> <ul> <li>RDBMS database. MongooseIM would write into RDBMS its nodename and read a list of other nodes. This is the best option if you are already using a relational database.</li> <li>A text file with a list of nodes on each line. It is useful when there is an external script to make this file based on   some custom logic (for example, a bash script that uses AWS CLI to discover instances in the autoscaling group). This file   would be automatically reread on change.</li> </ul> <p>Omitting this section entirely is equivalent to having only Mnesia enabled:</p> <pre><code>[internal_databases.mnesia]\n</code></pre> <p>The following example enables only CETS with the default RDBMS discovery backend:</p> <pre><code>[internal_databases.cets]\n</code></pre> <p>Warning</p> <p>When switching to CETS, you need to configure particular backends to actually use it:</p> <ul> <li>general backends: <code>sm_backend</code>, <code>s2s_backend</code>, <code>component_backend</code></li> <li>module backends: <code>mod_bosh</code>, <code>mod_stream_management</code>, <code>mod_jingle_sip</code>, <code>mod_muc</code></li> </ul> <p>Sometimes you might want to have both databases enabled and choose which backends use a particular DB:</p> <pre><code>[internal_databases.mnesia]\n\n[internal_databases.cets]\n</code></pre>"},{"location":"configuration/internal-databases/#cets-options","title":"CETS Options","text":""},{"location":"configuration/internal-databases/#internal_databasescetsbackend","title":"<code>internal_databases.cets.backend</code>","text":"<p>Backend for CETS discovery.</p> <ul> <li>Syntax: string, one of <code>\"rdbms\"</code>, <code>\"file\"</code>.</li> <li>Default: <code>\"rdbms\"</code></li> <li>Example: <code>backend = \"rdbms\"</code></li> </ul>"},{"location":"configuration/internal-databases/#internal_databasescetscluster_name","title":"<code>internal_databases.cets.cluster_name</code>","text":"<p>Namespace for the cluster. Only nodes with the same cluster name would be discoverd. This option is for RDBMS backend.</p> <ul> <li>Syntax: string.</li> <li>Default: <code>\"mongooseim\"</code></li> <li>Example: <code>cluster_name = \"mongooseim\"</code></li> </ul>"},{"location":"configuration/internal-databases/#internal_databasescetsnode_list_file","title":"<code>internal_databases.cets.node_list_file</code>","text":"<p>File to read a list of nodes from. Relative to the MongooseIM's release directory. This option is for the file backend. Required, if <code>backend = \"file\"</code>.</p> <ul> <li>Syntax: path.</li> <li>Default: not specified.</li> <li>Example: <code>node_list_file = \"/etc/mim_nodes.txt\"</code></li> </ul>"},{"location":"configuration/internal-databases/#example","title":"Example","text":"<p>The following example enables CETS with the file discovery backend:</p> <pre><code>[internal_databases.cets]\n    backend = \"file\"\n    node_list_file = \"cets_disco.txt\"\n</code></pre>"},{"location":"configuration/listen/","title":"Options: Listen","text":"<p>The <code>listen</code> section specifies how MongooseIM handles incoming connections.</p> <ul> <li> <p>Syntax: Each listener is specified in a subsection starting with <code>[[listen.type]]</code> where <code>type</code> is one of the allowed listener types, handling different types of incoming connections:</p> <ul> <li><code>c2s</code> - client-to-server XMPP connections,</li> <li><code>s2s</code> - server-to-server XMPP connections,</li> <li><code>service</code> - XMPP connections from external components,</li> <li><code>http</code> - HTTP connections from clients or other services.</li> </ul> </li> </ul> <p>The double-bracket syntax is used because there can be multiple listeners of a given type, so for each listener type there is a TOML array of one or more tables (subsections).</p> <ul> <li>Default: None - each listener needs to be enabled explicitly. Typical listeners are already specified in the example configuration file.</li> <li>Example: The simplest XMPP listener configuration, handling only incoming XMPP client connections:</li> </ul> <pre><code>[[listen.c2s]]\n  port = 5222\n</code></pre>"},{"location":"configuration/listen/#general-listener-options","title":"General listener options","text":"<p>The options listed below are the same for all listener types. They set the basic listening socket options. Only <code>port</code> is required, the rest can be used to change the default settings.</p>"},{"location":"configuration/listen/#listenport","title":"<code>listen.*.port</code>","text":"<ul> <li>Syntax: integer, port number</li> <li>Default: no default, this option is mandatory.</li> <li>Example: <code>port = 5222</code></li> </ul> <p>The port number to which the listening socket is bound.</p>"},{"location":"configuration/listen/#listenip_address","title":"<code>listen.*.ip_address</code>","text":"<ul> <li>Syntax: string with the IP address</li> <li>Default: all-zeros address (e.g. <code>\"0.0.0.0\"</code> for IPv4)</li> <li>Example: <code>ip_address = \"127.0.0.1\"</code></li> </ul> <p>The IP address to which the listening socket is bound.</p>"},{"location":"configuration/listen/#listenproto","title":"<code>listen.*.proto</code>","text":"<ul> <li>Syntax: string, only <code>\"tcp\"</code> is accepted</li> <li>Default: <code>\"tcp\"</code></li> <li>Example: <code>proto = \"tcp\"</code></li> </ul> <p>The protocol, which is TCP by default. Currently this is the only valid option.</p>"},{"location":"configuration/listen/#listenip_version","title":"<code>listen.*.ip_version</code>","text":"<ul> <li>Syntax: integer, <code>4</code> or <code>6</code></li> <li>Default: if <code>ip_address</code> is specified, the IP version is determined from that address, otherwise it is <code>4</code></li> <li>Example: <code>ip_version = 6</code></li> </ul> <p>Allows to set the IP version to IPv6. Does not need to be set if <code>ip_address</code> is defined.</p>"},{"location":"configuration/listen/#xmpp-listener-options","title":"XMPP listener options","text":"<p>The options listed below can be set for the <code>c2s</code>, <code>s2s</code> and <code>service</code> listeners to adjust their parameters.</p>"},{"location":"configuration/listen/#listenbacklog","title":"<code>listen.*.backlog</code>","text":"<ul> <li>Syntax: positive integer</li> <li>Default: <code>1024</code></li> <li>Example: <code>backlog = 1000</code></li> </ul> <p>Overrides the default TCP backlog value.</p>"},{"location":"configuration/listen/#listenproxy_protocol","title":"<code>listen.*.proxy_protocol</code>","text":"<ul> <li>Syntax: boolean</li> <li>Default: <code>false</code></li> <li>Example: <code>proxy_protocol = true</code></li> </ul> <p>When set to <code>true</code>, Proxy Protocol is enabled and each connecting client has to provide a proxy header. Use only with a proxy (or a load balancer) to allow it to provide the connection details (including the source IP address) of the original client. Versions 1 and 2 of the protocol are supported.</p>"},{"location":"configuration/listen/#listenhibernate_after","title":"<code>listen.*.hibernate_after</code>","text":"<ul> <li>Syntax: non-negative integer or the string <code>\"infinity\"</code></li> <li>Default: <code>0</code></li> <li>Example: <code>hibernate_after = 10</code></li> </ul> <p>Time in milliseconds after which a client process spawned by this listener will hibernate. Hibernation greatly reduces memory consumption of client processes, but may result in increased CPU consumption if a client is used very frequently. The default, recommended value of 0 means that the client processes will hibernate at every opportunity.</p>"},{"location":"configuration/listen/#listenmax_stanza_size","title":"<code>listen.*.max_stanza_size</code>","text":"<ul> <li>Syntax: positive integer or the string <code>\"infinity\"</code></li> <li>Default: <code>\"infinity\"</code></li> <li>Example: <code>max_stanza_size = 10_000</code></li> </ul> <p>Maximum allowed incoming stanza size in bytes.</p> <p>Warning</p> <p>This limit is checked after the input data parsing, so it does not apply to the input data size itself.</p>"},{"location":"configuration/listen/#listennum_acceptors","title":"<code>listen.*.num_acceptors</code>","text":"<ul> <li>Syntax: positive integer</li> <li>Default: <code>100</code></li> <li>Example: <code>num_acceptors = 200</code></li> </ul> <p>The number of processes accepting new connections on the listening socket.</p>"},{"location":"configuration/listen/#client-to-server-c2s-listenc2s","title":"Client-to-server (C2S): <code>[[listen.c2s]]</code>","text":"<p>Handles XMPP client-to-server (C2S) connections. The recommended port number for a C2S listener is 5222 as registered in the XMPP protocol. The following options are supported for each C2S listener:</p>"},{"location":"configuration/listen/#listenc2saccess","title":"<code>listen.c2s.access</code>","text":"<ul> <li>Syntax: string, rule name or <code>\"all\"</code></li> <li>Default: <code>\"all\"</code></li> <li>Example: <code>access = \"c2s\"</code></li> </ul> <p>The rule that determines who is allowed to connect. By default the rule is <code>\"all\"</code>, which means that anyone can connect. The rule referenced here needs to be defined in the <code>access</code> configuration section.</p>"},{"location":"configuration/listen/#listenc2sshaper","title":"<code>listen.c2s.shaper</code>","text":"<ul> <li>Syntax: string, rule name</li> <li>Default: <code>\"none\"</code> (no shaper)</li> <li>Example: <code>shaper = \"c2s_shaper\"</code></li> </ul> <p>The rule that determines what traffic shaper is used to limit the incoming XMPP traffic to prevent the server from being flooded with incoming data. The rule referenced here needs to be defined in the <code>access</code> configuration section. The value of the access rule needs to be either the shaper name or the string <code>\"none\"</code>, which means no shaper.</p>"},{"location":"configuration/listen/#listenc2smax_connections","title":"<code>listen.c2s.max_connections</code>","text":"<ul> <li>Syntax: positive integer or the string <code>\"infinity\"</code></li> <li>Default: <code>\"infinity\"</code></li> <li>Example: <code>max_connections = 10000</code></li> </ul> <p>Maximum number of open connections. This is a soft limit according to the Ranch documentation.</p>"},{"location":"configuration/listen/#listenc2sc2s_state_timeout","title":"<code>listen.c2s.c2s_state_timeout</code>","text":"<ul> <li>Syntax: non-negative integer or the string <code>\"infinity\"</code></li> <li>Default: <code>5000</code></li> <li>Example: <code>c2s_state_timeout = 10_000</code></li> </ul> <p>Timeout value (in milliseconds) used by the C2S state machine when waiting for the connecting client to respond during stream negotiation and SASL authentication. After the timeout the server responds with the <code>connection-timeout</code> stream error and closes the connection.</p>"},{"location":"configuration/listen/#listenc2sreuse_port","title":"<code>listen.c2s.reuse_port</code>","text":"<ul> <li>Syntax: boolean</li> <li>Default: <code>false</code></li> <li>Example: <code>reuse_port = true</code></li> </ul> <p>Enables linux support for <code>SO_REUSEPORT</code>, see Stack Overflow for more details.</p>"},{"location":"configuration/listen/#listenc2sbackwards_compatible_session","title":"<code>listen.c2s.backwards_compatible_session</code>","text":"<ul> <li>Syntax: boolean</li> <li>Default: <code>true</code></li> <li>Example: <code>backwards_compatible_session = false</code></li> </ul> <p>Enables backward-compatible session establishement IQs. See https://www.rfc-editor.org/rfc/rfc6121.html#section-1.4:</p> <p>[RFC3921] specified one additional       precondition: formal establishment of an instant messaging and       presence session.  Implementation and deployment experience has       shown that this additional step is unnecessary.  However, for       backward compatibility an implementation MAY still offer that       feature.  This enables older software to connect while letting       newer software save a round trip.</p>"},{"location":"configuration/listen/#listenc2sallowed_auth_methods","title":"<code>listen.c2s.allowed_auth_methods</code>","text":"<ul> <li>Syntax: array of strings. Allowed values: <code>\"internal\"</code>, <code>\"rdbms\"</code>, <code>\"external\"</code>, <code>\"anonymous\"</code>, <code>\"ldap\"</code>, <code>\"jwt\"</code>, <code>\"http\"</code>, <code>\"pki\"</code>, <code>\"dummy\"</code></li> <li>Default: not set</li> <li>Example: <code>allowed_auth_methods = [\"internal\"]</code></li> </ul> <p>A subset of enabled methods to login with for this listener. This option allows to enable only some backends. It is useful, if you want to have several listeners for different type of users (for example, some users use PKI while other users use LDAP auth). Same syntax as for <code>auth.methods</code> option.</p>"},{"location":"configuration/listen/#tls-options-for-c2s","title":"TLS options for C2S","text":"<p>To enable TLS, a TOML subsection called <code>tls</code> has to be present in the listener options. To disable TLS, make sure that the section is not present, and no TLS options are set. You can set the following options in this section:</p>"},{"location":"configuration/listen/#listenc2stlsmode","title":"<code>listen.c2s.tls.mode</code>","text":"<ul> <li>Syntax: string, one of <code>\"tls\"</code>, <code>\"starttls\"</code>, <code>\"starttls_required\"</code></li> <li>Default: <code>\"starttls\"</code></li> <li>Example: <code>tls.mode = \"starttls\"</code></li> </ul> <p>This option determines how clients are supposed to set up the TLS encryption:</p> <ul> <li><code>tls</code> - clients must initiate a TLS session immediately after connecting, before beginning the normal XML stream,</li> <li><code>starttls</code> - enables StartTLS support; requires <code>certfile</code>,</li> <li><code>starttls_required</code> - enables and enforces StartTLS usage.</li> </ul>"},{"location":"configuration/listen/#listenc2stlsmodule","title":"<code>listen.c2s.tls.module</code>","text":"<ul> <li>Syntax: string, one of <code>\"just_tls\"</code>, <code>\"fast_tls\"</code></li> <li>Default: <code>\"fast_tls\"</code></li> <li>Example: <code>tls.module = \"just_tls\"</code></li> </ul> <p>By default the TLS library used for C2S connections is <code>fast_tls</code>, which uses OpenSSL-based NIFs. It is possible to change it to <code>just_tls</code> - Erlang TLS implementation provided by OTP. Some TLS-related options described here have different formats for these two libraries.</p>"},{"location":"configuration/listen/#listenc2stlsverify_mode","title":"<code>listen.c2s.tls.verify_mode</code>","text":"<ul> <li>Syntax: string, one of <code>\"peer\"</code>, <code>\"selfsigned_peer\"</code>, <code>\"none\"</code></li> <li>Default: <code>\"peer\"</code></li> <li>Example: <code>tls.verify_mode = \"none\"</code></li> </ul> <p>Specifies the way client certificate verification works:</p> <ul> <li><code>peer</code> - makes sure the client certificate is valid and signed by a trusted CA. Requires a valid <code>cacertfile</code>.</li> <li><code>selfsigned_peer</code> - makes sure the client certificate is valid, but allows self-signed certificates; supported only by <code>just_tls</code>. Requires a valid <code>cacertfile</code>.</li> <li><code>none</code> - client certificate is not checked.</li> </ul>"},{"location":"configuration/listen/#listenc2stlscertfile","title":"<code>listen.c2s.tls.certfile</code>","text":"<ul> <li>Syntax: string, path in the file system</li> <li>Default: not set</li> <li>Example: <code>tls.certfile = \"server.pem\"</code></li> </ul> <p>Path to the X509 PEM file with a certificate and a private key (not protected by a password). If the certificate is signed by an intermediate CA, you should specify here the whole CA chain by concatenating all public keys together and appending the private key after that.</p> <p>Note</p> <p>For <code>just_tls</code> this file should only contain the certificate and the path to the private key can be provided separately as <code>keyfile</code>.</p>"},{"location":"configuration/listen/#listenc2stlscacertfile","title":"<code>listen.c2s.tls.cacertfile</code>","text":"<ul> <li>Syntax: string, path in the file system</li> <li>Default: not set</li> <li>Example: <code>tls.cacertfile = \"ca.pem\"</code></li> </ul> <p>Path to the X509 PEM file with a CA chain that will be used to verify clients. It won't have any effect if <code>verify_mode</code> is <code>\"none\"</code>.</p>"},{"location":"configuration/listen/#listenc2stlsdhfile","title":"<code>listen.c2s.tls.dhfile</code>","text":"<ul> <li>Syntax: string, path in the file system</li> <li>Default: not set</li> <li>Example: <code>tls.dhfile = \"dh.pem\"</code></li> </ul> <p>Path to the Diffie-Hellman parameter file.</p>"},{"location":"configuration/listen/#listenc2stlsciphers","title":"<code>listen.c2s.tls.ciphers</code>","text":"<ul> <li>Syntax: string with the OpenSSL cipher suite specification</li> <li>Default: for <code>fast_tls</code> the default is<code>\"TLSv1.2:TLSv1.3\"</code>. For <code>just_tls</code> this option is not set by default - all supported suites are accepted.</li> <li>Example: <code>tls.ciphers = \"ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384\"</code></li> </ul> <p>Cipher suites to use with StartTLS or TLS. Please refer to the OpenSSL documentation for the cipher string format. For <code>fast_tls</code>, this string can be used to specify versions as well. For <code>just_tls</code>, see the Erlang/OTP SSL documentation for allowed values.</p>"},{"location":"configuration/listen/#listenc2stlsprotocol_options-only-for-fast_tls","title":"<code>listen.c2s.tls.protocol_options</code> - only for <code>fast_tls</code>","text":"<ul> <li>Syntax: array of strings</li> <li>Default: <code>[\"no_sslv2\", \"no_sslv3\", \"no_tlsv1\", \"no_tlsv1_1\"]</code></li> <li>Example: <code>tls.protocol_options = [\"no_tlsv1\", \"no_tlsv1_1\"]</code></li> </ul> <p>A list of OpenSSL options for FastTLS. You can find the mappings between supported options and actual OpenSSL flags in the <code>fast_tls</code> source code.</p>"},{"location":"configuration/listen/#listenc2stlskeyfile-only-for-just_tls","title":"<code>listen.c2s.tls.keyfile</code> - only for <code>just_tls</code>","text":"<ul> <li>Syntax: string, path in the file system</li> <li>Default: not set</li> <li>Example: <code>tls.keyfile = \"key.pem\"</code></li> </ul> <p>Path to the X509 PEM file with the private key.</p>"},{"location":"configuration/listen/#listenc2stlspassword-only-for-just_tls","title":"<code>listen.c2s.tls.password</code> - only for <code>just_tls</code>","text":"<ul> <li>Syntax: string</li> <li>Default: not set</li> <li>Example: <code>tls.password = \"secret\"</code></li> </ul> <p>Password to the X509 PEM file with the private key.</p>"},{"location":"configuration/listen/#listenc2stlsdisconnect_on_failure-only-for-just_tls","title":"<code>listen.c2s.tls.disconnect_on_failure</code> - only for <code>just_tls</code>","text":"<ul> <li>Syntax: boolean</li> <li>Default: <code>true</code></li> <li>Example: <code>tls.disconnect_on_failure = false</code></li> </ul>"},{"location":"configuration/listen/#listenc2stlsversions-only-for-just_tls","title":"<code>listen.c2s.tls.versions</code> - only for <code>just_tls</code>","text":"<ul> <li>Syntax: array of strings</li> <li>Default: not set, all supported versions are accepted</li> <li>Example: <code>tls.versions = [\"tlsv1.2\", \"tlsv1.3\"]</code></li> </ul> <p>TLS versions to use with StartTLS or TLS. For allowed values, see the Erlang/OTP SSL documentation</p>"},{"location":"configuration/listen/#listenc2stlscrl_files-only-for-just_tls","title":"<code>listen.c2s.tls.crl_files</code> - only for <code>just_tls</code>","text":"<ul> <li>Syntax: array of strings, paths in the file system</li> <li>Default: not set</li> <li>Example: <code>tls.crl_files = [\"certs.crl\"]</code></li> </ul> <p>Specifies the paths to Certificate Revocation Lists.</p>"},{"location":"configuration/listen/#c2s-example","title":"C2S Example","text":"<p>The following section configures two C2S listeners.</p> <pre><code>[[listen.c2s]]\n  port = 5222\n  access = \"c2s\"\n  shaper = \"c2s_shaper\"\n  max_stanza_size = 65536\n  tls.certfile = \"server.pem\"\n  tls.dhfile = \"dh_server.pem\"\n\n[[listen.c2s]]\n  port = 5223\n  access = \"c2s\"\n  shaper = \"c2s_shaper\"\n  max_stanza_size = 65536\n</code></pre> <ul> <li>One at port 5222, which accepts a plain TCP connection and allows to use StartTLS for upgrading it to an encrypted one. The files containing the certificate and the DH parameter are also provided.</li> <li>One at port 5223, which accepts only encrypted TLS connections - this is the legacy method as StartTLS is preferred.</li> </ul> <p>Both listeners use <code>c2s</code> and <code>c2s_shaper</code> rules for access management and traffic shaping, respectively.</p>"},{"location":"configuration/listen/#server-to-server-s2s-listens2s","title":"Server-to-server (S2S): <code>[[listen.s2s]]</code>","text":"<p>Handles incoming server-to-server (S2S) connections (federation). The recommended port number for an S2S listener is 5269 as registered in the XMPP protocol.</p> <p>Note</p> <p>Many S2S options are configured in the <code>s2s</code> section of the configuration file, and they apply to both incoming and outgoing connections.</p>"},{"location":"configuration/listen/#listens2sshaper","title":"<code>listen.s2s.shaper</code>","text":"<ul> <li>Syntax: string, name of the shaper rule or <code>\"none\"</code></li> <li>Default: <code>\"none\"</code> - no shaper</li> <li>Example: <code>shaper = \"s2s_shaper\"</code></li> </ul> <p>Name of the rule that determines what traffic shaper is used to limit the incoming XMPP traffic to prevent the server from being flooded with incoming data. The rule referenced here needs to be defined in the <code>access</code> config section and it should return the shaper name or the value <code>\"none\"</code>.</p>"},{"location":"configuration/listen/#tls-options-for-s2s","title":"TLS options for S2S","text":"<p>S2S connections do not use TLS encryption unless enabled with the <code>use_starttls</code> option in the <code>s2s</code> section. You can specify additional options of the TLS encryption in the <code>tls</code> subsection of the listener configuration. Accepted options are: <code>verify_mode</code>, <code>certfile</code>, <code>cacertfile</code>, <code>dhfile</code>, <code>ciphers</code> and <code>protocol_options</code>. They have the same semantics as the corresponding c2s options for <code>fast_tls</code>.</p>"},{"location":"configuration/listen/#s2s-example","title":"S2S Example","text":"<p>The following section configures an S2S listener with some basic settings set up. The <code>s2s_shaper</code> access rule is used, which requires a definition in the <code>access</code> section.</p> <pre><code>[[listen.s2s]]\n  port = 5269\n  shaper = \"s2s_shaper\"\n  max_stanza_size = 131072\n  tls.dhfile = \"dh_server.pem\"\n</code></pre>"},{"location":"configuration/listen/#xmpp-components-listenservice","title":"XMPP Components: <code>[[listen.service]]</code>","text":"<p>Interface for external services acting as XMPP components (XEP-0114: Jabber Component Protocol), enabling communication between MongooseIM and external services over the XMPP network. The recommended port number for a component listener is 8888.</p> <p>According to XEP-0114: Jabber Component Protocol the component's hostname should be given in the  element. <p>Warning</p> <p>This interface does not support dynamic domains. Do not use them both at the same time.</p>"},{"location":"configuration/listen/#listenserviceaccess","title":"<code>listen.service.access</code>","text":"<ul> <li>Syntax: string, rule name or <code>\"all\"</code></li> <li>Default: <code>\"all\"</code></li> <li>Example: <code>access = \"component\"</code></li> </ul> <p>Determines who is allowed to send data to external components. By default the rule is <code>all</code>, which means that anyone can communicate with the components.</p>"},{"location":"configuration/listen/#listenservicepassword","title":"<code>listen.service.password</code>","text":"<ul> <li>Syntax: string</li> <li>Default: no default, this option is mandatory</li> <li>Example: <code>password = \"secret\"</code></li> </ul> <p>The external component needs to authenticate with this password to connect.</p>"},{"location":"configuration/listen/#listenserviceshaper_rule","title":"<code>listen.service.shaper_rule</code>","text":"<ul> <li>Syntax: string, name of the shaper</li> <li>Default: <code>\"none\"</code></li> <li>Example: <code>shaper = \"component_shaper\"</code></li> </ul> <p>The traffic shaper used to limit the XMPP traffic to prevent the server from being flooded with incoming data. Contrary to the C2S and S2S shapers, here the shaper name directly references the shaper that needs to be defined in the <code>shaper</code> section.</p>"},{"location":"configuration/listen/#listenservicecheck_from","title":"<code>listen.service.check_from</code>","text":"<ul> <li>Syntax: boolean</li> <li>Default: <code>true</code></li> <li>Example: <code>check_from = false</code></li> </ul> <p>Specifies whether the server should verify the \"from\" field in stanzas from the component.</p>"},{"location":"configuration/listen/#listenservicehidden_components","title":"<code>listen.service.hidden_components</code>","text":"<ul> <li>Syntax: boolean</li> <li>Default: <code>false</code></li> <li>Example: <code>hidden_components = true</code></li> </ul> <p>All components connected to an endpoint with this option enabled will be considered \"hidden\".</p> <p>Hidden components have a special flag enabled in the internal component table. Alone, it doesn't change the server behaviour in any way, but it may be used by other modules and extensions to execute special logic. An example would be <code>mod_disco</code>, which may be configured to filter out hidden components from disco results, so they won't be discoverable by clients. A reason to do so could be reduced traffic - systems with many components could return very long disco responses. Also, some deployments would like to avoid revealing some services; not because it is a security threat (this method does not prevent clients from communicating with hidden components), but rather because they are not meant to interact with clients directly (e.g. helper components for other components).</p>"},{"location":"configuration/listen/#listenserviceconflict_behaviour","title":"<code>listen.service.conflict_behaviour</code>","text":"<ul> <li>Syntax: string, one of: <code>\"disconnect\"</code>, <code>\"kick_old\"</code></li> <li>Default: <code>\"disconnect\"</code></li> <li>Example: <code>conflict_behaviour = \"kick_old\"</code></li> </ul> <p>By default, when a component tries to connect and a registration conflict occurs, the connection is dropped with the following error:</p> <pre><code>&lt;stream:error&gt;\n  &lt;conflict xmlns='urn:ietf:params:xml:ns:xmpp-streams'/&gt;\n&lt;/stream:error&gt;\n&lt;/stream:stream&gt;\n</code></pre> <p>It makes implementing the reconnection logic difficult, because the old connection would not allow any other connections. By setting this option to <code>kick_old</code>, we drop any old connections registered at the same host before accepting new ones.</p>"},{"location":"configuration/listen/#listenservicemax_fsm_queue","title":"<code>listen.service.max_fsm_queue</code>","text":"<ul> <li>Syntax: positive integer</li> <li>Default: not set - no limit</li> <li>Example: <code>max_fsm_queue = 1000</code></li> </ul> <p>Message queue limit to prevent resource exhaustion; overrides the value set in the <code>general</code> section.</p>"},{"location":"configuration/listen/#custom-extension-to-the-protocol","title":"Custom extension to the protocol","text":"<p>In order to register a component for all virtual hosts served by the server (see <code>hosts</code> in the <code>general</code> section), the component must add the attribute <code>is_subdomain=\"true\"</code> to the opening stream element. This maybe helpful if someone wants to have a single instance of a component serving multiple virtual hosts. The <code>is_subdomain</code> attribute is optional and the default behaviour is as described in XEP-0114: Jabber Component Protocol.</p>"},{"location":"configuration/listen/#service-listener-example","title":"Service listener example","text":"<p>The following section configures a service listener, accepting connections from external components. The IP address is limited to loopback to prevent connections from different hosts. All components are allowed to connect, but they need to provide the password. The shaper named <code>fast</code> needs to be defined in the <code>shaper</code> section.</p> <pre><code>[[listen.service]]\n  port = 8888\n  access = \"all\"\n  shaper_rule = \"fast\"\n  ip_address = \"127.0.0.1\"\n  password = \"secret\"\n</code></pre>"},{"location":"configuration/listen/#http-based-services-listenhttp","title":"HTTP-based services: <code>[[listen.http]]</code>","text":"<p>Manages all HTTP-based services, such as BOSH (HTTP long-polling), WebSocket, GraphQL and REST. It uses the Cowboy web server. Recommended port number: 5280 for BOSH/WS.</p> <p>There are the following options for each of the HTTP listeners:</p>"},{"location":"configuration/listen/#listenhttphandlers","title":"<code>listen.http.handlers</code>","text":"<ul> <li> <p>Syntax: each handler is specified in a subsection starting with <code>[[listen.http.handlers.type]]</code> where <code>type</code> is one of the allowed handler types, handling different connection types:</p> <ul> <li><code>mod_bosh</code> - for BOSH connections,</li> <li><code>mod_websockets</code> - for WebSocket connections,</li> <li><code>mongoose_graphql_handler</code> - for GraphQL API,</li> <li><code>mongoose_admin_api</code>, <code>mongoose_client_api</code> - for REST API.</li> </ul> <p>These types are described below in more detail. The double-bracket syntax is used because there can be multiple handlers of a given type, so for each type there is a TOML array of one or more tables (subsections).</p> </li> <li> <p>Default: <code>[]</code> - no handlers enabled, all of them need to be specified explicitly.</p> </li> <li>Example: two handlers, one for BOSH and one for WebSockets <pre><code>  [[listen.http.handlers.mod_bosh]]\n    host = \"_\"\n    path = \"/http-bind\"\n\n  [[listen.http.handlers.mod_websockets]]\n    host = \"_\"\n    path = \"/ws-xmpp\"\n</code></pre></li> </ul>"},{"location":"configuration/listen/#common-handler-options","title":"Common handler options","text":""},{"location":"configuration/listen/#listenhttphandlershost","title":"<code>listen.http.handlers.*.host</code>","text":"<ul> <li>Syntax: string</li> <li>Default: no default, mandatory option</li> <li>Example: <code>host = \"localhost\"</code></li> </ul> <p>Host name for this handler or <code>\"_\"</code> for any host.</p>"},{"location":"configuration/listen/#listenhttphandlerspath","title":"<code>listen.http.handlers.*.path</code>","text":"<ul> <li>Syntax: string</li> <li>Default: no default, mandatory option</li> <li>Example: <code>path = \"/ws-xmpp\"</code></li> </ul> <p>Path for this handler.</p>"},{"location":"configuration/listen/#handler-types-bosh-mod_bosh","title":"Handler types: BOSH - <code>mod_bosh</code>","text":"<p>The recommended configuration is shown in Example 1 below. To handle incoming BOSH traffic you need to configure the <code>mod_bosh</code> module in the <code>modules</code> section as well.</p>"},{"location":"configuration/listen/#handler-types-websockets-mod_websockets","title":"Handler types: WebSockets - <code>mod_websockets</code>","text":"<p>The recommended configuration is shown in Example 1 below. Websocket connections as defined in RFC 7395. You can pass the following optional parameters:</p>"},{"location":"configuration/listen/#listenhttphandlersmod_websocketstimeout","title":"<code>listen.http.handlers.mod_websockets.timeout</code>","text":"<ul> <li>Syntax: non-negative integer or the string <code>\"infinity\"</code></li> <li>Default: <code>\"infinity\"</code></li> <li>Example: <code>timeout = 60_000</code></li> </ul> <p>The time (in milliseconds) after which an inactive user is disconnected.</p>"},{"location":"configuration/listen/#listenhttphandlersmod_websocketsping_rate","title":"<code>listen.http.handlers.mod_websockets.ping_rate</code>","text":"<ul> <li>Syntax: positive integer</li> <li>Default: not set - pings disabled</li> <li>Example: <code>ping_rate = 10_000</code></li> </ul> <p>The time (in milliseconds) between pings sent by server. By setting this option you enable server-side pinging.</p>"},{"location":"configuration/listen/#listenhttphandlersmod_websocketsmax_stanza_size","title":"<code>listen.http.handlers.mod_websockets.max_stanza_size</code>","text":"<ul> <li>Syntax: positive integer or the string <code>\"infinity\"</code></li> <li>Default: <code>\"infinity\"</code></li> <li>Example: <code>max_stanza_size = 10_000</code></li> </ul> <p>Maximum allowed incoming stanza size in bytes.</p> <p>Warning</p> <p>This limit is checked after the input data parsing, so it does not apply to the input data size itself.</p>"},{"location":"configuration/listen/#listenhttphandlersmod_websocketsc2s_state_timeout","title":"<code>listen.http.handlers.mod_websockets.c2s_state_timeout</code>","text":"<p>Same as the C2S option</p>"},{"location":"configuration/listen/#listenhttphandlersmod_websocketsbackwards_compatible_session","title":"<code>listen.http.handlers.mod_websockets.backwards_compatible_session</code>","text":"<p>Same as the C2S option</p>"},{"location":"configuration/listen/#handler-types-graphql-api-mongoose_graphql_handler","title":"Handler types: GraphQL API - <code>mongoose_graphql_handler</code>","text":"<p>For more information about the API, see the Admin interface and User interface documentation. The following options are supported for this handler:</p>"},{"location":"configuration/listen/#listenhttphandlersmongoose_graphql_handlerschema_endpoint","title":"<code>listen.http.handlers.mongoose_graphql_handler.schema_endpoint</code>","text":"<ul> <li>Syntax: string, one of <code>\"admin\"</code>, <code>\"domain_admin\"</code>, <code>\"user\"</code></li> <li>Default: no default, this option is mandatory</li> <li>Example: <code>schema_endpoint = \"admin\"</code></li> </ul> <p>Specifies the schema endpoint:</p> <ul> <li><code>admin</code> - Endpoint with the admin commands. A global admin has permission to execute all commands. See the recommended configuration -  Example 2.</li> <li><code>domain_admin</code> - Endpoint with the admin commands. A domain admin has permission to execute only commands with the owned domain. See the recommended configuration - Example 3.</li> <li><code>user</code> - Endpoint with the user commands. Used to manage the authorized user. See the recommended configuration - Example 4.</li> </ul>"},{"location":"configuration/listen/#listenhttphandlersmongoose_graphql_handlerusername-only-for-admin","title":"<code>listen.http.handlers.mongoose_graphql_handler.username</code> - only for <code>admin</code>","text":"<ul> <li>Syntax: string</li> <li>Default: not set</li> <li>Example: <code>username = \"admin\"</code></li> </ul> <p>When set, enables authentication for the admin API, otherwise it is disabled. Requires setting <code>password</code>.</p>"},{"location":"configuration/listen/#listenhttphandlersmongoose_graphql_handlerpassword-only-for-admin","title":"<code>listen.http.handlers.mongoose_graphql_handler.password</code> - only for <code>admin</code>","text":"<ul> <li>Syntax: string</li> <li>Default: not set</li> <li>Example: <code>password = \"secret\"</code></li> </ul>"},{"location":"configuration/listen/#listenhttphandlersmongoose_graphql_handlerallowed_categories","title":"<code>listen.http.handlers.mongoose_graphql_handler.allowed_categories</code>","text":"<ul> <li>Syntax: non-empty array of strings. Allowed values: <code>\"checkAuth\", \"account\", \"domain\", \"last\", \"muc\", \"muc_light\", \"session\", \"stanza\", \"roster\", \"vcard\", \"private\", \"metric\", \"stat\", \"gdpr\", \"mnesia\", \"server\", \"inbox\", \"http_upload\", \"offline\", \"token\"</code></li> <li>Default: all GraphQL categories enabled</li> <li>Example: <code>allowed_categories = [\"domain\", \"last\"]</code></li> </ul> <p>By default, when the option is not included, all GraphQL categories are enabled, so you don't need to add this option. When this option is added, only listed GraphQL categories will be processed. For others, the error \"category disabled\" will be returned.</p>"},{"location":"configuration/listen/#listenhttphandlersmongoose_graphql_handlersse_idle_timeout","title":"<code>listen.http.handlers.mongoose_graphql_handler.sse_idle_timeout</code>","text":"<ul> <li>Syntax: positive integer or the string <code>\"infinity\"</code></li> <li>Default: 3600000</li> <li>Example: <code>schema_endpoint = \"admin\"</code></li> </ul> <p>This option specifies the time in milliseconds after which the SSE connection is closed when idle. The default value is 1 hour.</p>"},{"location":"configuration/listen/#handler-types-rest-api-admin-mongoose_admin_api","title":"Handler types: REST API - Admin - <code>mongoose_admin_api</code>","text":"<p>The recommended configuration is shown in Example 5 below. For more information about the API, see the REST interface documentation. The following options are supported for this handler:</p>"},{"location":"configuration/listen/#listenhttphandlersmongoose_admin_apiusername","title":"<code>listen.http.handlers.mongoose_admin_api.username</code>","text":"<ul> <li>Syntax: string</li> <li>Default: not set</li> <li>Example: <code>username = \"admin\"</code></li> </ul> <p>When set, enables authentication for the admin API, otherwise it is disabled. Requires setting <code>password</code>.</p>"},{"location":"configuration/listen/#listenhttphandlersmongoose_admin_apipassword","title":"<code>listen.http.handlers.mongoose_admin_api.password</code>","text":"<ul> <li>Syntax: string</li> <li>Default: not set</li> <li>Example: <code>password = \"secret\"</code></li> </ul> <p>Required to enable authentication for the admin API.</p>"},{"location":"configuration/listen/#listenhttphandlersmongoose_admin_apihandlers","title":"<code>listen.http.handlers.mongoose_admin_api.handlers</code>","text":"<ul> <li>Syntax: array of strings. Allowed values: <code>\"contacts\"</code>, <code>\"users\"</code>, <code>\"sessions\"</code>, <code>\"messages\"</code>, <code>\"stanzas\"</code>, <code>\"muc_light\"</code>, <code>\"muc\"</code>, <code>\"inbox\"</code>, <code>\"domain\"</code>, <code>\"metrics\"</code>.</li> <li>Default: all API handler modules enabled</li> <li>Example: <code>handlers = [\"domain\"]</code></li> </ul> <p>The admin API consists of several handler modules, each of them implementing a subset of the functionality. By default all modules are enabled, so you don't need to change this option.</p>"},{"location":"configuration/listen/#handler-types-rest-api-client-mongoose_client_api","title":"Handler types: REST API - Client - <code>mongoose_client_api</code>","text":"<p>The recommended configuration is shown in Example 6 below. Please refer to REST interface documentation for more information. The following options are supported for this handler:</p>"},{"location":"configuration/listen/#listenhttphandlersmongoose_client_apihandlers","title":"<code>listen.http.handlers.mongoose_client_api.handlers</code>","text":"<ul> <li>Syntax: array of strings. Allowed values: <code>\"sse\"</code>, <code>\"messages\"</code>, <code>\"contacts\"</code>, <code>\"rooms\"</code>, <code>\"rooms_config\"</code>, <code>\"rooms_users\"</code>, <code>\"rooms_messages\"</code>.</li> <li>Default: all API handler modules enabled</li> <li>Example: <code>handlers = [\"messages\", \"sse\"]</code></li> </ul> <p>The client API consists of several handler modules, each of them implementing a subset of the functionality. By default all modules are enabled, so you don't need to change this option.</p>"},{"location":"configuration/listen/#listenhttphandlersmongoose_client_apidocs","title":"<code>listen.http.handlers.mongoose_client_api.docs</code>","text":"<ul> <li>Syntax: boolean</li> <li>Default: <code>true</code></li> <li>Example: <code>docs = \"false\"</code></li> </ul> <p>The Swagger documentation of the client API is hosted at the <code>/api-docs</code> path. You can disable the hosted documentation by setting this option to <code>false</code>.</p>"},{"location":"configuration/listen/#transport-options","title":"Transport options","text":"<p>The options listed below are used to modify the HTTP transport settings.</p>"},{"location":"configuration/listen/#listenhttptransportnum_acceptors","title":"<code>listen.http.transport.num_acceptors</code>","text":"<ul> <li>Syntax: positive integer</li> <li>Default: <code>100</code></li> <li>Example: <code>transport.num_acceptors = 10</code></li> </ul> <p>Number of HTTP connection acceptors.</p>"},{"location":"configuration/listen/#listenhttptransportmax_connections","title":"<code>listen.http.transport.max_connections</code>","text":"<ul> <li>Syntax: positive integer or the string <code>\"infinity\"</code></li> <li>Default: <code>1024</code></li> <li>Example: <code>transport.max_connections = \"infinity\"</code></li> </ul> <p>Maximum number of open connections. The default value of 1024 is set by the Ranch library.</p>"},{"location":"configuration/listen/#tls-https-options","title":"TLS (HTTPS) options","text":"<p>By default the HTTP listener does not use TLS. To use TLS (HTTPS), you need to add a TOML table (subsection) called <code>tls</code> to the config file with the <code>certfile</code> and <code>keyfile</code> options that specify the location of the certificate and private key files, respectively. If the keyfile is password-protected, <code>password</code> is required as well. If the certificate is signed by an intermediate CA, one will probably want to specify the CA chain with the <code>cacertfile</code> option. The library used for HTTP is the Erlang TLS implementation provided by OTP - see ranch_ssl for details.</p> <p>The options accepted here are: <code>verify_mode</code>, <code>certfile</code>, <code>cacertfile</code>, <code>ciphers</code>, <code>keyfile</code>, <code>password</code>, <code>versions</code>, <code>dhfile</code>. They have the same semantics as the corresponding c2s options for <code>just_tls</code>.</p>"},{"location":"configuration/listen/#protocol-options","title":"Protocol options","text":"<p>These are some additional options of the HTTP protocol.</p>"},{"location":"configuration/listen/#listenhttpprotocolcompress","title":"<code>listen.http.protocol.compress</code>","text":"<ul> <li>Syntax: boolean</li> <li>Default: false</li> <li>Example: <code>protocol.compress = \"true\"</code></li> </ul> <p>Compresses response bodies automatically when the client supports it.</p>"},{"location":"configuration/listen/#http-listener-examples","title":"HTTP listener examples","text":"<p>The examples shown below are included in the provided default configuration file.</p>"},{"location":"configuration/listen/#example-1-bosh-and-ws","title":"Example 1. BOSH and WS","text":"<p>The following listener accepts BOSH and WebSocket connections and has TLS configured.</p> <pre><code>[[listen.http]]\n  port = 5285\n  tls.certfile = \"mycert.pem\"\n  tls.keyfile = \"mykey.pem\"\n  tls.password =  \"secret\"\n\n  [[listen.http.handlers.mod_bosh]]\n    host = \"_\"\n    path = \"/http-bind\"\n\n  [[listen.http.handlers.mod_websockets]]\n    host = \"_\"\n    path = \"/ws-xmpp\"\n</code></pre>"},{"location":"configuration/listen/#example-2-admin-graphql-api","title":"Example 2. Admin GraphQL API","text":"<p>GraphQL API for administration, the listener is bound to 127.0.0.1 for increased security. The number of acceptors and connections is specified (reduced).</p> <pre><code>[[listen.http]]\n  ip_address = \"127.0.0.1\"\n  port = 5551\n  transport.num_acceptors = 5\n  transport.max_connections = 10\n\n  [[listen.http.handlers.mongoose_graphql_handler]]\n    host = \"localhost\"\n    path = \"/api/graphql\"\n    schema_endpoint = \"admin\"\n    username = \"admin\"\n    password = \"secret\"\n    allowed_categories = [\"server\", \"last\", \"vcard\"]\n</code></pre>"},{"location":"configuration/listen/#example-3-domain-admin-graphql-api","title":"Example 3. Domain Admin GraphQL API","text":"<p>GraphQL API for the domain admin.</p> <pre><code>[[listen.http]]\n  ip_address = \"0.0.0.0\"\n  port = 5541\n  transport.num_acceptors = 10\n  transport.max_connections = 1024\n\n  [[listen.http.handlers.mongoose_graphql_handler]]\n    host = \"_\"\n    path = \"/api/graphql\"\n    schema_endpoint = \"domain_admin\"\n</code></pre>"},{"location":"configuration/listen/#example-4-user-graphql-api","title":"Example 4. User GraphQL API","text":"<p>GraphQL API for the user.</p> <pre><code>[[listen.http]]\n  ip_address = \"0.0.0.0\"\n  port = 5561\n  transport.num_acceptors = 10\n  transport.max_connections = 1024\n\n  [[listen.http.handlers.mongoose_graphql_handler]]\n    host = \"_\"\n    path = \"/api/graphql\"\n    schema_endpoint = \"user\"\n</code></pre>"},{"location":"configuration/listen/#example-5-admin-rest-api","title":"Example 5. Admin REST API","text":"<p>REST API for administration, the listener is bound to <code>127.0.0.1</code> for increased security. The number of acceptors and connections is specified (reduced). Basic HTTP authentication is used as well.</p> <pre><code>[[listen.http]]\n  ip_address = \"127.0.0.1\"\n  port = 8088\n  transport.num_acceptors = 5\n  transport.max_connections = 10\n\n  [[listen.http.handlers.mongoose_admin_api]]\n    host = \"localhost\"\n    path = \"/api\"\n    username = \"admin\"\n    password = \"secret\"\n</code></pre>"},{"location":"configuration/listen/#example-6-client-rest-api","title":"Example 6. Client REST API","text":"<p>REST API for clients.</p> <pre><code>[[listen.http]]\n  port = 8089\n  transport.max_connections = 1024\n  protocol.compress = true\n\n  [[listen.http.handlers.mongoose_client_api]]\n    host = \"_\"\n    path = \"/api\"\n</code></pre>"},{"location":"configuration/outgoing-connections/","title":"Options: Outgoing connections","text":"<p>MongooseIM can be configured to talk to external services like databases or HTTP servers. The interface for outgoing connections management is available via the <code>outgoing_pools</code> config option for the following types of connections:</p> <ul> <li><code>cassandra</code> - pool of connections to Cassandra cluster</li> <li><code>redis</code> - pool of connections to Redis server</li> <li><code>http</code> - pool of connections to an HTTP(S) server MongooseIM can talk to, for example HTTP authentication backend or HTTP notifications</li> <li><code>elastic</code> - pool of connections to ElasticSearch server</li> <li><code>rdbms</code> - pool of connections to an RDBMS database</li> <li><code>rabbit</code> - pool of connections to a RabbitMQ server</li> <li> <p><code>ldap</code> - pool of connections to an LDAP server</p> </li> <li> <p>Syntax: Each pool is specified in a subsection starting with <code>[outgoing_pools.type.tag]</code>, where <code>type</code> is one of available connection types and <code>tag</code> is an arbitrary value uniquely identifying the pool within its type. This allows you to create multiple dedicated pools of the same type.</p> </li> </ul>"},{"location":"configuration/outgoing-connections/#general-pool-options","title":"General pool options","text":""},{"location":"configuration/outgoing-connections/#outgoing_poolsscope","title":"<code>outgoing_pools.*.*.scope</code>","text":"<ul> <li>Syntax: string, one of:<code>\"global\"</code>, <code>\"host_type\"</code>.</li> <li>Default: <code>\"global\"</code></li> <li>Example: <code>scope = \"host_type\"</code></li> </ul> <p><code>scope</code> can be set to:</p> <ul> <li><code>global</code> - meaning that the pool will be started once no matter how many XMPP hosts are served by MongooseIM.</li> <li> <p><code>host_type</code> - the pool will be started for each static XMPP host or host type served by MongooseIM.</p> <p>Note</p> <p>A pool with scope <code>global</code> and tag <code>default</code> is used by services that are not configured by host_type, like <code>service_domain_db</code> or <code>service_mongoose_system_metrics</code>, or by modules that don't support dynamic domains, like <code>mod_pubsub</code>. If a global default pool is not configured, these services will fail.</p> <p>Note</p> <p>The option <code>host</code> is still supported and behaves equivalent to <code>host_type</code>; however, it is deprecated in favour of the latter.</p> </li> </ul>"},{"location":"configuration/outgoing-connections/#worker-pool-options","title":"Worker pool options","text":"<p>All pools are managed by the inaka/worker_pool library.</p> <p>Available options are:</p>"},{"location":"configuration/outgoing-connections/#outgoing_poolsstrategy","title":"<code>outgoing_pools.*.*.strategy</code>","text":"<ul> <li>Syntax: string, one of:<code>\"best_worker\"</code>, <code>\"random_worker\"</code>, <code>\"next_worker\"</code>, <code>\"available_worker\"</code>, <code>\"next_available_worker\"</code></li> <li>Default: <code>\"best_worker\"</code></li> <li>Example: <code>strategy = \"available_worker\"</code></li> </ul> <p>Defines worker selection strategy. Consult worker_pool documentation for details.</p>"},{"location":"configuration/outgoing-connections/#outgoing_poolsworkers","title":"<code>outgoing_pools.*.*.workers</code>","text":"<ul> <li>Syntax: positive integer</li> <li>Default: 10 (20 for Cassandra pool)</li> <li>Example: <code>workers = 100</code></li> </ul> <p>Number of workers to be started by the pool.</p>"},{"location":"configuration/outgoing-connections/#outgoing_poolscall_timeout","title":"<code>outgoing_pools.*.*.call_timeout</code>","text":"<ul> <li>Syntax: positive integer</li> <li>Default: 5000 (60000 for RDBMS pool)</li> <li>Example: <code>call_timeout = 3000</code></li> </ul> <p>Number of milliseconds after which a call to the pool will time out.</p>"},{"location":"configuration/outgoing-connections/#connection-options","title":"Connection options","text":"<p>Options specific to a pool connection are defined in a subsection starting with <code>[outgoing_pools.*.*.connection]</code>. For example:</p> <pre><code>[outgoing_pools.rdbms.default]\n  scope = \"global\"\n  workers = 5\n\n  [outgoing_pools.rdbms.default.connection]\n  ...\n</code></pre>"},{"location":"configuration/outgoing-connections/#rdbms-options","title":"RDBMS options","text":""},{"location":"configuration/outgoing-connections/#outgoing_poolsrdbmsconnectiondriver","title":"<code>outgoing_pools.rdbms.*.connection.driver</code>","text":"<ul> <li>Syntax: string, one of <code>\"pgsql\"</code>, <code>\"mysql\"</code> or <code>\"odbc\"</code> (a supported driver)</li> <li>Default: none - this option is mandatory</li> <li>Example: <code>driver = \"psgql\"</code></li> </ul> <p>Selects the driver for RDBMS connection. The choice of a driver impacts the set of available options.</p>"},{"location":"configuration/outgoing-connections/#outgoing_poolsrdbmsconnectionkeepalive_interval","title":"<code>outgoing_pools.rdbms.*.connection.keepalive_interval</code>","text":"<ul> <li>Syntax: positive integer</li> <li>Default: not set - disabled by default</li> <li>Example: <code>keepalive_interval = 30</code></li> </ul> <p>When enabled, MongooseIM will send <code>SELECT 1</code>query through every DB connection at given interval to keep them open. This option should be used to ensure that database connections are restarted after they became broken (e.g. due to a database restart or a load balancer dropping connections). Currently, not every network-related error returned from a database driver to a regular query will imply a connection restart.</p>"},{"location":"configuration/outgoing-connections/#outgoing_poolsrdbmsconnectionquery_timeout","title":"<code>outgoing_pools.rdbms.*.connection.query_timeout</code>","text":"<ul> <li>Syntax: positive integer, in milliseconds</li> <li>Default: 5000</li> <li>Example: <code>query_timeout = 5000</code></li> </ul> <p>How long MongooseIM will wait for the database to answer for a query.</p>"},{"location":"configuration/outgoing-connections/#outgoing_poolsrdbmsconnectionmax_start_interval","title":"<code>outgoing_pools.rdbms.*.connection.max_start_interval</code>","text":"<ul> <li>Syntax: positive integer</li> <li>Default: 30</li> <li>Example: <code>max_start_interval = 30</code></li> </ul> <p>When MongooseIM fails to connect to the DB, it retries with an exponential backoff. This option limits the backoff time for faster reconnection when the DB becomes reachable again.</p>"},{"location":"configuration/outgoing-connections/#options-for-pgsql-and-mysql","title":"Options for <code>pgsql</code> and <code>mysql</code>","text":""},{"location":"configuration/outgoing-connections/#outgoing_poolsrdbmsconnectionhost","title":"<code>outgoing_pools.rdbms.*.connection.host</code>","text":"<ul> <li>Syntax: string</li> <li>Default: no default; required for <code>pgsql</code> and <code>mysql</code></li> <li>Example: <code>host = \"localhost\"</code></li> </ul>"},{"location":"configuration/outgoing-connections/#outgoing_poolsrdbmsconnectionport","title":"<code>outgoing_pools.rdbms.*.connection.port</code>","text":"<ul> <li>Syntax: string</li> <li>Default: <code>5432</code> for <code>pgsql</code>; <code>3306</code> for <code>mysql</code></li> <li>Example: <code>port = 5343</code></li> </ul>"},{"location":"configuration/outgoing-connections/#outgoing_poolsrdbmsconnectiondatabase","title":"<code>outgoing_pools.rdbms.*.connection.database</code>","text":"<ul> <li>Syntax: string</li> <li>Default: no default; required for <code>pgsql</code> and <code>mysql</code></li> <li>Example: <code>database = \"mim-db\"</code></li> </ul>"},{"location":"configuration/outgoing-connections/#outgoing_poolsrdbmsconnectionusername","title":"<code>outgoing_pools.rdbms.*.connection.username</code>","text":"<ul> <li>Syntax: string</li> <li>Default: no default; required for <code>pgsql</code> and <code>mysql</code></li> <li>Example: <code>username = \"mim-user\"</code></li> </ul>"},{"location":"configuration/outgoing-connections/#outgoing_poolsrdbmsconnectionpassword","title":"<code>outgoing_pools.rdbms.*.connection.password</code>","text":"<ul> <li>Syntax: string</li> <li>Default: no default; required for <code>pgsql</code> and <code>mysql</code></li> <li>Example: <code>password = \"mim-password\"</code></li> </ul> <p>To enable TLS, you need to include the TLS section in the connection options. There is one additonal option for PostgreSQL:</p>"},{"location":"configuration/outgoing-connections/#outgoing_poolsrdbmsconnectiontlsrequired","title":"<code>outgoing_pools.rdbms.*.connection.tls.required</code>","text":"<ul> <li>Syntax: boolean</li> <li>Default: <code>false</code></li> <li>Example: <code>tls.required = true</code></li> </ul> <p>This option can be used to enforce a TLS connection.</p>"},{"location":"configuration/outgoing-connections/#odbc-options","title":"ODBC options","text":""},{"location":"configuration/outgoing-connections/#outgoing_poolsrdbmsconnectionsettings","title":"<code>outgoing_pools.rdbms.*.connection.settings</code>","text":"<ul> <li>Syntax: string</li> <li>Default: no default; required if the <code>\"odbc\"</code> driver is specified</li> <li>Example: <code>settings = \"DSN=mydb\"</code></li> </ul> <p>ODBC - specific string defining connection parameters.</p>"},{"location":"configuration/outgoing-connections/#odbc-ssl-connection-setup","title":"ODBC SSL connection setup","text":"<p>If you've configured MongooseIM to use an ODBC driver, then the SSL options, along other connection options, should be present in the <code>~/.odbc.ini</code> file.</p> <p>To enable SSL connection the <code>sslmode</code> option needs to be set to <code>verify-full</code>. Additionally, you can provide the path to the CA certificate using the <code>sslrootcert</code> option.</p>"},{"location":"configuration/outgoing-connections/#example-odbcini-configuration","title":"Example ~/.odbc.ini configuration","text":"<pre><code>[mydb]\nDriver      = ...\nServerName  = ...\nPort        = ...\n...\nsslmode     = verify-full\nsslrootcert = /path/to/ca/cert\n</code></pre>"},{"location":"configuration/outgoing-connections/#http-options","title":"HTTP options","text":""},{"location":"configuration/outgoing-connections/#outgoing_poolshttpconnectionhost","title":"<code>outgoing_pools.http.*.connection.host</code>","text":"<ul> <li>Syntax: <code>\"http[s]://string[:integer]\"</code></li> <li>Default: no default; this option is mandatory</li> <li>Example: <code>host = \"https://server.com:879\"</code></li> </ul>"},{"location":"configuration/outgoing-connections/#outgoing_poolshttpconnectionpath_prefix","title":"<code>outgoing_pools.http.*.connection.path_prefix</code>","text":"<ul> <li>Syntax: string</li> <li>Default: <code>\"/\"</code></li> <li>Example: <code>path_prefix = \"/api/auth/\"</code></li> </ul> <p>Initial part of path which will be common to all calls. Prefix will be automatically prepended to path specified by a call to the pool.</p>"},{"location":"configuration/outgoing-connections/#outgoing_poolshttpconnectionrequest_timeout","title":"<code>outgoing_pools.http.*.connection.request_timeout</code>","text":"<ul> <li>Syntax: positive integer</li> <li>Default: <code>2000</code> (milliseconds)</li> <li>Example: <code>request_timeout = 5000</code></li> </ul> <p>Number of milliseconds after which http call to the server will time out. It should be lower than <code>call_timeout</code> set at the pool level.</p> <p>To enable TLS, you need to include the TLS section in the connection options.</p>"},{"location":"configuration/outgoing-connections/#redis-specific-options","title":"Redis-specific options","text":"<p>Redis can be used as a session manager backend. Global distribution (implemented in <code>mod_global_distrib</code>) requires Redis pool.</p> <p>There are two important limitations:</p> <ul> <li>for a session backend, the <code>Tag</code> parameter has to be equal to <code>default</code></li> <li><code>redis</code> backend is not compatible with <code>available_worker</code> strategy.</li> </ul>"},{"location":"configuration/outgoing-connections/#outgoing_poolsredisconnectionhost","title":"<code>outgoing_pools.redis.*.connection.host</code>","text":"<ul> <li>Syntax: string</li> <li>Default: <code>\"127.0.0.1\"</code></li> <li>Example: <code>host = \"redis.local\"</code></li> </ul>"},{"location":"configuration/outgoing-connections/#outgoing_poolsredisconnectionport","title":"<code>outgoing_pools.redis.*.connection.port</code>","text":"<ul> <li>Syntax: integer, between 0 and 65535, non-inclusive</li> <li>Default: <code>6379</code></li> <li>Example: <code>port = 9876</code></li> </ul>"},{"location":"configuration/outgoing-connections/#outgoing_poolsredisconnectiondatabase","title":"<code>outgoing_pools.redis.*.connection.database</code>","text":"<ul> <li>Syntax: non-negative integer</li> <li>Default: <code>0</code></li> <li>Example: <code>database = 2</code></li> </ul> <p>Logical database index (zero-based).</p>"},{"location":"configuration/outgoing-connections/#outgoing_poolsredisconnectionpassword","title":"<code>outgoing_pools.redis.*.connection.password</code>","text":"<ul> <li>Syntax: string</li> <li>Default: <code>\"\"</code></li> <li>Example: <code>password = \"topsecret\"</code></li> </ul>"},{"location":"configuration/outgoing-connections/#cassandra-options","title":"Cassandra options","text":""},{"location":"configuration/outgoing-connections/#outgoing_poolscassandraconnectionservers","title":"<code>outgoing_pools.cassandra.*.connection.servers</code>","text":"<ul> <li>Syntax: a TOML array of tables containing keys <code>\"host\"</code> and <code>\"port\"</code></li> <li>Default: <code>[{host = \"localhost\", port = 9042}]</code></li> <li>Example: <code>servers = [{host = \"host_one\", port = 9042}, {host = \"host_two\", port = 9042}]</code></li> </ul>"},{"location":"configuration/outgoing-connections/#outgoing_poolscassandraconnectionkeyspace","title":"<code>outgoing_pools.cassandra.*.connection.keyspace</code>","text":"<ul> <li>Syntax: string</li> <li>Default: <code>\"mongooseim\"</code></li> <li>Example: <code>keyspace = \"big_mongooseim_database\"</code></li> </ul> <p>To use plain text authentication (using cqerl_auth_plain_handler module):</p>"},{"location":"configuration/outgoing-connections/#outgoing_poolscassandraconnectionauthplainusername","title":"<code>outgoing_pools.cassandra.*.connection.auth.plain.username</code>","text":"<ul> <li>Syntax: string</li> <li>Default: none, this option is mandatory</li> <li>Example: <code>username = \"auser\"</code></li> </ul>"},{"location":"configuration/outgoing-connections/#outgoing_poolscassandraconnectionauthplainpassword","title":"<code>outgoing_pools.cassandra.*.connection.auth.plain.password</code>","text":"<ul> <li>Syntax: string</li> <li>Default: none, this option is mandatory</li> <li>Example: <code>password = \"somesecretpassword\"</code></li> </ul> <p>Support for other authentication modules may be added in the future.</p> <p>To enable TLS, you need to include the TLS section in the connection options.</p>"},{"location":"configuration/outgoing-connections/#elasticsearch-options","title":"Elasticsearch options","text":"<p>Currently, only one pool tagged <code>default</code> can be used.</p>"},{"location":"configuration/outgoing-connections/#outgoing_poolselasticdefaultconnectionhost","title":"<code>outgoing_pools.elastic.default.connection.host</code>","text":"<ul> <li>Syntax: non-empty string</li> <li>Default: <code>\"localhost\"</code></li> <li>Example: <code>host = \"otherhost\"</code></li> </ul>"},{"location":"configuration/outgoing-connections/#outgoing_poolselasticdefaultconnectionport","title":"<code>outgoing_pools.elastic.default.connection.port</code>","text":"<ul> <li>Syntax: positive integer</li> <li>Default: <code>9200</code></li> <li>Example: <code>port = 9211</code></li> </ul> <p>MongooseIM uses inaka/tirerl library to communicate with ElasticSearch. This library uses <code>worker_pool</code> in a bit different way than MongooseIM does, so the following options are not configurable:</p> <ul> <li><code>call_timeout</code> (infinity)</li> <li>worker selection strategy (<code>available_worker</code> or what's set as <code>default_strategy</code> of <code>worker_pool</code> application)</li> </ul> <p>The only pool-related variable you can tweak is thus the number of workers.</p> <p>Run the following function in the MongooseIM shell to verify that the connection has been established:</p> <pre><code>1&gt; mongoose_elasticsearch:health().\n{ok,#{&lt;&lt;\"active_primary_shards\"&gt;&gt; =&gt; 15,&lt;&lt;\"active_shards\"&gt;&gt; =&gt; 15,\n       &lt;&lt;\"active_shards_percent_as_number\"&gt;&gt; =&gt; 50.0,\n       &lt;&lt;\"cluster_name\"&gt;&gt; =&gt; &lt;&lt;\"docker-cluster\"&gt;&gt;,\n       &lt;&lt;\"delayed_unassigned_shards\"&gt;&gt; =&gt; 0,\n       &lt;&lt;\"initializing_shards\"&gt;&gt; =&gt; 0,\n       &lt;&lt;\"number_of_data_nodes\"&gt;&gt; =&gt; 1,\n       &lt;&lt;\"number_of_in_flight_fetch\"&gt;&gt; =&gt; 0,\n       &lt;&lt;\"number_of_nodes\"&gt;&gt; =&gt; 1,\n       &lt;&lt;\"number_of_pending_tasks\"&gt;&gt; =&gt; 0,\n       &lt;&lt;\"relocating_shards\"&gt;&gt; =&gt; 0,\n       &lt;&lt;\"status\"&gt;&gt; =&gt; &lt;&lt;\"yellow\"&gt;&gt;,\n       &lt;&lt;\"task_max_waiting_in_queue_millis\"&gt;&gt; =&gt; 0,\n       &lt;&lt;\"timed_out\"&gt;&gt; =&gt; false,\n       &lt;&lt;\"unassigned_shards\"&gt;&gt; =&gt; 15}}\n</code></pre> <p>Note that the output might differ based on your ElasticSearch cluster configuration.</p>"},{"location":"configuration/outgoing-connections/#rabbitmq-options","title":"RabbitMQ options","text":"<p>The <code>Tag</code> parameter must be set to <code>event_pusher</code> in order to be able to use the pool for <code>mod_event_pusher_rabbit</code>. Any other <code>Tag</code> can be used for other purposes.</p>"},{"location":"configuration/outgoing-connections/#outgoing_poolsrabbitconnectionhost","title":"<code>outgoing_pools.rabbit.*.connection.host</code>","text":"<ul> <li>Syntax: string</li> <li>Default: <code>\"localhost\"</code></li> <li>Example: <code>host = \"anotherhost\"</code></li> </ul>"},{"location":"configuration/outgoing-connections/#outgoing_poolsrabbitconnectionport","title":"<code>outgoing_pools.rabbit.*.connection.port</code>","text":"<ul> <li>Syntax: integer</li> <li>Default: <code>5672</code></li> <li>Example: <code>port = 4561</code></li> </ul>"},{"location":"configuration/outgoing-connections/#outgoing_poolsrabbitconnectionusername","title":"<code>outgoing_pools.rabbit.*.connection.username</code>","text":"<ul> <li>Syntax: string</li> <li>Default: <code>\"guest\"</code></li> <li>Example: <code>username = \"corpop\"</code></li> </ul>"},{"location":"configuration/outgoing-connections/#outgoing_poolsrabbitconnectionpassword","title":"<code>outgoing_pools.rabbit.*.connection.password</code>","text":"<ul> <li>Syntax: string</li> <li>Default: <code>\"guest\"</code></li> <li>Example: <code>password = \"guest\"</code></li> </ul>"},{"location":"configuration/outgoing-connections/#outgoing_poolsrabbitconnectionconfirms_enabled","title":"<code>outgoing_pools.rabbit.*.connection.confirms_enabled</code>","text":"<ul> <li>Syntax: boolean</li> <li>Default: <code>false</code></li> <li>Example: <code>confirms_enabled = false</code></li> </ul> <p>Enables/disables one-to-one publishers confirms.</p>"},{"location":"configuration/outgoing-connections/#outgoing_poolsrabbitconnectionmax_worker_queue_len","title":"<code>outgoing_pools.rabbit.*.connection.max_worker_queue_len</code>","text":"<ul> <li>Syntax: non-negative integer or <code>\"infinity\"</code></li> <li>Default: <code>1000</code></li> <li>Example: <code>max_worker_queue_len = \"infinity\"</code></li> </ul> <p>Sets a limit of messages in a worker's mailbox above which the worker starts dropping the messages. If a worker message queue length reaches the limit, messages from the head of the queue are dropped until the queue length is again below the limit. Use <code>infinity</code> to disable.</p>"},{"location":"configuration/outgoing-connections/#ldap-options","title":"LDAP options","text":""},{"location":"configuration/outgoing-connections/#outgoing_poolsldapconnectionservers","title":"<code>outgoing_pools.ldap.*.connection.servers</code>","text":"<ul> <li>Syntax: an array of strings</li> <li>Default: <code>[\"localhost\"]</code></li> <li>Example: <code>servers = [\"ldap_one\", \"ldap_two\"]</code></li> </ul>"},{"location":"configuration/outgoing-connections/#outgoing_poolsldapconnectionport","title":"<code>outgoing_pools.ldap.*.connection.port</code>","text":"<ul> <li>Syntax: integer</li> <li>Default: <code>389</code> (or <code>636</code> if TLS is enabled)</li> <li>Example: <code>port = 800</code></li> </ul>"},{"location":"configuration/outgoing-connections/#outgoing_poolsldapconnectionroot_dn","title":"<code>outgoing_pools.ldap.*.connection.root_dn</code>","text":"<ul> <li>Syntax: string</li> <li>Default: empty string</li> <li>Example: <code>root_dn = \"cn=admin,dc=example,dc=com\"</code></li> </ul> <p>Leaving out this option makes it an anonymous connection, which most likely is what you want.</p>"},{"location":"configuration/outgoing-connections/#outgoing_poolsldapconnectionpassword","title":"<code>outgoing_pools.ldap.*.connection.password</code>","text":"<ul> <li>Syntax: string</li> <li>Default: empty string</li> <li>Example: <code>password = \"topsecret\"</code></li> </ul>"},{"location":"configuration/outgoing-connections/#outgoing_poolsldapconnectionconnect_interval","title":"<code>outgoing_pools.ldap.*.connection.connect_interval</code>","text":"<ul> <li>Syntax: positive integer</li> <li>Default: <code>10000</code></li> <li>Example: <code>connect_interval = 20000</code></li> </ul> <p>Reconnect interval after a failed connection.</p> <p>To enable TLS, you need to include the TLS section in the connection options.</p>"},{"location":"configuration/outgoing-connections/#tls-options","title":"TLS options","text":"<p>TLS options for a given pool type/tag pair are defined in a subsection starting with <code>[outgoing_pools.[pool_type].[pool_tag].connection.tls]</code>.</p>"},{"location":"configuration/outgoing-connections/#outgoing_poolsconnectiontlsverify_mode","title":"<code>outgoing_pools.*.*.connection.tls.verify_mode</code>","text":"<ul> <li>Syntax: string, one of: <code>\"peer\"</code>, <code>\"selfsigned_peer\"</code>, <code>\"none\"</code></li> <li>Default: <code>\"peer\"</code></li> <li>Example: <code>tls.verify_mode = \"none\"</code></li> </ul> <p>Specifies the way server certificate verification works:</p> <ul> <li><code>peer</code> - makes sure the server certificate is valid and signed by a trusted CA. Requires a valid <code>cacertfile</code>.</li> <li><code>selfsigned_peer</code> - makes sure the server certificate is valid, but allows self-signed certificates. Requires a valid <code>cacertfile</code>.</li> <li><code>none</code> - server certificate is not checked.</li> </ul>"},{"location":"configuration/outgoing-connections/#outgoing_poolsconnectiontlscertfile","title":"<code>outgoing_pools.*.*.connection.tls.certfile</code>","text":"<ul> <li>Syntax: string, path in the file system</li> <li>Default: not set</li> <li>Example: <code>tls.certfile = \"server.pem\"</code></li> </ul> <p>Path to the X509 PEM file with a certificate. If the certificate is signed by an intermediate CA, you should specify here the whole CA chain by concatenating all public keys together.</p>"},{"location":"configuration/outgoing-connections/#outgoing_poolsconnectiontlscacertfile","title":"<code>outgoing_pools.*.*.connection.tls.cacertfile</code>","text":"<ul> <li>Syntax: string, path in the file system</li> <li>Default: not set</li> <li>Example: <code>tls.cacertfile = \"ca.pem\"</code></li> </ul> <p>Path to the X509 PEM file with a CA chain that will be used to verify clients. It won't have any effect if <code>verify_mode</code> is set to <code>\"none\"</code>.</p>"},{"location":"configuration/outgoing-connections/#outgoing_poolsconnectiontlskeyfile","title":"<code>outgoing_pools.*.*.connection.tls.keyfile</code>","text":"<ul> <li>Syntax: string, path in the file system</li> <li>Default: not set</li> <li>Example: <code>tls.keyfile = \"key.pem\"</code></li> </ul> <p>Path to the X509 PEM file with the private key.</p>"},{"location":"configuration/outgoing-connections/#outgoing_poolsconnectiontlspassword","title":"<code>outgoing_pools.*.*.connection.tls.password</code>","text":"<ul> <li>Syntax: string</li> <li>Default: not set</li> <li>Example: <code>tls.password = \"secret\"</code></li> </ul> <p>Password to the X509 PEM file with the private key.</p>"},{"location":"configuration/outgoing-connections/#outgoing_poolsconnectiontlsciphers","title":"<code>outgoing_pools.*.*.connection.tls.ciphers</code>","text":"<ul> <li>Syntax: string with the OpenSSL cipher suite specification</li> <li>Default: not set, all supported cipher suites are accepted</li> <li>Example: <code>tls.ciphers = \"ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384\"</code></li> </ul> <p>Cipher suites to use. Please refer to the OpenSSL documentation for the cipher string format. For allowed values, see the Erlang/OTP SSL documentation.</p>"},{"location":"configuration/outgoing-connections/#outgoing_poolsconnectiontlsversions","title":"<code>outgoing_pools.*.*.connection.tls.versions</code>","text":"<ul> <li>Syntax: list of strings</li> <li>Default: not set, all supported versions are accepted</li> <li>Example: <code>tls.versions = [\"tlsv1.2\", \"tlsv1.3\"]</code></li> </ul> <p>TLS protocol versions to use. For allowed values, see the Erlang/OTP SSL documentation</p>"},{"location":"configuration/outgoing-connections/#outgoing_poolsconnectiontlsserver_name_indicationenabled","title":"<code>outgoing_pools.*.*.connection.tls.server_name_indication.enabled</code>","text":"<ul> <li>Syntax: boolean</li> <li>Default: <code>\"true\"</code>, but effective only if <code>verify_mode</code> is not <code>\"none\"</code>.</li> <li>Example: <code>tls.server_name_indication.enabled = false</code></li> </ul> <p>Enables SNI extension to TLS protocol. You can set it to <code>false</code> to disable the extension.</p>"},{"location":"configuration/outgoing-connections/#outgoing_poolsconnectiontlsserver_name_indicationhost","title":"<code>outgoing_pools.*.*.connection.tls.server_name_indication.host</code>","text":"<ul> <li>Syntax: string</li> <li>Default: not set</li> <li>Example: <code>tls.server_name_indication.host = \"domain.com\"</code></li> </ul> <p>Domain against which the certificates will be checked, using SNI.</p>"},{"location":"configuration/outgoing-connections/#outgoing_poolsconnectiontlsserver_name_indicationprotocol","title":"<code>outgoing_pools.*.*.connection.tls.server_name_indication.protocol</code>","text":"<ul> <li>Syntax: string, one of <code>\"default\"</code> or <code>\"https\"</code></li> <li>Default: \"default\"</li> <li>Example: <code>tls.server_name_indication_protocol = \"https\"</code></li> </ul> <p>See the OTP documentation for an explanation. You'd usually want to set it to <code>\"https\"</code> for reasons described in the security recommendations.</p>"},{"location":"configuration/release-options/","title":"Release Options","text":"<p>When building a MongooseIM release from source code, the initial configuration files are generated with options taken from the <code>vars-toml.config</code> file found in the <code>[MongooseIM root]/rel/</code> directory. You can change the values in this file to affect the resulting <code>vm.args</code> and <code>mongooseim.toml</code> files.</p> <p>The file contains erlang tuples terminated with period ('.'). For users not familiar with Erlang syntax, here is a quick cheat sheet:</p> <ul> <li>Each config option (key and value) is a tuple. Tuples are (Erlangers, forgive us the simplification) other Erlang terms separated with commas and enclosed in curly brackets ({}).</li> <li>Tuples (at least the top-level ones) in <code>vars.config</code> are always 2-element.</li> <li>The first element of each tuple is the name (Erlang atom).</li> <li>The second element is a quoted string. Any quotes (<code>\"</code>) inside the string should be escaped with a backslash (<code>\\</code>).</li> </ul> <p>There are two types of options: parameters and blocks:</p> <ul> <li>a parameter is inserted into the value of an already defined option. Parameters are mandatory - a valid value has to be provided.</li> <li>a block can be an empty string, one line or multiple lines, defining zero, one or more options. Blocks are optional - the default is an empty string.</li> </ul>"},{"location":"configuration/release-options/#vmargs-options","title":"vm.args options","text":"<p>These options are inserted into the <code>rel/files/vm.args</code> template.</p>"},{"location":"configuration/release-options/#node_name","title":"node_name","text":"<ul> <li>Type: parameter</li> <li>Option: value of <code>-sname</code> in vm.args</li> <li>Syntax: Erlang node name: <code>name@host</code></li> <li>Example: <code>{node_name, \"mongooseim@localhost\"}.</code></li> </ul>"},{"location":"configuration/release-options/#highload_vm_args","title":"highload_vm_args","text":"<ul> <li>Type: block</li> <li>Option: arguments in vm.args: <code>+K</code>, <code>+A</code>, <code>+P</code>, <code>-env ERL_MAX_PORTS</code></li> <li>Syntax: command-line arguments</li> <li>Example: <code>{highload_vm_args, \"+P 10000000 -env ERL_MAX_PORTS 250000\"}.</code></li> </ul>"},{"location":"configuration/release-options/#epmd_module","title":"epmd_module","text":"<p>Allows to set EPMD module to <code>mongoose_epmd</code> in case CETS is used with RDBMS backend to enable getting IP addresses of the remote nodes using RDBMS instead of the default resolver.</p> <ul> <li>Type: parameter</li> <li>Option: value of <code>-epmd_module</code> in vm.args</li> <li>Syntax: Erlang module name: <code>mongoose_epmd</code></li> <li>Example: <code>{epmd_module, \"mongoose_epmd\"}.</code></li> </ul>"},{"location":"configuration/release-options/#toml-options","title":"TOML Options","text":"<p>These options are inserted into the <code>rel/files/mongooseim.toml</code> template.</p>"},{"location":"configuration/release-options/#hosts","title":"hosts","text":"<ul> <li>Type: parameter</li> <li>Option: <code>general.hosts</code></li> <li>Syntax: comma-separated list of strings</li> <li>Example: <code>{hosts, \"\\\"localhost\\\", \\\"domain2\\\"\"}.</code></li> </ul>"},{"location":"configuration/release-options/#host_config","title":"host_config","text":"<ul> <li>Type: block</li> <li>Option: <code>host_config</code></li> <li>Syntax: TOML block, one or more <code>[[host_config]]</code> sections.</li> <li>Example:</li> </ul> <pre><code>{host_config, \"\n[[host_config]]\n  host = \\\"anonymous.localhost\\\"\n\n  [host_config.auth]\n    methods = [\\\"anonymous\\\"]\n\"}.\n</code></pre>"},{"location":"configuration/release-options/#auth_ldap","title":"auth_ldap","text":"<ul> <li>Type: block</li> <li>Option: <code>auth.ldap</code></li> <li>Syntax: TOML block, the <code>[auth.ldap]</code> subsection</li> <li>Example:</li> </ul> <pre><code>{auth_ldap, \"\n  [auth.ldap]\n    base = \\\"ou=Users,dc=esl,dc=com\\\"\n    filter = \\\"(objectClass=inetOrgPerson)\\\"\n\"}.\n</code></pre>"},{"location":"configuration/release-options/#all_metrics_are_global","title":"all_metrics_are_global","text":"<ul> <li>Type: parameter</li> <li>Option: <code>general.all_metrics_are_global</code></li> <li>Syntax: boolean</li> <li>Example: <code>{all_metrics_are_global, \"false\"}.</code></li> </ul>"},{"location":"configuration/release-options/#s2s_addr","title":"s2s_addr","text":"<ul> <li>Type: block</li> <li>Option: <code>auth.s2s.address</code></li> <li>Syntax: TOML key-value pair with the <code>address</code> option</li> <li>Example:</li> </ul> <pre><code>{s2s_addr, \"\n  address = [\n    {host = \\\"my.xmpp.org\\\", ip_address = \\\"192.0.100.1\\\"},\n    {host = \\\"your.xmpp.org\\\", ip_address = \\\"192.0.1.100\\\", port = 5271}\n  ]\n\"}.\n</code></pre>"},{"location":"configuration/release-options/#s2s_default_policy","title":"s2s_default_policy","text":"<ul> <li>Type: parameter</li> <li>Option: <code>s2s.default_policy</code></li> <li>Syntax: string</li> <li>Example: <code>{s2s_default_policy, \"\\\"deny\\\"\"}.</code></li> </ul>"},{"location":"configuration/release-options/#outgoing_s2s_port","title":"outgoing_s2s_port","text":"<ul> <li>Type: parameter</li> <li>Option: <code>s2s.outgoing.port</code></li> <li>Syntax: integer</li> <li>Example: <code>{outgoing_s2s_port, \"5269\"}.</code></li> </ul>"},{"location":"configuration/release-options/#c2s_port","title":"c2s_port","text":"<ul> <li>Type: parameter</li> <li>Option: <code>listen.c2s.port</code></li> <li>Syntax: integer</li> <li>Example: <code>{c2s_port, \"5222\"}.</code></li> </ul>"},{"location":"configuration/release-options/#s2s_port","title":"s2s_port","text":"<ul> <li>Type: parameter</li> <li>Option: <code>listen.s2s.port</code></li> <li>Syntax: integer</li> <li>Example: <code>{s2s_port, \"5269\"}.</code></li> </ul>"},{"location":"configuration/release-options/#cowboy_port","title":"cowboy_port","text":"<ul> <li>Type: parameter</li> <li>Option: <code>listen.http.port</code></li> <li>Syntax: integer</li> <li>Example: <code>{http_port, \"5280\"}.</code></li> </ul>"},{"location":"configuration/release-options/#mod_last","title":"mod_last","text":"<ul> <li>Type: block</li> <li>Option: <code>modules.mod_last</code></li> <li>Syntax: TOML section: <code>[modules.mod_last]</code></li> <li>Example: <code>{mod_last, \"[modules.mod_last]\"}.</code></li> </ul>"},{"location":"configuration/release-options/#mod_offline","title":"mod_offline","text":"<ul> <li>Type: block</li> <li>Option: <code>modules.mod_offline</code></li> <li>Syntax: TOML section: <code>[modules.mod_offline]</code></li> <li>Example:</li> </ul> <pre><code>{mod_offline, \"\n[modules.mod_offline]\n  access_max_user_messages = \\\"max_user_offline_messages\\\"\n\"}.\n</code></pre>"},{"location":"configuration/release-options/#mod_privacy","title":"mod_privacy","text":"<ul> <li>Type: block</li> <li>Option: <code>modules.mod_privacy</code></li> <li>Syntax: TOML section: <code>[modules.mod_privacy]</code></li> <li>Example: <code>{mod_privacy, \"[modules.mod_privacy]\"}.</code></li> </ul>"},{"location":"configuration/release-options/#mod_private","title":"mod_private","text":"<ul> <li>Type: block</li> <li>Option: <code>modules.mod_private</code></li> <li>Syntax: TOML section: <code>[modules.mod_private]</code></li> <li>Example: <code>{mod_private, \"[modules.mod_private]\"}.</code></li> </ul>"},{"location":"configuration/release-options/#mod_roster","title":"mod_roster","text":"<ul> <li>Type: block</li> <li>Option: <code>modules.mod_roster</code></li> <li>Syntax: TOML section: <code>[modules.mod_roster]</code></li> <li>Example: <code>{mod_roster, \"[modules.mod_roster]\"}.</code></li> </ul>"},{"location":"configuration/release-options/#mod_vcard","title":"mod_vcard","text":"<ul> <li>Type: block</li> <li>Option: <code>modules.mod_vcard</code></li> <li>Syntax: TOML section: <code>[modules.mod_vcard]</code></li> <li>Example:</li> </ul> <pre><code>{mod_vcard, \"\n[modules.mod_vcard]\n  host = \\\"vjud.@HOST@\\\"\n\"}.\n</code></pre>"},{"location":"configuration/release-options/#sm_backend","title":"sm_backend","text":"<ul> <li>Type: parameter</li> <li>Option: <code>general.sm_backend</code></li> <li>Syntax: string</li> <li>Example: <code>{sm_backend, \"\\\"redis\\\"\"}.</code></li> </ul>"},{"location":"configuration/release-options/#s2s_backend","title":"s2s_backend","text":"<ul> <li>Type: parameter</li> <li>Option: <code>general.s2s_backend</code></li> <li>Syntax: string</li> <li>Example: <code>{s2s_backend, \"\\\"mnesia\\\"\"}.</code></li> </ul>"},{"location":"configuration/release-options/#tls_config","title":"tls_config","text":"<ul> <li>Type: block</li> <li>Option: <code>listen.c2s.tls.*</code></li> <li>Syntax: TOML key-value pairs</li> <li>Example:</li> </ul> <pre><code>{tls_config, \"\n  tls.certfile = \\\"priv/ssl/fake_server.pem\\\"\n  tls.mode = \\\"starttls\\\"\n\"}.\n</code></pre>"},{"location":"configuration/release-options/#auth_method","title":"auth_method","text":"<ul> <li>Type: parameter</li> <li>Option: <code>auth.methods</code></li> <li>Syntax: comma-separated list of strings</li> <li>Example: <code>{auth_method, \"\\\"internal\\\"\"}.</code></li> </ul>"},{"location":"configuration/s2s/","title":"Options: S2S","text":"<p>The <code>s2s</code> section contains options configuring the server-to-server connections used to communicate with other federated XMPP servers.</p> <p>Warning</p> <p>Server-to-server connections do not support dynamic domains. Do not use dynamic domains when using <code>s2s</code>.</p>"},{"location":"configuration/s2s/#general-options","title":"General options","text":"<p>These options affect both incoming and outgoing S2S connections.</p>"},{"location":"configuration/s2s/#s2sdefault_policy","title":"<code>s2s.default_policy</code>","text":"<ul> <li>Syntax: string, <code>\"allow\"</code> or <code>\"deny\"</code></li> <li>Default: <code>\"allow\"</code></li> <li>Example: <code>default_policy = \"deny\"</code></li> </ul> <p>Default policy for opening new S2S connections to/from remote servers.</p>"},{"location":"configuration/s2s/#s2shost_policy","title":"<code>s2s.host_policy</code>","text":"<ul> <li>Syntax: array of TOML tables with the following mandatory content:<ul> <li><code>host</code> - string, host name</li> <li><code>policy</code> - string, <code>\"allow\"</code> or <code>\"deny\"</code></li> </ul> </li> <li>Default: not set, <code>default_policy</code> is used</li> <li>Example:</li> </ul> <pre><code>  host_policy = [\n    {host = \"good.xmpp.org\", policy = \"allow\"},\n    {host = \"bad.xmpp.org\", policy = \"deny\"}\n  ]\n</code></pre> <p>Policy for opening new connections to/from specific remote servers.</p>"},{"location":"configuration/s2s/#s2suse_starttls","title":"<code>s2s.use_starttls</code>","text":"<ul> <li>Syntax: string, one of <code>\"false\"</code>, <code>\"optional\"</code>, <code>\"required\"</code>, <code>\"required_trusted\"</code></li> <li>Default: <code>\"false\"</code></li> <li>Example: <code>use_starttls = \"required\"</code></li> </ul> <p>Allows to configure StartTLS for incoming and outgoing S2S connections:</p> <ul> <li><code>false</code> - StartTLS is disabled,</li> <li><code>optional</code> - StartTLS is supported,</li> <li><code>required</code> - StartTLS is supported and enforced,</li> <li><code>required_trusted</code> - StartTLS is supported and enforced with certificate verification.</li> </ul>"},{"location":"configuration/s2s/#s2scertfile","title":"<code>s2s.certfile</code>","text":"<ul> <li>Syntax: string, path in the file system</li> <li>Default: not set</li> <li>Example: <code>certfile = \"cert.pem\"</code></li> </ul> <p>Path to the X509 PEM file with a certificate and a private key inside (not protected by any password). Required if <code>use_starttls</code> is not <code>false</code>.</p>"},{"location":"configuration/s2s/#s2sshared","title":"<code>s2s.shared</code>","text":"<ul> <li>Syntax: string</li> <li>Default: 10 strong random bytes, hex-encoded</li> <li>Example: <code>shared = \"82gc8b23ct7824\"</code></li> </ul> <p>S2S shared secret used in the Server Dialback extension.</p>"},{"location":"configuration/s2s/#outgoing-connections","title":"Outgoing connections","text":"<p>The options listed below affect only the outgoing S2S connections.</p>"},{"location":"configuration/s2s/#s2saddress","title":"<code>s2s.address</code>","text":"<ul> <li>Syntax: array of TOML tables with the following content:<ul> <li><code>host</code> - string, mandatory, host name</li> <li><code>ip_address</code> - string, mandatory, IP address</li> <li><code>port</code> - integer, optional, port number</li> </ul> </li> <li>Default: not set</li> <li>Example:</li> </ul> <pre><code>  address = [\n    {host = \"my.xmpp.org\", ip_address = \"192.0.100.1\"},\n    {host = \"your.xmpp.org\", ip_address = \"192.0.1.100\", port = 5271}\n  ]\n</code></pre> <p>This option defines IP addresses and port numbers for specific non-local XMPP domains, allowing to override the DNS lookup for outgoing S2S connections.</p>"},{"location":"configuration/s2s/#s2sciphers","title":"<code>s2s.ciphers</code>","text":"<ul> <li>Syntax: string</li> <li>Default: <code>\"TLSv1.2:TLSv1.3\"</code></li> <li>Example: <code>ciphers = \"TLSv1.2\"</code></li> </ul> <p>Defines a list of accepted SSL ciphers for outgoing S2S connections. Please refer to the OpenSSL documentation for the cipher string format.</p>"},{"location":"configuration/s2s/#s2smax_retry_delay","title":"<code>s2s.max_retry_delay</code>","text":"<ul> <li>Syntax: positive integer</li> <li>Default: <code>300</code></li> <li>Example: <code>max_retry_delay = 300</code></li> </ul> <p>Specifies the maximum time in seconds that MongooseIM will wait until the next attempt to connect to a remote XMPP server. The delays between consecutive attempts will be doubled until this limit is reached.</p>"},{"location":"configuration/s2s/#s2soutgoingport","title":"<code>s2s.outgoing.port</code>","text":"<ul> <li>Syntax: integer, port number</li> <li>Default: <code>5269</code></li> <li>Example: <code>outgoing.port = 5270</code></li> </ul> <p>Defines the port to be used for outgoing S2S connections.</p>"},{"location":"configuration/s2s/#s2soutgoingip_versions","title":"<code>s2s.outgoing.ip_versions</code>","text":"<ul> <li>Syntax: array of integers (IP versions): <code>4</code> or <code>6</code></li> <li>Default: <code>[4, 6]</code></li> <li>Example: <code>outgoing.ip_versions = [6]</code></li> </ul> <p>Specifies the order of IP address families to try when establishing an outgoing S2S connection.</p>"},{"location":"configuration/s2s/#s2soutgoingconnection_timeout","title":"<code>s2s.outgoing.connection_timeout</code>","text":"<ul> <li>Syntax: positive integer or the string <code>\"infinity\"</code></li> <li>Default: <code>10_000</code></li> <li>Example: <code>outgoing.connection_timeout = 5000</code></li> </ul> <p>Timeout (in milliseconds) for establishing an outgoing S2S connection.</p>"},{"location":"configuration/s2s/#s2sdnstimeout","title":"<code>s2s.dns.timeout</code>","text":"<ul> <li>Syntax: positive integer</li> <li>Default: <code>10</code></li> <li>Example: <code>dns.timeout = 30</code></li> </ul> <p>Timeout (in seconds) for DNS lookups when opening an outgoing S2S connection.</p>"},{"location":"configuration/s2s/#s2sdnsretries","title":"<code>s2s.dns.retries</code>","text":"<ul> <li>Syntax: positive integer</li> <li>Default: <code>2</code></li> <li>Example: <code>dns.retries = 1</code></li> </ul> <p>Number of DNS lookup attempts when opening an outgoing S2S connection.</p>"},{"location":"configuration/shaper/","title":"Options: Shaper","text":"<p>The <code>shaper</code> section specifies traffic shapers used to limit the incoming XMPP traffic, providing a safety valve to protect the server. It can be used to prevent DoS attacks or to calm down too noisy clients.</p> <ul> <li>Syntax: each shaper is specified in a subsection starting with <code>[shaper.name]</code> where <code>name</code> is used to uniquely identify the shaper.</li> <li>Default: no default - each shaper needs to be specified explicitly.</li> <li>Example: the <code>normal</code> shaper is used for the C2S connections.</li> </ul> <pre><code>[shaper.normal]\n  max_rate = 1000\n</code></pre>"},{"location":"configuration/shaper/#traffic-shaper-options","title":"Traffic shaper options","text":""},{"location":"configuration/shaper/#shapermaxrate","title":"<code>shaper.maxrate</code>","text":"<ul> <li>Syntax: positive integer</li> <li>Default: no default, this option is mandatory</li> <li>Example: <code>maxrate = 1000</code></li> </ul> <p>Defines the maximum accepted rate. For the shapers used by XMPP listeners this is the number of bytes per second, but there are shapers that use different units, e.g. MAM shapers.</p>"},{"location":"configuration/shaper/#examples","title":"Examples","text":"<p>The following examples show the typical shaper definitions.</p>"},{"location":"configuration/shaper/#c2s-shaper","title":"C2S Shaper","text":"<p>This is the typical definition of an XMPP shaper, which accepts the maximum data rate of 1 kbps. When the rate is exceeded, the receiver pauses before processing the next packet.</p> <pre><code>[shaper.normal]\n  max_rate = 1000\n</code></pre> <p>To make use of it, the corresponding rule should be defined in the <code>access</code> section. Finally, the C2S listener has to be configured to use the defined shaper - see the C2S Example.</p>"},{"location":"configuration/shaper/#s2s-shaper","title":"S2S Shaper","text":"<p>For S2S connections we need to increase the limit as they receive the accumulated traffic from multiple users - e.g. to 50 kbps:</p> <pre><code>[shaper.fast]\n  max_rate = 50_000\n</code></pre> <p>To make use of it, the corresponding rule should be defined in the <code>access</code> section. Finally, the C2S listener has to be configured to use the defined shaper - see the S2S Example.</p>"},{"location":"configuration/shaper/#mam-shapers","title":"MAM Shapers","text":"<p>These shapers limit the number of MAM operations per second (rather than bytes per second).</p> <pre><code>[shaper.mam_shaper]\n  max_rate = 1\n\n[shaper.mam_global_shaper]\n  max_rate = 1000\n</code></pre> <p>To make use of them, the corresponding rules should be defined in the <code>access</code> section.</p>"},{"location":"developers-guide/Basic-iq-handler/","title":"Basic IQ Handler","text":"<p>XMPP stands for Extensible Messaging and Presence Protocol. One way the protocol can be extended is by defining new types of queries, or IQs, that XMPP entities should be able to handle. It's usual that a XEP defining some XMPP extension contains some new type of IQ. IQs can also be used to implement custom features - required in a particular problem domain - but not defined by any official XEP.</p> <p>This tutorial will show you how to add and test a simple module with an IQ handler to MongooseIM. <code>gen_iq_handler</code> module provides functionality for registering IQ handlers for specific namespaces.</p>"},{"location":"developers-guide/Basic-iq-handler/#clone-build","title":"Clone &amp; build","text":"<p>See How-to-build for details on building MongooseIM from source code.</p>"},{"location":"developers-guide/Basic-iq-handler/#create-a-module-add-a-basic-iq-handler","title":"Create a module &amp; add a basic IQ handler","text":"<p>Go to <code>src/</code> and create a basic module implementing the <code>gen_mod</code> behaviour. In <code>start/2</code> register the IQ handler with a specified namespace, type (IQ processing policy), and function which will handle the incoming IQ stanza. In <code>stop/1</code> remove the registered handler. Implement the function for handler:</p> <ul> <li> <p>If the incoming IQ stanza is of type <code>get</code> or <code>set</code> it will be   returned with the type set to <code>result</code>.</p> </li> <li> <p>If the server doesn't recognise the hostname, the returning stanza   will be of type <code>error</code>.</p> </li> </ul> <p>See Server Rules for Processing XML Stanzas for more detailed information on the topic.</p> <pre><code>-module(mod_iq_example).\n-behaviour(gen_mod).\n\n-include(\"mongoose.hrl\").\n-include(\"jlib.hrl\").\n\n%% gen_mod callbacks\n-export([start/2, stop/1]).\n\n%% IQ handlers\n-export([process_iq/4]).\n\nstart(HostType, _Opts) -&gt;\n    gen_iq_handler:add_iq_handler_for_domain(HostType, &lt;&lt;\"erlang-solutions.com:example\"&gt;&gt;,\n                                  ejabberd_sm, process_iq, #{}, no_queue).\nstop(HostType) -&gt;\n    gen_iq_handler:remove_iq_handler_for_domain(HostType, &lt;&lt;\"erlang-solutions.com:example\"&gt;&gt;, ejabberd_sm).\n\nprocess_iq(_From, _To, Acc, IQ) -&gt;\n    IQRes = IQ#iq{type = result},\n    ?LOG_INFO(#{what =&gt; example_handler, acc =&gt; Acc, iq_result =&gt; IQRes}),\n    {Acc, IQRes}.\n</code></pre>"},{"location":"developers-guide/Basic-iq-handler/#test-your-handler","title":"Test your handler","text":"<p>Go to <code>big_tests/tests</code> and create a test suite for your handler. Implement the test case for success and failure. We will register two users, which are predefined in <code>$REPO/big_tests/test.config</code>:</p> <pre><code>{alice, [\n    {username, &lt;&lt;\"alicE\"&gt;&gt;},\n    {server, &lt;&lt;\"localhost\"&gt;&gt;},\n    {password, &lt;&lt;\"matygrysa\"&gt;&gt;}]},\n{alice_bis, [\n    {username, &lt;&lt;\"alicE\"&gt;&gt;},\n    {server, &lt;&lt;\"localhost.bis\"&gt;&gt;},\n    {host, &lt;&lt;\"localhost\"&gt;&gt;},\n    {password, &lt;&lt;\"matygrysa\"&gt;&gt;}]},\n</code></pre> <p>Our IQ handler will be enabled only for one domain, <code>localhost</code>. After sending an IQ stanza to <code>alice</code> we should get a result, but as our IQ handler is not enabled for <code>localhost.bis</code> domain, we should get an error.</p> <pre><code>-module(mod_iq_example_SUITE).\n\n-export([all/0,\n         groups/0,\n         suite/0,\n         init_per_suite/1,\n         end_per_suite/1,\n         init_per_group/2,\n         end_per_group/2,\n         init_per_testcase/2,\n         end_per_testcase/2]).\n\n%% Tests\n-export([should_return_result/1,\n         should_return_error/1]).\n\n-include_lib(\"exml/include/exml.hrl\").\n\n-define(EXAMPLE_NS, &lt;&lt;\"erlang-solutions.com:example\"&gt;&gt;).\n-define(USERS, [alice, alice_bis]).\n\n-import(distributed_helper, [mim/0,\n                             require_rpc_nodes/1,\n                             rpc/4]).\n\n%%--------------------------------------------------------------------\n%% Suite configuration\n%%--------------------------------------------------------------------\n\nall() -&gt;\n    [{group, mod_iq_example}].\n\ngroups() -&gt;\n    G = [{mod_iq_example, [], [should_return_result,\n                               should_return_error]}],\n    ct_helper:repeat_all_until_all_ok(G).\n\nsuite() -&gt;\n    require_rpc_nodes([mim]) ++ escalus:suite().\n\n%%--------------------------------------------------------------------\n%% Init &amp; teardown\n%%--------------------------------------------------------------------\n\ninit_per_suite(Config) -&gt;\n    Domain = ct:get_config({hosts, mim, domain}),\n    dynamic_modules:start(Domain, mod_iq_example, [no_opts]),\n    escalus:init_per_suite(Config).\n\nend_per_suite(Config) -&gt;\n    Domain = ct:get_config({hosts, mim, domain}),\n    dynamic_modules:stop(Domain, mod_iq_example),\n    escalus:end_per_suite(Config).\n\ninit_per_group(_, Config) -&gt;\n    escalus:create_users(Config, ?USERS).\n\nend_per_group(_, Config) -&gt;\n    escalus:delete_users(Config, ?USERS).\n\ninit_per_testcase(CaseName, Config) -&gt;\n    escalus:init_per_testcase(CaseName, Config).\n\nend_per_testcase(CaseName, Config) -&gt;\n    escalus:end_per_testcase(CaseName, Config).\n\n%%--------------------------------------------------------------------\n%% Tests\n%%--------------------------------------------------------------------\n\nshould_return_result(Config) -&gt;\n    %% given\n    escalus:story(Config, [{alice, 1}], fun(Alice) -&gt;\n        %% when sending a request\n        Req = escalus_stanza:iq_get(?EXAMPLE_NS, [#xmlel{name = &lt;&lt;\"example\"&gt;&gt;}]),\n        ct:pal(\"req: ~p\", [Req]),\n        escalus:send(Alice, Req),\n        %% then we should get a result\n        Res = escalus:wait_for_stanza(Alice),\n        ct:pal(\"res: ~p\", [Res]),\n        escalus:assert(is_iq, [&lt;&lt;\"result\"&gt;&gt;, ?EXAMPLE_NS], Res)\n    end).\n\nshould_return_error(Config) -&gt;\n    %% given\n    escalus:story(Config, [{alice_bis, 1}], fun(Alice) -&gt;\n        %% when sending a request with unregistered server\n        Req = escalus_stanza:iq_get(?EXAMPLE_NS, [#xmlel{name = &lt;&lt;\"example\"&gt;&gt;}]),\n        ct:pal(\"req: ~p\", [Req]),\n        escalus:send(Alice, Req),\n        %% then we should get an error\n        Res = escalus:wait_for_stanza(Alice),\n        ct:pal(\"res: ~p\", [Res]),\n        escalus:assert(is_iq, [&lt;&lt;\"error\"&gt;&gt;, ?EXAMPLE_NS], Res),\n        escalus:assert(is_error, [&lt;&lt;\"cancel\"&gt;&gt;, &lt;&lt;\"service-unavailable\"&gt;&gt;], Res)\n    end).\n</code></pre>"},{"location":"developers-guide/Basic-iq-handler/#run-it","title":"Run it","text":"<p>Compile &amp; generate releases for testing purposes according to How-to-build. Go to <code>$REPO/_build/mim1/rel/mongooseim</code> and start one MongooseIM node.</p> <p><pre><code>bin/mongooseim live\n</code></pre> Open up a new terminal window, go to <code>$REPO</code> and use the test runner. Run single suite with the already started <code>mim1</code> node.</p> <pre><code>source tools/test-runner-complete.sh\ntest-runner.sh --rerun-big-tests -- mod_iq_example\n</code></pre>"},{"location":"developers-guide/Bootstrap-Scripts/","title":"Bootstrap scripts","text":"<p>The scripts are located in the <code>rel/files/scripts/</code> directory in the MongooseIM repository.</p> <p>By default the <code>bootstrap</code> command executes <code>bootstrap01-hello.sh</code>, which just prints the information below:</p> <pre><code>./_build/prod/rel/mongooseim/bin/mongooseimctl bootstrap\n\nExecute /Users/mikhailuvarov/erlang/esl/MongooseIM/_build/prod/rel/mongooseim/scripts/bootstrap01-hello.sh\nHello from /Users/mikhailuvarov/erlang/esl/MongooseIM/_build/prod/rel/mongooseim/scripts/bootstrap01-hello.sh script.\nMongooseIM is installed into /Users/mikhailuvarov/erlang/esl/MongooseIM/_build/prod/rel/mongooseim\n</code></pre> <p>Execution of scripts stops with an error, if any of scripts fail.</p> <p>Environment variables, available from scripts:</p> <ul> <li><code>ERTS_PATH</code> - path to Erlang Runtime System, used by MongooseIM.</li> <li><code>MIM_DIR</code> - MongooseIM release installation directory.</li> </ul>"},{"location":"developers-guide/Bootstrap-Scripts/#templating-bootstrap-script","title":"Templating bootstrap script","text":"<p>The script <code>bootstrap20-template.escript</code> renders files from the <code>templates/</code> directory and writes result files into the <code>etc/</code> directory. If you need the result files in a separate directory, create another script <code>bootstrap30-template.sh</code>, that moves files into a proper location.</p> <p>The <code>etc/templates.ini</code> file contains default template variables.</p> <p>A template config example:</p> <pre><code>[options]\n  demo_session_lifetime = 600\n  demo_tls_versions = 'tlsv1.2', 'tlsv1.3'\n</code></pre> <p>Only lowercase variables are allowed in <code>templates.ini</code>.</p> <p>You can redeclare options using environment variables when executing the bootstrap script:</p> <pre><code>MIM_DEMO_SESSION_LIFETIME=700 mongooseimctl bootstrap\n</code></pre> <p>Environment variables should have a <code>MIM_</code> prefix. The variable names are case-insensitive (but we suggest to use the uppercase variable names for consistency).</p>"},{"location":"developers-guide/Bootstrap-Scripts/#demo-template","title":"Demo template","text":"<p>A demo template is located in <code>rel/files/templates/demo.config</code>. It is copied into the <code>/templates</code> directory inside your release directory.</p>"},{"location":"developers-guide/Bootstrap-Scripts/#testing-templating-scripts","title":"Testing templating scripts","text":"<p>Templating script source code: <code>rel/files/scripts/bootstrap20-template.escript</code>.</p> <p>Testing script code:</p> <pre><code>tools/pkg/scripts/smoke_test.sh\ntools/pkg/scripts/smoke_templates.escript\n</code></pre> <p>Testing command:</p> <pre><code>PRESET=pkg pkg_PLATFORM=centos_7 ESL_ERLANG_PKG_VER=23.3.1-2 ./tools/test.sh\n</code></pre>"},{"location":"developers-guide/Hooks-and-handlers/","title":"Hooks, handlers and accumulators","text":"<p>The hooks and handlers mechanism is one of the core architectural features of MongooseIM. It allows for loose coupling between components of the system by calling only those which are available and configured to be used at runtime.</p> <p>It can be thought of as a simple eventing mechanism notifying about certain things happening in the server. That results in an extensible system with pluggable extra functionality.</p> <p>To focus our attention, we'll analyze <code>mod_offline</code> which is responsible for storing messages for delivery to users unavailable at the time of sending. <code>mod_offline</code> is an implementation of XEP-0203: Delayed Delivery.</p>"},{"location":"developers-guide/Hooks-and-handlers/#running-a-hook","title":"Running a hook","text":""},{"location":"developers-guide/Hooks-and-handlers/#basic-usage","title":"Basic usage","text":"<p><code>ejabberd_sm</code> (ejabberd/MongooseIM session manager) is the module discovering whether the recipient of a message is available or not. That's where storing the message for later delivery takes place. It is possible, but not recommended, to save a message in an offline storage by calling <code>mod_offline</code> directly:</p> <pre><code>mod_offline:store_packet(Acc, From, To, Packet)\n</code></pre> <p>Note that in this example <code>ejabberd_sm</code> is coupled with <code>mod_offline</code>. I.e. if <code>mod_offline</code> was not available, the code would simply crash; if it was misconfigured or turned off, the behaviour would be undefined. To avoid that coupling and also to enable other (possibly yet to be written) code to carry out some action at this particular moment, <code>ejabberd_sm</code> calls instead:</p> <pre><code>mongoose_hooks:offline_message_hook(Acc, From, To, Packet);\n</code></pre> <p><code>mongoose_hooks</code> is a module which serves as an API for calling hooks in the server. All such modules are placed in <code>src/hooks</code>.</p> <p>For every hook, there needs to be a function in this module written beforehand which accepts the correct arity of arguments and makes the call to actual low-level hooks mechanism. This means that there is some degree of coupling still - but this time between the <code>ejabberd_sm</code> module and <code>mongoose_hooks</code>, and the latter is always available.</p> <p>The extra level of indirection introduced by this call gives the flexibility to determine at runtime what code actually gets run at this point. This depends on which handlers are registered to process the event.</p> <p><code>offline_message_hook</code> is the name of the hook (in other words of the event that is being signalled); <code>Acc</code> is the Accumulator, described later; <code>From</code>, <code>To</code> and <code>Packet</code> are the arguments passed to the handler, just as they would in case of the function being called directly.</p> <p>Why do we even need the <code>mongoose_hooks</code> module?</p> <p>Why is there a module in which we have to define the hook invocation beforehand? Could we not just use the low-level hooks mechanism directly and avoid this module altogether?</p> <p>This was actually the case before this module was introduced, and hooks' names were just atoms provided as an argument to this low-level API. However, we discovered it was causing problems and producing bugs, due to the lack of static code analysis. Now we can have some guarantees thanks to Dialyzer, and each hook invocation has a correct number of arguments. Thanks to this, writing handlers is easier - there is a single source of truth about how a hook is run. Remember that a given hook can be invoked from many places in many modules.</p> <p>With the new <code>mongoose_c2s</code> implementation we introduced a new hook API module, <code>mongoose_c2s_hooks</code>. All such API modules are placed in the <code>src/hooks</code> directory.</p>"},{"location":"developers-guide/Hooks-and-handlers/#getting-results-from-handlers","title":"Getting results from handlers","text":"<p>Hook handlers are called by \"folding\". This means that each handler on a list is passed a set of arguments, and an initial value that it then modifies, returns and hands over to the next handler in line. This modified data that is processed by the series of handlers is called an accumulator - because it accumulates the results.</p> <p>A simple example would look like this:</p> <pre><code>NewAcc = mongoose_hooks:a_certain_hook(Accumulator,\n                                       StateData#state.user,\n                                       StateData#state.server).\n</code></pre> <p>The initial value of the accumulator being passed through the sequence of handlers is provided with additional arguments required by the hook, as defined in the <code>mongoose_hooks</code> module.</p> <p>Folds</p> <p>If you haven't encountered the term fold before, think of it as reduce (like <code>Array.reduce</code>) in Ruby-speak, roughly equivalent to the Reduce step in MapReduce, sometimes called accumulate, aggregate or compress. See Wikipedia for more.</p>"},{"location":"developers-guide/Hooks-and-handlers/#using-accumulators","title":"Using accumulators","text":"<p>MongooseIM uses a dedicated data structure to accumulate data related to stanza processing (see \"Accumulators\"). It is instantiated with an incoming stanza, passed along throughout the processing chain, supplied to and returned from certain hook calls, and terminated when the stanza is leaving MongooseIM. There are some hooks which don't use this data structure.</p> <p>If a Mongoose accumulator is passed to a hook, handlers should store their return values in one of 3 ways:</p> <ul> <li>If it is a one-off value which doesn't need to be passed on along with the accumulator (can be overwritten any time), use <code>mongoose_acc:set(hook, result, Value, Acc)</code>.</li> <li>If the value is to be passed on to be reused within the current processing context, use <code>mongoose_acc:set(Namespace, Key, Value, Acc)</code>.</li> <li>If the value should be passed on to the recipient's session, pubsub node etc. use <code>mongoose_acc:set_permanent(Namespace, Key, Value, Acc)</code>.</li> </ul> <p>A real life example, then, with regard to <code>mod_offline</code> is the <code>resend_offline_messages_hook</code> run in <code>mod_presence</code>:</p> <pre><code>Acc1 = mongoose_hooks:resend_offline_messages_hook(Acc, Jid),\nRs = mongoose_acc:get(offline, messages, [], Acc1),\n</code></pre>"},{"location":"developers-guide/Hooks-and-handlers/#error-handling-in-hooks","title":"Error handling in hooks","text":"<p>Hooks are meant to decouple modules; in other words, the caller signals that some event took place or that it intends to use a certain feature or a set of features, but how and if those features are implemented is beyond its interest. For that reason hooks don't use the \"let it crash\" approach. Instead, it is rather like \"fire-and-forget\", more similar in principle to the <code>Pid ! signal</code> way.</p> <p>In practical terms: if a handler throws an error, the hook machine logs a message and proceeds to the next handler with an unmodified accumulator. If there are no handlers registered for a given hook, the call simply has no effect.</p>"},{"location":"developers-guide/Hooks-and-handlers/#sidenote-code-yet-to-be-written","title":"Sidenote: Code yet to be written","text":"<p>Let's imagine, that when building a minimum viable product we settle on using <code>mod_offline</code> for delayed delivery of messages to unavailable clients. However, while the product evolves (or the relevant client software catches up) we might drop <code>mod_offline</code> in favour of a more sophisticated solution like Message Archive Management which would require a different action to be taken at the same point. Thanks to loose coupling and <code>mongoose_hooks</code>, it's possible to turn off <code>mod_offline</code> and turn on <code>mod_mam</code> without changing a single line of code in <code>ejabberd_sm</code>.</p> <p>The only required change is to the configuration (apart from deploying the new module) which can even be performed at runtime - without restarting the server.</p>"},{"location":"developers-guide/Hooks-and-handlers/#sidenote-multiple-domains","title":"Sidenote: Multiple Domains","text":"<p>A MongooseIM cluster may serve more than one domain at the same time. E.g. it is quite common that services like Multi User Chat or Publish-Subscribe are available as subdomains of the main XMPP domain served by an installation.</p> <p>Moreover, each XMPP host is of a certain type, as defined in <code>general.host_types</code>, and hooks can be called either globally (across all hosts/host types) or for one host type. If you are not using dynamic domains or grouping hosts under host types, then each host has a corresponding host type implicitly, and the two terms are interchangeable. Whether a hook is called globally or per host type is depends on its purpose. It is decided when creating a hook and can be checked in the <code>mongoose_hooks</code> module for existing hooks.</p>"},{"location":"developers-guide/Hooks-and-handlers/#registering-hook-handlers","title":"Registering hook handlers","text":"<p>In order to store a packet when <code>ejabberd_sm</code> runs <code>offline_message_hook</code>, the relevant module must register a handler for this hook. To attain the runtime configurability the module should register the handlers when it's loaded and unregister them when it's unloaded. That's usually done in, respectively, <code>start/2</code> and <code>stop/1</code> functions. Here is the relevant snippet from <code>mod_offline:start/2</code>:</p> <p><pre><code>gen_hook:add_handlers(hooks(HostType)),\n</code></pre> and the <code>hooks/1</code> function returns a list of tuples describing hook handlers, like: <pre><code>{offline_message_hook, HostType, fun ?MODULE:inspect_packet/3, #{}, 50}\n</code></pre></p> <p>It is clearly visible that the handler <code>inspect_packet</code> is added to the <code>offline_message_hook</code>.</p> <p><code>HostType</code> is the one for which the handler will be executed. In the case of statically defined domains, it is the same as the host, as configured in the <code>general.hosts</code> section.</p> <p>The handler itself is specified as a fun expression; the arity of the function is always 3 - more about actual arguments in the <code>Writing handlers</code> section. If the handler expects an incorrect number of arguments, it will simply crash.</p> <p>The 4th element of this tuple is a map of static parameters that will be passed to every invocation of the handler. It allows to specify additional handler config at the moment of its registering.</p> <p>Multiple handlers may be registered for the same hook. The last argument, 50, is the sequence number of this handler in the handler chain. The higher the number, the later in the sequence the handler will be executed. It's reasonable to keep this number small (e.g. in the range 0-100), though there's no real limit other than the size of the integer type in the Erlang VM.</p>"},{"location":"developers-guide/Hooks-and-handlers/#unregistering-handlers","title":"Unregistering handlers","text":"<p>Pluggability also requires the components to be unpluggable at will. For that purpose there's the option to unregister a hook handler. It's done in <code>mod_offline:stop/1</code> in a similar fashion to:</p> <pre><code>gen_hook:delete_handlers(hooks(Host)),\n</code></pre> <p>The function <code>hooks/1</code> function returns a list of hook tuples exactly the same as passed to <code>gen_hook:add_handlers/1</code>. Both these functions accept either a list of tuples. There also exist functions <code>gen_hook:add_handler/5</code> and <code>gen_hook:delete_handler/5</code> which register and unregister one handler at a time.</p>"},{"location":"developers-guide/Hooks-and-handlers/#sidenote-metrics","title":"Sidenote: Metrics","text":"<p>Every time a hook is run, a corresponding metric of the same name in the same host is incremented by one. There are some exceptions though as some metrics were implemented before the generic hook metrics. List of hooks not updating generic metrics can be found in the <code>mongoose_metrics:filter_hook/1</code> function. Such skipped hooks update metrics are defined in the <code>mongoose_metrics_hooks</code> module.</p>"},{"location":"developers-guide/Hooks-and-handlers/#writing-handlers","title":"Writing handlers","text":"<p>The signature of a handler has to follow these rules:</p> <ul> <li>Accepts correct arguments:<ul> <li>Acc - accumulator which was passed from previous handler (or initial accumulator). May be <code>mongoose_acc</code> in particular</li> <li>Params - map of hook parameters passed from <code>mongoose_hooks</code>. It is constant for every handler in one hook invocation. For exact structure check the hook function in <code>mongoose_hooks</code> module, as different hooks use different parameters.</li> <li>Extra - map of additional hook parameters. It is constant for every hook invocation. It is created from the map described in <code>Registering hook handlers</code> section with 3 additional parameters: <code>host_type</code>, <code>hook_tag</code>, <code>hook_name</code>. Parameter <code>host_type</code> can be particularly useful.</li> </ul> </li> <li>Returns a tuple <code>{ok | stop, Acc}</code> where <code>Acc</code> is the accumulator of the same type as the input one, that shall be passed to the next handler (or return value in case of last handler).</li> </ul> <p>Let's look at this example, from MongooseIM codebase:</p> <pre><code>in_subscription(Acc, #{to := ToJID, from := FromJID, type := Type}, _) -&gt;\n    case process_subscription(in, ToJID, FromJID, Type) of\n        stop -&gt;\n            {stop, Acc};\n        {stop, false} -&gt;\n            {stop, mongoose_acc:set(hook, result, false, Acc)};\n        _ -&gt; {ok, Acc}\n    end.\n</code></pre> <p>As seen in this example, a handler receives an accumulator, parameters and extra parameters (in this case - ignored). Then it matches to the result of <code>process_subscription/4</code> and can return 3 different values:</p> <ul> <li><code>{ok, Acc}</code> - it allows further processing and does not change the accumulator.</li> <li><code>{stop, mongoose_acc:set(hook, result, false, Acc)}</code> - it stops further processing and returns accumulator with a new value in it.</li> <li><code>{stop, Acc}</code> - it stops further processing and does not change the accumulator.</li> </ul> <p>This is an important feature to note: in some cases our handler returns a tuple  <code>{stop, Acc}</code>. This skips calling later actions in the handler sequence, while the hook call returns the <code>Acc</code>. Further processing is only performed if the first element of return tuple is <code>ok</code>.</p> <p>Watch out! Different handlers may be registered for the same hook - the priority mechanism orders their execution. If a handler returns <code>{stop, Acc}</code> but runs early in the handler chain, it may prevent some other handler from running at all! That might or might not be intentional. It may be especially surprising in case of handlers from different modules registered for the same hook. Always ensure what handlers are registered for a given hook (<code>grep</code> is your friend) and that you understand their interdependencies.</p>"},{"location":"developers-guide/Hooks-and-handlers/#hooks-list-and-how-to-extract-it","title":"Hooks list and how to extract it","text":"<p>The following command should give you a list of all the hooks available in MongooseIM:</p> <p><pre><code>awk '/\\-export\\(\\[/,/\\]\\)\\./' src/hooks/*.erl | grep -oh \"\\w*/\" | sed 's/.$//' | sort\n</code></pre> It returns: <pre><code>adhoc_local_commands\nadhoc_sm_commands\n...\n...\n...\nxmpp_stanza_dropped\n</code></pre></p> <p>It just extracts the hooks exported from <code>mongoose_hooks</code> and other hook API modules. Refer to <code>grep</code>/<code>ack</code> to find where they're used.</p>"},{"location":"developers-guide/Hooks-and-handlers/#creating-your-own-hooks","title":"Creating your own hooks","text":"<p>You should put the new hook inside <code>mongoose_hooks</code> with a correct type specification, which provides some security in places where the hooks are run. This is the way all hooks are called in MongooseIM (see the examples in the hooks description). You could run <code>gen_hook:run_fold</code> directly, providing the hook name, but this is advised against.</p> <p>Of course, as long as no module registers handlers for a hook, calling it won't have any effects.</p> <p>This is similar to the case when a module registers handlers for some hook, but that hook is never run in the code. That won't have an effect either.</p>"},{"location":"developers-guide/Hooks-and-handlers/#example-of-creating-a-new-hook","title":"Example of creating a new hook","text":"<p>The following is an example of a module which both runs and registers a few handlers for a completely new hook. The handlers are run sequentially using disparate priorities and passing over an accumulator value. One of the handlers stops the handler execution chain prematurely by returning <code>{stop, NewVal}</code>. It's also possible to try out what happens when the same hook is run with different XMPP domains by passing an argument to <code>run_custom_hook/1</code> - we'll see that the handlers are registered for a particular domain only.</p> <p>At the end, you can see a printout of an accumulator with some debugging info.</p> <p>To cut the long story short:</p>"},{"location":"developers-guide/Hooks-and-handlers/#1-add-the-hook-with-type-specification-to-mongoose_hooks","title":"1. Add the hook with type specification to <code>mongoose_hooks</code>","text":"<pre><code>-spec custom_new_hook(HostType, Acc, Number) -&gt; Result when\n    HostType :: mongooseim:host_type(),\n    Acc :: mongoose_acc:t(),\n    Number :: integer(),\n    Result :: mongoose_acc:t().\ncustom_new_hook(HostType, Acc, Number) -&gt;\n    Params = #{number =&gt; Number},\n    run_hook_for_host_type(custom_new_hook, HostType, Acc, Params).\n</code></pre> <p>Don't forget about exporting the function: <pre><code>-export([custom_new_hook/3]).\n</code></pre></p>"},{"location":"developers-guide/Hooks-and-handlers/#2-create-the-mod_hook_example-module","title":"2. Create the <code>mod_hook_example</code> module","text":"<pre><code>-module(mod_hook_example).\n\n-behaviour(gen_mod).\n\n-include(\"mongoose.hrl\").\n\n%% API\n-export([run_custom_hook/1]).\n\n%% gen_mod callbacks\n-export([start/2,\n         stop/1]).\n\n%% Hook handlers\n-export([first_handler/3,\n         stopping_handler/3,\n         never_run_handler/3]).\n\nstart(HostType, _Opts) -&gt;\n    gen_hook:add_handlers(hooks(HostType)).\n\nstop(HostType) -&gt;\n    gen_hook:delete_handlers(hooks(HostType)).\n\nhooks(HostType) -&gt;\n    [{custom_new_hook, HostType, fun ?MODULE:first_handler/3, #{extra_param =&gt; &lt;&lt;\"ExtraParam\"&gt;&gt;}, 25},\n     {custom_new_hook, HostType, fun ?MODULE:stopping_handler/3, #{}, 50},\n     {custom_new_hook, HostType, fun ?MODULE:never_run_handler/3, #{}, 75}].\n\nrun_custom_hook(Host) -&gt;\n    {ok, HostType} = mongoose_domain_api:get_domain_host_type(Host),\n    Acc = mongoose_acc:new(#{ location =&gt; ?LOCATION, lserver =&gt; Host, host_type =&gt; HostType }),\n    Acc1 = mongoose_acc:set(example, value, 5, Acc),\n    ResultAcc = mongoose_hooks:custom_new_hook(HostType, Acc1, 2),\n    ResultValue = mongoose_acc:get(example, value, ResultAcc),\n    ?LOG_INFO(#{what =&gt; hook_finished, result =&gt; ResultValue, result_acc =&gt; ResultAcc}).\n\nfirst_handler(Acc, #{number := Number}, #{extra_param := Extra}) -&gt;\n    V0 = mongoose_acc:get(example, value, Acc),\n    Result = V0 + Number,\n    ?LOG_INFO(#{what =&gt; first_handler, value =&gt; V0, argument =&gt; Number,\n                result =&gt; Result, extra =&gt; Extra}),\n    {ok, mongoose_acc:set(example, value, Result, Acc)}.\n\nstopping_handler(Acc, #{number := Number}, _) -&gt;\n    V0 = mongoose_acc:get(example, value, Acc),\n    Result = V0 + Number,\n    ?LOG_INFO(#{what =&gt; stopping_handler, value =&gt; V0, argument =&gt; Number, result =&gt; Result}),\n    {stop, mongoose_acc:set(example, value, Result, Acc)}.\n\nnever_run_handler(Acc, #{number := Number}, _) -&gt;\n    ?LOG_INFO(#{what =&gt; never_run_handler,\n                text =&gt; &lt;&lt;\"This handler won't run as it's registered with a priority bigger \"\n                          \"than that of stopping_handler/2 is. \"\n                          \"This text should never get printed.\"&gt;&gt;}),\n    {ok, Acc * Number}.\n</code></pre> <p>The module is intended to be used from the shell for educational purposes:</p> <pre><code>(mongooseim@localhost)1&gt; gen_mod:is_loaded(&lt;&lt;\"localhost\"&gt;&gt;, mod_hook_example).\nfalse\n(mongooseim@localhost)2&gt; mongoose_modules:ensure_started(&lt;&lt;\"localhost\"&gt;&gt;, mod_hook_example, #{}).\n{started,ok}\n(mongooseim@localhost)3&gt; gen_mod:is_loaded(&lt;&lt;\"localhost\"&gt;&gt;, mod_hook_example).\ntrue\n(mongooseim@localhost)4&gt; mongoose_logs:set_module_loglevel(mod_hook_example, info).\nok\n(mongooseim@localhost)5&gt; mod_hook_example:run_custom_hook(&lt;&lt;\"localhost\"&gt;&gt;).\nwhen=2022-12-15T12:37:16.109544+00:00 level=info what=first_handler pid=&lt;0.1081.0&gt; at=mod_hook_example:first_handler/3:41 value=5 result=7 extra=ExtraParam argument=2 \nwhen=2022-12-15T12:37:16.109809+00:00 level=info what=stopping_handler pid=&lt;0.1081.0&gt; at=mod_hook_example:stopping_handler/3:48 value=7 result=9 argument=2 \nwhen=2022-12-15T12:37:16.110028+00:00 level=info what=hook_finished pid=&lt;0.1081.0&gt; at=mod_hook_example:run_custom_hook/1:36 result_acc_{example,value}=9 result_acc_timestamp=1671107836109517 result_acc_stanza=undefined result_acc_ref=#Ref&lt;0.4046106046.1908670465.111816&gt; result_acc_origin_pid=&lt;0.1081.0&gt; result_acc_origin_location_mfa={mod_hook_example,run_custom_hook,1} result_acc_origin_location_line=32 result_acc_origin_location_file=/Users/paweldlugosz/Dev/Repos/MongooseIM/src/mod_hook_example.erl result_acc_non_strippable= result_acc_mongoose_acc=true result_acc_lserver=localhost result_acc_host_type=localhost result=9 \nok\n</code></pre>"},{"location":"developers-guide/OpenSSL-and-FIPS/","title":"OpenSSL FIPS","text":"<p>Support for OpenSSL FIPS was added to MongooseIM in version 1.7.0.</p>"},{"location":"developers-guide/OpenSSL-and-FIPS/#incompatibilities","title":"Incompatibilities","text":"<p>Currently known incompatible features are:</p> <ul> <li>SASL auth mechanism DIGEST-MD5: due to a forbidden MD5 hash function in FIPS mode.</li> </ul>"},{"location":"developers-guide/OpenSSL-and-FIPS/#requirements","title":"Requirements","text":""},{"location":"developers-guide/OpenSSL-and-FIPS/#build-erlangotp-with-fips-support","title":"Build Erlang/OTP with FIPS support","text":"<p>Make sure the option <code>--enable-fips</code> is specified for <code>configure</code> command. If you want to use a different OpenSSL than the default one, specify the option <code>--with-ssl=PATH_TO_YOUR_OPENSSL</code> as well. Here's an example of a command for building Erlang/OTP with kerl:</p> <pre><code>KERL_CONFIGURE_OPTIONS=\"--enable-fips\" ./kerl build 23.3 23.3-fips\n</code></pre>"},{"location":"developers-guide/OpenSSL-and-FIPS/#building-mongooseim-with-a-custom-openssl","title":"Building MongooseIM with a custom OpenSSL","text":"<p>If you want to use a custom OpenSSL, please export the CFLAGS and LDFLAGS env vars pointing to a FIPS compliant OpenSSL before running <code>./rebar3 compile</code> or <code>make rel</code>.</p> <pre><code>OPENSSL_LIB=~/openssl/lib #put your path here\nOPENSSL_INC=~/openssl/inc #put your path here\n\nexport LDFLAGS=\"-Wl,-rpath=$OPENSSL_LIB -L$OPENSSL_LIB\"\nexport CFLAGS=\"-I$OPENSSL_INC\"\n</code></pre>"},{"location":"developers-guide/OpenSSL-and-FIPS/#how-to-enabledisable-fips-mode","title":"How to enable/disable FIPS mode","text":"<p>Find <code>etc/app.config</code> in the release directory. FIPS mode is an option of the crypto application. In order to enable/disable it, add the following section to <code>app.config</code>:</p> <pre><code>{crypto, [{fips_mode, Value}]},\n</code></pre> <p>where <code>Value</code> is either <code>true</code> or <code>false</code>.</p>"},{"location":"developers-guide/OpenSSL-and-FIPS/#how-to-check-if-the-fips-mode-is-enabled","title":"How to check if the FIPS mode is enabled","text":""},{"location":"developers-guide/OpenSSL-and-FIPS/#log-message","title":"Log message","text":"<p>When MongooseIM starts, it prints the following log message if FIPS mode is enabled</p> <pre><code>2015-02-25 14:30:54.501 [warning] &lt;0.242.0&gt;@mongoose_fips:do_notify:37 FIPS mode enabled\n</code></pre>"},{"location":"developers-guide/OpenSSL-and-FIPS/#run-time-check","title":"Run-time check","text":"<p>Run the following function in the MongooseIM console:</p> <pre><code>mongoose_fips:status().\n</code></pre> <p>The function returns:</p> <ul> <li>not_enabled - fips_mode is not set to true in etc/app.config</li> <li>enabled - fips_mode is set to true in etc/app.config</li> <li>not_supported - erlang compiled without fips support</li> </ul>"},{"location":"developers-guide/OpenSSL-and-FIPS/#cipher-suites-difference","title":"Cipher suites difference","text":"<p>A test using a <code>cipher_suites_test.sh</code> script (available in the tools directory) can be performed on MongooseIM with FIPS mode enabled and disabled. We've used <code>OpenSSL 1.0.1j-fips</code>.</p> <p>Here are all the cipher suites available when the FIPS mode is enabled (the list may vary for different openssl versions):</p> <ul> <li>ECDHE-RSA-AES256-SHA</li> <li>DHE-RSA-AES256-SHA</li> <li>AES256-SHA</li> <li>ECDHE-RSA-DES-CBC3-SHA</li> <li>EDH-RSA-DES-CBC3-SHA</li> <li>DES-CBC3-SHA</li> <li>ECDHE-RSA-AES128-SHA</li> <li>DHE-RSA-AES128-SHA</li> <li>AES128-SHA</li> </ul> <p>Here are all the cipher suites available when the FIPS mode is disabled (the list may vary for different openssl versions):</p> <ul> <li>ECDHE-RSA-AES256-SHA</li> <li>DHE-RSA-AES256-SHA</li> <li>DHE-RSA-CAMELLIA256-SHA</li> <li>AES256-SHA</li> <li>CAMELLIA256-SHA</li> <li>ECDHE-RSA-DES-CBC3-SHA</li> <li>EDH-RSA-DES-CBC3-SHA</li> <li>DES-CBC3-SHA</li> <li>ECDHE-RSA-AES128-SHA</li> <li>DHE-RSA-AES128-SHA</li> <li>DHE-RSA-SEED-SHA</li> <li>DHE-RSA-CAMELLIA128-SHA</li> <li>AES128-SHA</li> <li>SEED-SHA</li> <li>CAMELLIA128-SHA</li> <li>ECDHE-RSA-RC4-SHA</li> <li>RC4-SHA</li> <li>RC4-MD5</li> </ul>"},{"location":"developers-guide/SCRAM-serialization/","title":"SCRAM serialization format","text":""},{"location":"developers-guide/SCRAM-serialization/#overview","title":"Overview","text":"<p>This document describes the SCRAM serialization format used by MongooseIM. Developers can use this information to create advanced endpoints for <code>ejabberd_auth_http</code> or enable other software to read (i.e. share) the user authentication data.</p>"},{"location":"developers-guide/SCRAM-serialization/#format-description","title":"Format description","text":"<p><code>==MULTI_SCRAM==,&lt;iteration count&gt;,===SHA1===&lt;salt&gt;|&lt;stored key&gt;|&lt;server key&gt;,==SHA224==&lt;salt&gt;|&lt;stored key&gt;|&lt;server key&gt;,==SHA256==&lt;salt&gt;|&lt;stored key&gt;|&lt;server key&gt;,==SHA384==&lt;salt&gt;|&lt;stored key&gt;|&lt;server key&gt;,==SHA512=&lt;salt&gt;|&lt;stored key&gt;|&lt;server key&gt;</code></p> <ul> <li><code>&lt;iteration count&gt;</code> - Iteration Count formatted as a human-readable integer</li> <li><code>&lt;salt&gt;</code> - Base64-encoded Salt</li> <li><code>&lt;stored key&gt;</code> - Base64-encoded Stored Key</li> <li><code>&lt;server key&gt;</code> - Base64-encoded Server Key</li> </ul> <p>The SCRAM format can vary depending on the SHA algorithms that are used for SCRAM. Salt and iteration count is common for different SHA types. Stored Key and Server Key are specific to a given SHA and are following a SHA prefix that is indicating which SHA they belong to.</p> <p>In order to learn more about the meaning of the Stored Key, Server Key, Salt and Iteration Count, please check the SCRAM specification.</p>"},{"location":"developers-guide/SCRAM-serialization/#example","title":"Example","text":"<ul> <li>Password: <code>padthai</code></li> <li>Erlang map: <pre><code>#{iteration_count =&gt; 4096,\n  sha =&gt;\n      #{salt =&gt; &lt;&lt;\"QClQsw/sfPEnwj4AEp6E1w==\"&gt;&gt;,\n        server_key =&gt; &lt;&lt;\"EJvxXWM42tO7BgW21lNZyBc1dD0=\"&gt;&gt;,\n        stored_key =&gt; &lt;&lt;\"ys1104hRhqMoRputBY5sLHKXoSw=\"&gt;&gt;},\n  sha224 =&gt;\n      #{salt =&gt; &lt;&lt;\"dk0ImXFVPoUfqD5FveV7YA==\"&gt;&gt;,\n        server_key =&gt; &lt;&lt;\"EvE2EkZcUb3k4CooeOcVFy95P32t+NDX0xbQUA==\"&gt;&gt;,\n        stored_key =&gt;\n            &lt;&lt;\"G0ibQ/YYuCtoun4I+1IF2zJ7Q8x2T23ETnq5Gg==\"&gt;&gt;},\n  sha256 =&gt;\n      #{salt =&gt; &lt;&lt;\"M7BYKSo04XbzBr4C7b056g==\"&gt;&gt;,\n        server_key =&gt;\n            &lt;&lt;\"XhtGFf6NDWsnVSCO4xkzPD3qc046fPL0pATZi7RmaWo=\"&gt;&gt;,\n        stored_key =&gt;\n            &lt;&lt;\"A779MC05nSGQln5no0hKTGHFSaQ7oguKBZgORW3s+es=\"&gt;&gt;},\n  sha384 =&gt;\n      #{salt =&gt; &lt;&lt;\"Ryu0fA29gbwgqFOBk5Mczw==\"&gt;&gt;,\n        server_key =&gt;\n            &lt;&lt;\"kR+LMI/E0QBG3oF405/MTAT6NAlCOfPrFOaWH3WBVGM0Viu9Brk6kGwVwXjSP8v0\"&gt;&gt;,\n        stored_key =&gt;\n            &lt;&lt;\"k3QwC0Lb1y1/V/31byC5KML5t3mH4JTPjFyeAz7lV2l4SPfzi3JHvLEdoNB5K/VY\"&gt;&gt;},\n  sha512 =&gt;\n      #{salt =&gt; &lt;&lt;\"SLNuVNcWiNBmnYZNIdj+zg==\"&gt;&gt;,\n        server_key =&gt;\n            &lt;&lt;\"jUUDbuQ9ae4UnAWS6RV6W4yifX3La3ESjfZjGol+TBROIb/ihR8UawPHrSHkp4yyDJXtRhR9RlHCHy4bcCm1Yg==\"&gt;&gt;,\n        stored_key =&gt;\n            &lt;&lt;\"3ey3gzSsmbxcLnoc1VKCR/739uKX6uuPCyAzn6x8o87ibcjOdUaU8qhL5X4MUI9UPTt667GagNpVTmAWTFNsjA==\"&gt;&gt;}}\n</code></pre></li> <li>Serialized password: <pre><code>==MULTI_SCRAM==,4096,\n===SHA1===QClQsw/sfPEnwj4AEp6E1w==|ys1104hRhqMoRputBY5sLHKXoSw=|EJvxXWM42tO7BgW21lNZyBc1dD0=,\n==SHA224==dk0ImXFVPoUfqD5FveV7YA==|G0ibQ/YYuCtoun4I+1IF2zJ7Q8x2T23ETnq5Gg==|EvE2EkZcUb3k4CooeOcVFy95P32t+NDX0xbQUA==,\n==SHA256==M7BYKSo04XbzBr4C7b056g==|A779MC05nSGQln5no0hKTGHFSaQ7oguKBZgORW3s+es=|XhtGFf6NDWsnVSCO4xkzPD3qc046fPL0pATZi7RmaWo=,\n==SHA384==Ryu0fA29gbwgqFOBk5Mczw==|k3QwC0Lb1y1/V/31byC5KML5t3mH4JTPjFyeAz7lV2l4SPfzi3JHvLEdoNB5K/VY|kR+LMI/E0QBG3oF405/MTAT6NAlCOfPrFOaWH3WBVGM0Viu9Brk6kGwVwXjSP8v0,\n==SHA512==SLNuVNcWiNBmnYZNIdj+zg==|3ey3gzSsmbxcLnoc1VKCR/739uKX6uuPCyAzn6x8o87ibcjOdUaU8qhL5X4MUI9UPTt667GagNpVTmAWTFNsjA==|jUUDbuQ9ae4UnAWS6RV6W4yifX3La3ESjfZjGol+TBROIb/ihR8UawPHrSHkp4yyDJXtRhR9RlHCHy4bcCm1Yg==\n</code></pre></li> </ul>"},{"location":"developers-guide/SCRAM-serialization/#legacy-format-description","title":"Legacy format description","text":"<p>MongooseIM installations older or equal to 3.6.2 were supporting only SHA-1 as a hashing algorithm for SCRAM. The SCRAM format that was used can be seen below.</p> <p><code>==SCRAM==,&lt;stored key&gt;,&lt;server key&gt;,&lt;salt&gt;,&lt;iteration count&gt;</code></p> <ul> <li><code>&lt;stored key&gt;</code> - Base64-encoded Stored Key</li> <li><code>&lt;server key&gt;</code> - Base64-encoded Server Key</li> <li><code>&lt;salt&gt;</code> - Base64-encoded Salt</li> <li><code>&lt;iteration count&gt;</code> - Iteration Count formatted as a human-readable integer</li> </ul> <p>In order to learn more about the meaning of the Stored Key, Server Key, Salt and Iteration Count, please check the SCRAM specification.</p>"},{"location":"developers-guide/SCRAM-serialization/#example_1","title":"Example","text":"<ul> <li>Password: <code>misio</code></li> <li>Erlang record: <code>#scram{ storedkey = &lt;&lt;\"tmi5IE+9pceRV/jkPLFHEaVY33c=\"&gt;&gt;, serverkey = &lt;&lt;\"MiWNa8T3dniVDwmh77ufJ41fpAQ=\"&gt;&gt;, salt = &lt;&lt;\"inKXODlSY5y5SCsLxibi0w==\"&gt;&gt;, iterationcount = 4096 }</code></li> <li>Serialized password: <code>==SCRAM==,tmi5IE+9pceRV/jkPLFHEaVY33c=,MiWNa8T3dniVDwmh77ufJ41fpAQ=,inKXODlSY5y5SCsLxibi0w==,4096</code></li> </ul>"},{"location":"developers-guide/Stanza-routing/","title":"Route of a message through the system","text":"<p>Let's examine the flow of a message sent from Alice to Bob, both of whom are served by the same domain and connected to the server.</p> <p>Note that hooks are called at various stages of routing - they perform many tasks, and many MongooseIM functionalities are implemented through hooks &amp; handlers. For a general introduction to hooks, see Hooks and Handlers; to get a closer look at a core few, see the hooks description.</p>"},{"location":"developers-guide/Stanza-routing/#1-senders-c2s-process-receives-the-message","title":"1. Sender's C2S process receives the message","text":"<p>Alice's C2S (client-to-server) process, which is a state machine implemented in the <code>mongoose_c2s</code> module, receives data from the TCP socket, and parses each incoming XML element with <code>exml</code> to an internal representation of the stanza, which is then processed by the C2S as a subsequent event.</p>"},{"location":"developers-guide/Stanza-routing/#2-call-to-user_send_-hooks","title":"2. Call to <code>user_send_*</code> hooks","text":"<p>Upon some minimal validation of the stanza, the hook <code>user_send_packet</code> is called. Next, depending on the type of the stanza, one of the following hooks is called:</p> <ul> <li><code>user_send_message</code> for messages,</li> <li><code>user_send_presence</code> for presences,</li> <li><code>user_send_iq</code> for IQ (info/query) stanzas,</li> <li><code>user_send_xmlel</code> for other XML elements.</li> </ul> <p>Each hook can be handled by multiple modules subscribed to it. Those modules do various complementary tasks, like storing the message in an archive, sending carbon copies, checking the stanza against privacy lists etc. It is possible for a handler to immediately stop routing at this point, preventing execution of any subsequent handlers or hooks. See hooks description for more information.</p>"},{"location":"developers-guide/Stanza-routing/#3-message-routing","title":"3. Message routing","text":"<p>The stanza is routed by <code>ejabberd_router:route/3</code>, which passes it through a chain of routing modules implementing the <code>xmpp_router</code> behaviour and applies the following functions for each of them:</p> <ol> <li><code>Mod:filter/3</code>, which either drops the stanza, stopping the routing chain, or returns it for further processing, modifying it if necessary.</li> <li><code>Mod:route/3</code>, which either handles the stanza, stopping the routing chain, or returns it for further processing, modifying it if necessary.</li> </ol> <p>A list of routing modules can be set in the <code>routing_modules</code> option. The default behaviour is the following:</p> <ul> <li><code>mongoose_router_global</code>: runs a global <code>filter_packet</code> hook.</li> <li><code>mongoose_router_localdomain</code>: if there is a local route registered for the destination domain (i.e. there is an entry in the <code>mongoose_router</code> ETS table), routes the stanza to it. When the recipient's domain is checked for the first time, the corresponding route is not registered yet, because the routes are added lazily - see <code>mongoose_router_dynamic_domains</code>.</li> <li><code>mongoose_router_external_localnode</code>: if there is an external component registered for the destination domain on the current node, routes the stanza to it. Such components are stored in the Mnesia table <code>external_component</code>, which is not replicated in the cluster.</li> <li><code>mongoose_router_external</code>: if there is an external component registered for the destination domain on any node in the cluster, routes the stanza to it. Such components are stored in the Mnesia table <code>external_component_global</code>, which is replicated among all cluster nodes.</li> <li><code>mongoose_router_dynamic_domains</code>: if the recipient's domain is hosted by the local server, a route is added for it, and the stanza is routed locally.</li> <li><code>ejabberd_s2s</code>: tries to find or establish a connection to another server and send the stanza there.</li> </ul> <p> </p> <p>Assuming that the message from Alice to Bob is not the first stanza addressed to their domain, the routing chain will stop at <code>mongoose_router_localdomain</code>, which will deliver the message locally.</p>"},{"location":"developers-guide/Stanza-routing/#4-mongoose_local_delivery","title":"4. <code>mongoose_local_delivery</code>","text":"<p>When an external component or a local route is found, the packet is delivered locally by <code>mongoose_local_delivery:do_route/5</code>. Firstly, the <code>filter_local_packet</code> hook is run to check if the stanza should be delivered or dropped. This hook is also a place where modules can add their own functionality evaluated for each locally delivered stanza.</p> <p>If the check passes, the next step is to call the handler associated with the component or the local route. Handlers are modules implementing the <code>mongoose_packet_handler</code> behaviour, and stanzas to local users (like Alice and Bob) are handled by the <code>ejabberd_local</code> module.</p>"},{"location":"developers-guide/Stanza-routing/#5-ejabberd_local-to-ejabberd_sm","title":"5. <code>ejabberd_local</code> to <code>ejabberd_sm</code>","text":"<p><code>ejabberd_local:process_packet/5</code> checks if the stanza is addressed to a user or to the server itself. For local users like Bob, <code>ejabberd_sm:route/4</code> is called.</p>"},{"location":"developers-guide/Stanza-routing/#6-ejabberd_sm","title":"6. <code>ejabberd_sm</code>","text":"<p><code>ejabberd_sm</code> determines the available resources of the recipient, takes into account their priorities and whether the message is addressed to a particular resource or a bare JID. It appropriately replicates (or not) the message and sends it to the recipient's C2S process(es) by calling <code>mongoose_c2s:route/2</code>. In case no resources are available for delivery (hence no C2S processes to pass the message to), <code>offline_message_hook</code> is run.</p> <p>As Bob has one online session, the message is sent to the C2S process associated with that session.</p>"},{"location":"developers-guide/Stanza-routing/#7-recipients-c2s-process-delivers-the-message","title":"7. Recipient's C2S process delivers the message","text":"<p>The <code>user_receive_packet</code> hook is run to notify the rest of the system about the stanza delivery. Next, depending on the type of the stanza, one of the following hooks is called:</p> <ul> <li><code>user_receive_message</code> for messages,</li> <li><code>user_receive_presence</code> for presences,</li> <li><code>user_receive_iq</code> for IQ (info/query),</li> <li><code>user_receive_xmlel</code> for other XML elements.</li> </ul> <p>Each hook can be handled by multiple modules subscribed to it. These hooks' handlers can stop the routing, e.g. when the stanza is blocked by <code>mod_privacy</code>. Finally, the <code>xmpp_presend_element</code> hook is called, which is used <code>mod_csi</code> and <code>mod_stream_management</code>. This is the last hook that can stop the routing - otherwise, the stanza is converted to binary data and sent to the recipient's TCP socket.</p>"},{"location":"developers-guide/Testing-MongooseIM/","title":"Test runner","text":"<p>The test runner script is used to compile MongooseIM and run tests.</p>"},{"location":"developers-guide/Testing-MongooseIM/#requirements","title":"Requirements","text":""},{"location":"developers-guide/Testing-MongooseIM/#docker","title":"Docker","text":"<p>Docker could be installed on the local system, and the user executing the tests must have privileges to start new containers (usually achieved by adding the user to the <code>docker</code> group).</p> <p>Alternatively, you can use Podman. Here is how to install it on Mac:</p> <pre><code>brew install podman\npodman machine init\npodman machine start\nln -s /usr/local/bin/podman /usr/local/bin/docker\n</code></pre> <p>You can also specify which container supervisor you want to use by defining an environment variable in your <code>~/.bashrc</code>:</p> <pre><code>export DOCKER=podman\n</code></pre>"},{"location":"developers-guide/Testing-MongooseIM/#freetds-for-mssql-connectivity","title":"FreeTDS for MSSQL connectivity","text":"<p>MongooseIM requires FreeTDS in order to connect to MSSQL container.</p> <p>Please install the driver:</p> <pre><code># Ubuntu\n$ sudo apt install freetds-dev tdsodbc\n\n# CentOS\n$ sudo yum install freetds\n\n# macOS\n$ brew install freetds\n</code></pre> <p>In case you are using an operating system different from Ubuntu or MacOS or have a custom FreeTDS installation, you may have to modify the <code>tools/setup-db.sh</code> script to use the proper paths. Find a configuration block starting with <code>[mongoose-mssql]</code> and change the <code>Driver</code> and <code>Setup</code>. For example, for CentOS change them to <code>/usr/lib64/libtdsodbc.so.0</code> and <code>/usr/lib64/libtdsS.so</code> respectively.</p>"},{"location":"developers-guide/Testing-MongooseIM/#how-to-print-the-instructions","title":"How to print the instructions","text":"<p>The help command prints a list of supported options.</p> <pre><code>./tools/test-runner.sh --help\n</code></pre>"},{"location":"developers-guide/Testing-MongooseIM/#test-runner-examples","title":"Test runner examples","text":"<p>Usage example:</p> <pre><code>./tools/test-runner.sh --db redis --preset internal_mnesia\n</code></pre> <p>The command runs both big (feature) and small (unit) tests.</p> <p>To view more examples, run:</p> <pre><code>./tools/test-runner.sh --examples\n</code></pre>"},{"location":"developers-guide/Testing-MongooseIM/#test-runner-completion","title":"Test runner completion","text":"<p>Test runner supports shell TAB completion.</p> <p>To enable completion in bash or zsh, run:</p> <pre><code>source tools/test-runner-complete.sh\n</code></pre> <p>To view completion examples, run:</p> <pre><code>./tools/test-runner.sh --examples-complete\n</code></pre>"},{"location":"developers-guide/Testing-MongooseIM/#viewing-test-reports","title":"Viewing test reports","text":"<p>To view test execution results, run:</p> <pre><code>./tools/test-runner.sh --show-big-reports\n./tools/test-runner.sh --show-small-reports\n</code></pre>"},{"location":"developers-guide/Testing-MongooseIM/#rerun-big-tests","title":"Rerun big tests","text":"<p>Very often we want to restart a specific suite when some test failed.</p> <p>For example, some test has failed in <code>mam_SUITE</code>. The command was used to execute tests:</p> <pre><code>./tools/test-runner.sh --skip-small-tests --db pgqsl --preset pgsql_mnesia --skip-stop-nodes\n</code></pre> <p><code>--skip-stop-nodes</code> is optional here, because if any big test fails, then nodes would be still running.</p> <p>We can just execute the same command, but it would rebuild nodes and start them.</p> <p>The command can be used instead:</p> <pre><code>./tools/test-runner.sh --rerun-big-tests -- mam\n</code></pre> <p><code>--rerun-big-tests</code> expands into <code>--skip-small-tests --skip-setup-db --dev-nodes --test-hosts --skip-cover --skip-preset</code>.</p> <p>And <code>mam</code> is used to run <code>mam_SUITE</code> suite only.</p>"},{"location":"developers-guide/Testing-MongooseIM/#debugging-big-tests-database","title":"Debugging big tests database","text":"<p>This command opens MySQL shell interface:</p> <pre><code>./tools/open-test-database-shell.sh mysql\n</code></pre> <p>This command opens PgSQL shell interface:</p> <pre><code>./tools/open-test-database-shell.sh pgsql\n</code></pre> <p>This command opens MSSQL shell interface:</p> <pre><code>./tools/open-test-database-shell.sh mssql\n</code></pre> <p>You can use this command to execute SQL queries directly. It's useful when designing new SQL queries.</p>"},{"location":"developers-guide/Testing-MongooseIM/#unit-tests-aka-small-tests","title":"Unit tests (a.k.a. \"small tests\")","text":"<p>These test suites are aimed at testing various modules and libraries standalone, without launching a MongooseIM instance. They are very useful for developing/debugging libraries.</p> <p>The test suites are located in <code>test/</code> directory. To run all of them, use <code>./rebar3 ct</code>; to run just a selected suite, use <code>./rebar3 ct --suite test/my_selected_SUITE</code>. Rebar recompiles all the code automatically, there is no need for a separate compilation step.</p> <p>If all the tests pass, you will get no output and summary log will be available in <code>ct.log</code>. If any of the tests fail the summary log is printed to stdout.</p> <p>Detailed test results in a nice HTML format are saved in <pre><code>_build/test/logs/ct_run.[something][datetime]/\n</code></pre></p> <p>Unit test running example using test runner:</p> <pre><code># Run all small tests, show progress\n./tools/test-runner.sh --skip-big-tests --verbose\n\n# Run sha_SUITE without cover\n./tools/test-runner.sh --skip-big-tests --skip-cover -- sha\n\n# Run the 'general' group in config_parser_SUITE, show progress\n./tools/test-runner.sh --skip-big-tests --verbose -- config_parser:general\n</code></pre>"},{"location":"developers-guide/Testing-MongooseIM/#end-to-end-tests-aka-big-tests","title":"End-to-end tests (a.k.a. \"big tests\")","text":""},{"location":"developers-guide/Testing-MongooseIM/#using-test-runner","title":"Using test runner","text":"<p>Most important options are preset and database:</p> <pre><code># Runs privacy_SUITE and private_SUITE with PostgreSQL\n./tools/test-runner.sh --skip-small-tests --db pgsql --preset pgsql_mnesia -- privacy private\n\n# Runs rdbms_SUITE with MSSQL\n# Initialises a single MongooseIM node (works for some tests only)\n# Disables cover\n./tools/test-runner.sh --skip-small-tests --db mssql --preset odbc_mssql_mnesia --test-hosts mim --dev-nodes mim1 --skip-cover -- rdbms\n</code></pre>"},{"location":"developers-guide/Testing-MongooseIM/#tldr","title":"TL;DR","text":"<p>You can also run the tests \"by hand\", instead of using the test runner.</p> <p>In shell #1:</p> <pre><code>cd $MONGOOSEIM\n./rebar3 compile\nmake devrel\n</code></pre> <p>If databases are needed, for example PostgreSQL, you can run: <pre><code>DB=\"pgsql\" ./tools/setup-db.sh\n</code></pre></p> <p>In shell #2:</p> <pre><code>cd $MONGOOSEIM/_build/mim1/rel/mongooseim\n./bin/mongooseimctl live\n</code></pre> <p>In shell #3:</p> <pre><code>cd $MONGOOSEIM/_build/mim2/rel/mongooseim\n./bin/mongooseimctl live\n</code></pre> <p>In shell #4:</p> <pre><code>cd $MONGOOSEIM/_build/mim3/rel/mongooseim\n./bin/mongooseimctl live\n</code></pre> <p>In shell #5:</p> <pre><code>cd $MONGOOSEIM/_build/fed1/rel/mongooseim\n./bin/mongooseimctl live\n</code></pre> <p>In shell #6:</p> <pre><code>cd $MONGOOSEIM/_build/reg1/rel/mongooseim\n./bin/mongooseimctl live\n</code></pre> <p>Back to shell #1:</p> <pre><code>cd big_tests/\nmake quicktest\n</code></pre> <p>Wait for the tests to finish and celebrate (or wallow in despair and grief)!</p> <p>One-liner alternative for tmux users:</p> <pre><code>./rebar3 compile\nmake devrel\ntmux new-window -n mim1 '_build/mim1/rel/mongooseim/bin/mongooseimctl live'\ntmux new-window -n mim2 '_build/mim2/rel/mongooseim/bin/mongooseimctl live'\ntmux new-window -n mim3 '_build/mim3/rel/mongooseim/bin/mongooseimctl live'\ntmux new-window -n fed1 '_build/fed1/rel/mongooseim/bin/mongooseimctl live'\ntmux new-window -n reg1 '_build/fed1/rel/mongooseim/bin/mongooseimctl live'\n_build/mim1/rel/mongooseim/bin/mongooseimctl started\n_build/mim2/rel/mongooseim/bin/mongooseimctl started\n_build/mim3/rel/mongooseim/bin/mongooseimctl started\n_build/fed1/rel/mongooseim/bin/mongooseimctl started\n_build/reg1/rel/mongooseim/bin/mongooseimctl started\nmake -C big_tests quicktest\n</code></pre> <p>Start a new tmux and paste the commands.</p>"},{"location":"developers-guide/Testing-MongooseIM/#step-by-step-breakdown","title":"Step-by-step breakdown","text":"<p><code>make devrel</code> builds four server nodes, preconfigured for a wide range of features covered by end-to-end tests.</p> <ul> <li><code>$MONGOOSEIM/_build/mim1/rel</code>, for most test SUITEs</li> <li><code>$MONGOOSEIM/_build/mim*/rel</code>, in order to test cluster-related commands;;</li> <li><code>$MONGOOSEIM/_build/fed1/rel</code>, in order to test XMPP federation (server to server communication, S2S).</li> <li><code>$MONGOOSEIM/_build/reg1/rel</code>, in order to test global distribution feature.</li> </ul> <p>In general, running a server in the interactive mode (i.e. <code>mongooseimctl live</code>) is not required to test it, but it's convenient as any warnings and errors can be spotted in real time. It's also easy to inspect the server state or trace execution (e.g. using <code>dbg</code>) in case of anything going wrong in some of the tests. To run the server in the background instead of the interactive mode, use <code>mongooseimctl start &amp;&amp; mongooseimctl started</code>.</p> <p>The <code>quicktest</code> configuration is a relatively comprehensive one, giving good overview of what does and what doesn't work in the system, without repeating tests. Why would we want to ever repeat the tests? In order to test different backends of the same parts of the system. E.g. a message archive might store messages in MySQL/PostgreSQL or Elasticsearch - the glue code between the XMPP logic module and database is different in each case, therefore repeating the same tests with different databases is necessary to guarantee a truthful code coverage measurement.</p>"},{"location":"developers-guide/Testing-MongooseIM/#testing-a-feature-in-development-tdd","title":"Testing a feature in development / TDD","text":"<p>The whole suite takes a significant amount of time to complete. When you develop a new feature, the speed of iterating is crucial to maintain the flow (who doesn't like the feeling?!) and not lose focus.</p> <p>In  <code>$MONGOOSEIM/big_tests/</code> we have:</p> <pre><code>$ tree big_tests/ -L 1 -F\nbig_tests/\n\u251c\u2500\u2500 Makefile\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 default.spec\n\u251c\u2500\u2500 test.config\n\u251c\u2500\u2500 tests/\n\u2514\u2500\u2500 ...\n</code></pre> <p><code>tests/</code> is where the test suites reside.</p> <p><code>*.config</code> files are the suite configuration files - they contain predefined XMPP client specifications, server addresses and XMPP domains to use, and options required by test support libraries (i.e. Escalus).</p> <p><code>*.spec</code> files are the test specifications - they define the configuration file to use, the suites, test groups or individual test cases to run or skip, and some less important things.</p> <p><code>default.spec</code> is the default when running <code>make quicktest</code>, but it can be overridden with a <code>TESTSPEC</code> variable:</p> <pre><code># make sure we're in $MONGOOSEIM/big_tests/\ncd $MONGOOSEIM/big_tests/\nmake quicktest TESTSPEC=my-feature.spec\n</code></pre> <p>To speed up the development cycle, developers usually create a <code>.spec</code> file for each feature (or each project, if you're cloning away) and only enable the suites / test groups they are working on. The allows testing only the parts of the system that are actually being changed. It's worth running <code>default.spec</code> once in a while to check for regressions.</p> <p>Consult the <code>default.spec</code> file to see how to run only selected tests/groups/cases.</p> <p>If you're sure that none of the test dependencies have changed, and you only edited the test suites and/or MongooseIM code, it's possible to speed up the tests by skipping the Rebar dependency and compilation checks by providing <code>PREPARE=</code> (i.e. an empty value):</p> <pre><code>make quicktest PREPARE=\n</code></pre> <p>Consult the <code>big_tests/Makefile</code> to see how it works.</p>"},{"location":"developers-guide/Testing-MongooseIM/#applying-code-changes","title":"Applying code changes","text":"<p>When working on a feature or a bug fix you often modify the code and check if it works as expected. In order to change the code on dev nodes that are already generated (<code>mim*</code> and <code>fed*</code>) recompile the code for a specific node. For example, to update the code on <code>mim1</code> node all you have to do is: <pre><code>./rebar3 as mim1 compile\n</code></pre></p> <p>A similar command applies to other nodes, the important thing being rebar3's profile.</p> <p>When the above command finishes, the code can be reloaded on the server by either reloading changed module(s) in the node's shell, e.g. <code>l(mongoose_rdbms)</code>, or restarting the node.</p>"},{"location":"developers-guide/Testing-MongooseIM/#reading-test-reports","title":"Reading test reports","text":"<p>When finished, the test engine writes detailed html reports into a directory:</p> <pre><code>big_tests/ct_report/ct_run.[gobbledygook][datetime]/\n</code></pre> <p>Each run is saved into a new directory. This snippet:</p> <pre><code>#!/bin/bash\n\nlst=$(ls -rt ct_report | grep ct_run | tail -n 1)\nrm ct_report/lastrun\nln -s $lst ct_report/lastrun\n</code></pre> <p>can be of some help.</p>"},{"location":"developers-guide/Testing-MongooseIM/#checking-coverage","title":"Checking coverage","text":"<p>If you want to check how much of the code is covered by tests, run:</p> <pre><code>make cover_quicktest\n</code></pre> <p>Note</p> <p>You need all the mim nodes (mim1, mim2 and mim3) up and running, even if you only run some of the tests. If any of the nodes is down, the test will crash.</p> <p>This command will recompile and reload the code on dev nodes with coverage enabled and run test suites as defined in the spec. Coverage statistics will be available in <code>big_tests/ct_report/cover.html</code> and <code>coverage</code> subdirectory.</p>"},{"location":"developers-guide/Testing-MongooseIM/#advanced-topics","title":"Advanced topics","text":"<p>There are many more options available. One of them is sequentially testing a number of preset configurations - we do it every day on CircleCI, testing MongooseIM with various OTP versions and database backends. Altogether, we have eight preset configuration.</p> <p>If you want to dig deeper, consult <code>.circleci/config.yml</code>, <code>.github/workflows/ci.yml</code> and <code>tools/test.sh</code>, everything we do is there.</p>"},{"location":"developers-guide/Testing-MongooseIM/#gathering-test-reports-from-tests","title":"Gathering test reports from tests","text":"<p>If you test your MongooseIM fork on GitHub Actions or other CI provider, you might want to access test reports (which also include node logs and crash dumps) that are created by the test runner.</p>"},{"location":"developers-guide/Testing-MongooseIM/#uploading-reports-to-s3","title":"Uploading reports to S3","text":"<p>Our script uses AWS CLI to upload test results to an S3 bucket. Simply set relevant environment variables in your repository settings (at least <code>AWS_ACCESS_KEY_ID</code> and <code>AWS_SECRET_ACCESS_KEY</code> have to be set), and enjoy test reports landing straight into your bucket (<code>AWS_BUCKET</code> variable should store the bucket's name).</p>"},{"location":"developers-guide/Testing-MongooseIM/#uploading-reports-to-google-drive","title":"Uploading reports to Google Drive","text":"<p>To store test results in Google Drive you need to create a new project and obtain service account credentials. You must also add Google Drive API to your project - to do this, navigate to APIs &amp; Services in your project console and find &amp; add Google Drive API in the Library tab. Once downloaded, encode the credentials file with base64 (e.g. <code>cat serviceCreds.json | base64</code>) and use the result as <code>GDRIVE_SERVICE_ACCOUNT_CREDENTIALS</code> environment variable in your repository settings.</p>"},{"location":"developers-guide/Testing-MongooseIM/#saving-reports-on-your-personal-account","title":"Saving reports on your personal account","text":"<p>The uploaded files will belong to the project that you created, i.e. will not be immediately visible from your personal Google Drive UI. To be able to upload files to your personal account, you can share the reports' directory with the project account. First, note the ID of the project's user that you created to gain the service account credentials (e.g. <code>test-123@fair-smile-123456.iam.gserviceaccount.com</code>). You can see this on the Service Accounts tab of the project console. Now, create a directory on your Google Drive that will serve as the test root directory. Go into the directory's sharing options and paste in the project's user ID, granting it write access. Click to expand the advanced sharing options and note the ID of the shared directory that's displayed in the share link (e.g. if the link is <code>https://drive.google.com/drive/folders/1234567890abcdef?usp=sharing</code>, the directory's ID is <code>1234567890abcdef</code>). Finally, set <code>GDRIVE_PARENT_DIR</code> environment variable of your build to the directory ID that you noted in the previous step.</p>"},{"location":"developers-guide/Testing-MongooseIM/#load-testing","title":"Load testing","text":"<p>Alongside CI, we do also CLT (Continuous Load Testing). We use amoc and amoc-arsenal-xmpp to perform tests that give us a feedback on changes to MongooseIM performance.</p>"},{"location":"developers-guide/accumulators/","title":"Accumulators","text":"<p>XMPP stanza processing starts in the <code>mongoose_c2s</code> module, which receives the stanza from a socket, or in <code>ejabberd_s2s_in</code> which receives stanzas from federated XMPP clusters. The stanza is processed and eventually it and/or other messages are sent out, either to the original sender, to another c2s process within the same MongooseIM installation, or to another XMPP server.</p> <p>At the beginning of the main processing chain an accumulator is created containing following set of keys:</p> <ul> <li><code>ref</code> - A unique reference of the acc, useful for tracing.</li> <li><code>timestamp</code> - An Erlang timestamp retrieved from <code>os:timestamp()</code>.</li> <li><code>origin_pid</code> - A PID of the process that created the accumulator.</li> <li><code>origin_location</code> - <code>{Module, Function Line}</code> - A place in the code where the accumulator was created.</li> <li><code>origin_stanza</code> - Original stanza that triggered the processing (in a binary).</li> <li><code>lserver</code> - Nameprepped domain of the processing context.</li> <li><code>host_type</code> - Host type that the domain belongs to.</li> <li><code>statem_acc</code> - Data related to the C2S state machine.</li> <li><code>stanza</code> - A map with information about the stanza being routed. May be missing in some processing chains (when they are not triggered by a stanza)!<ul> <li><code>element</code> - <code>exml:element()</code> with the current stanza being routed.</li> <li><code>from_jid</code>, <code>to_jid</code> - <code>jid:jid()</code> with the sender and the recipient.</li> <li><code>name</code> - A name of the top-level element in <code>element</code>.</li> <li><code>type</code> - A value of <code>type</code> attribute of the top-level element. If the attribute is missing, this field contains <code>undefined</code>.</li> <li><code>ref</code> - A reference of routed stanza.</li> </ul> </li> </ul> <p>It is then passed through all the stages until it reaches the end of its life. Throughout the process it is the very same accumulator; it is therefore possible to store a value in it on one stage of the processing and retrieve the same value later on.</p> <p>The main assumption is that whatever MongooseIM does, it is always triggered by a stanza entering the system, with some exceptions, such as a couple of <code>mongooseimctl</code> operations, which create stanza-less accumulators. The stanza should always be packed into an accumulator and passed on, so that internally every action is performed the same way.</p> <p>There are three main benefits from this approach:</p> <ol> <li>Performance - if we need to do something involving inspecting a stanza or more complicated operations (e.g. privacy check) we don't need to do it multiple times on various stages of processing - instead we can do it once and store the result in an accumulator.</li> <li>Debugging - it is now very easy to produce an exact track record of a stanza.</li> <li>Simplified implementation of modules which inherently involve multi-stage processing (e.g. <code>mod_amp</code>).</li> </ol>"},{"location":"developers-guide/accumulators/#api","title":"API","text":"<p><code>mongoose_acc</code> module exports <code>t()</code> type which is the accumulator type.</p>"},{"location":"developers-guide/accumulators/#newnew_acc_params","title":"<code>new(new_acc_params())</code>","text":"<p>A constructor for accumulators. <code>new_acc_params()</code> is a map with following supported keys:</p> <ul> <li><code>location</code> - Should be a <code>{Module, Function, Line}</code> tuple (may be constructed with <code>?LOCATION</code> macro from <code>mongoose.hrl</code>). Its format is not enforced by the acc logic but Dialyzer will most probably complain about any other type.</li> <li><code>lserver</code> - Nameprepped domain of the processing context.</li> <li><code>host_type</code> (optional) - Host type that the domain belongs to.</li> <li><code>statem_acc</code> (optional) - Data related to the C2S state machine.</li> <li><code>element</code> (optional) - If present, it will be used as a source for the <code>stanza</code> map.</li> <li><code>from_jid</code>, <code>to_jid</code> (optional) - Values used to override <code>from</code> and <code>to</code> attributes of the <code>element</code>, respectively.</li> </ul> <p>If <code>element</code> is provided, the sender and recipient JIDs are extracted, either from the element itself, or from <code>to_jid</code> and <code>from_jid</code> parameters. The call will fail with an exception if it's not possible.</p> <p>While allowed, stanza-less accumulators usage should be avoided.</p>"},{"location":"developers-guide/accumulators/#getters-for-predefined-fields","title":"Getters for predefined fields","text":"<ul> <li><code>ref(t())</code></li> <li><code>timestamp(t())</code></li> <li><code>lserver(t())</code></li> <li><code>host_type(t())</code></li> <li><code>element(t())</code></li> <li><code>to_jid(t())</code></li> <li><code>from_jid(t())</code></li> <li><code>get_statem_acc(t())</code></li> <li><code>packet(t())</code> - Returns an <code>mongoose_c2s:packet()</code> if there is a stanza in the accumulator.</li> <li><code>stanza_name(t())</code> - Returns <code>name</code> value from <code>stanza</code> map.</li> <li><code>stanza_type(t())</code> - Returns <code>type</code> value from <code>stanza</code> map.</li> <li><code>stanza_ref(t())</code> - Returns <code>ref</code> value from <code>stanza</code> map. This is not the same as <code>ref(t())</code>!</li> </ul>"},{"location":"developers-guide/accumulators/#update_stanzastanza_params-t","title":"<code>update_stanza(stanza_params(), t())</code>","text":"<p>Replaces the whole <code>stanza</code> field in the accumulator with params provided in <code>stanza_params()</code>, which is a map of 3 fields: <code>element</code>, <code>from_jid</code>, <code>to_jid</code>. The same rules apply as in the case of constructor (<code>new/1</code>) but this time <code>element</code> field is mandatory.</p>"},{"location":"developers-guide/accumulators/#access-to-namespaced-fields","title":"Access to namespaced fields","text":"<p>It is possible to store and retrieve any data in the accumulator, that is related to the processing. There is no scope protection, so every module may access all namespaces and keys inside them.</p> <ul> <li><code>set(Namespace :: any(), Key :: any(), Value :: any(), t())</code></li> <li><code>set_permanent(Namespace :: any(), Key :: any(), Value :: any(), t())</code> - Upserts a field, which won't be removed during <code>strip</code> operation.</li> <li><code>append(Namespace :: any(), Key :: any(), Value :: any(), t())</code> - In order to use this function, a <code>Namespace:Key</code> field must not exist or must be a list. <code>Value</code> is appended to the end of this list. If <code>Value</code> is a list, then a <code>OldValue ++ Value</code> operation is performed. In other cases <code>OldValue ++ [Value]</code> is used.</li> <li><code>get(Namespace :: any(), Key :: any(), t())</code> - Returns a value of a specified field. Will crash if the <code>NS:Key</code> is not found.</li> <li><code>get(Namespace :: any(), Key :: any(), Default :: any(), t())</code> - Returns a value of a specified field or <code>Default</code> if <code>NS:Key</code> is not found.</li> <li><code>delete(Namespace :: any(), Key :: any(), t())</code> - Removes a specified field, no matter if it is permanent or not.</li> </ul>"},{"location":"developers-guide/accumulators/#stripping","title":"Stripping","text":"<p>Accumulator is used mostly to cache values for reuse within a c2s process; when it goes out to somewhere else, it is stripped of all unnecessary attributes except for the non-strippable ones, e.g.</p> <ul> <li><code>ref</code></li> <li><code>timestamp</code></li> <li><code>origin_pid</code></li> <li><code>origin_location</code></li> <li><code>non_strippable</code> - A set of permanent <code>NS:Key</code> pairs.</li> </ul> <p>For a complete list, see <code>mongoose_acc:default_non_strippable/0</code></p> <p>If you want it to carry some additional values along with it, please use a dedicated api for setting \"permanent\" fields:</p> <pre><code>Acc2 = mongoose_acc:set_permanent(myns, myprop, 123, Acc1),\n</code></pre> <p>Permanent fields may be retrieved with ordinary <code>get/3,4</code> functions. There are also functions <code>get_permanent_keys/1</code> and <code>get_permanent_fields/1</code> for extracting all at once.</p> <p>The rationale behind stripping an accumulator is that some values stored in it are context-dependent. For example, at the beginning <code>lserver</code> refers to the host of the sender C2S. When an accumulator goes to the c2s of the recipient, the <code>lserver</code> attribute may change. There are also many cached values which are not valid anymore when user changes (e.g. privacy checks).</p> <p>In order to strip an accumulator, please use <code>strip(strip_params(), t())</code>, where <code>strip_params()</code> is a map of:</p> <ul> <li><code>lserver</code> - New domain. Obviously, may be equal to the old value.</li> <li><code>host_type</code> - Host type associated with the new domain, if there is one.</li> <li><code>element</code>, <code>from_jid</code>, <code>to_jid</code> - The same rules apply as in <code>update_stanza/2</code>.</li> </ul>"},{"location":"developers-guide/accumulators/#main-principles-of-an-accumulator-processing","title":"Main principles of an accumulator processing","text":"<ol> <li>An accumulator is created when a stanza enters the server.</li> <li>An XML stanza is never passed around as a pure <code>exml:element()</code>.</li> <li>An accumulator is stripped when it is passed to a different context (e.g. another c2s process).</li> <li>If a process produces more stanzas to be routed, they must reuse the original acc but with the stanza replaced with <code>update_stanza/2</code>.</li> </ol>"},{"location":"developers-guide/accumulators/#hooks","title":"Hooks","text":"<p>Many of the MongooseIM functionalities are implemented in submodules which attach their handlers to hooks (this is covered in detail in \"Hooks and handlers\"). When it comes to the accumulators, the following rules apply:</p> <ul> <li>If a hook is related to stanza processing, a Mongoose accumulator should be provided. A hook handler may modify an accumulator in every permitted way (i.e. shouldn't directly modify acc fields, bypassing <code>mongoose_acc</code> API) and should return the execution result in the <code>hook:result</code> field. This is not enforced but should be followed by convention.</li> <li>Avoid passing superfluous arguments to handlers - e.g. an <code>LServer</code> in hook args is redundant since it is already present in the accumulator.</li> </ul> <p>Most handlers have already been modified so that they accept an instance of <code>mongoose_acc:t()</code> as the first argument and return value by storing it inside it. How the accumulator is used within a module is up to the implementers of the module.</p>"},{"location":"developers-guide/accumulators/#iqs-and-accumulators","title":"IQs and accumulators","text":"<p><code>mongoose_iq</code> module exposes a dedicated API for accessing IQ-related accumulator fields. These are:</p> <ul> <li><code>info(Acc)</code> - Returns a <code>#iq{}</code> record produced from a stanza stored in the accumulator. May be <code>invalid</code> or <code>not_iq</code> if the stanza is not a valid IQ.</li> <li><code>xmlns(Acc)</code> - Returns XMLNS of the first subelement inside an IQ. In most cases it is a namespace of <code>&lt;query/&gt;</code> subelement. May be <code>undefined</code>.</li> <li><code>command(Acc)</code> - Returns the name of a first subelement inside an IQ. May be <code>undefined</code>.</li> </ul> <p>These functions ensure that cached information matches the accumulator's stanza, so all of them return a tuple with a possibly updated acc as a second element.</p>"},{"location":"developers-guide/accumulators/#sample-usage-actual-and-potential","title":"Sample usage, actual and potential","text":""},{"location":"developers-guide/accumulators/#privacy-check","title":"Privacy check","text":"<p>Stanzas are often checked against privacy lists. According to the current <code>mongoose_privacy:privacy_check_packet</code> implementation, the result is stored in an accumulator so if a check has to be repeated it is just one map read.</p>"},{"location":"developers-guide/accumulators/#tracing","title":"Tracing","text":"<p><code>origin_pid</code> and <code>origin_location</code> fields are immutable for the lifespan of a single accumulator. There are many places in the server, where an accumulator may be created, so <code>origin_location</code> makes it much easier to find out what event has triggered the processing, and <code>origin_pid</code> identifies the process in which it happened.</p>"},{"location":"developers-guide/accumulators/#performance-measurement","title":"Performance measurement","text":"<p>Given that each accumulator has a timestamp denoting its creation time, it is now very easy to implement a metric showing the stanza processing time, or even multiple metrics splitting it into stages.</p>"},{"location":"developers-guide/domain_management/","title":"Domain management","text":"<p>Warning</p> <p>Some modules do not work with dynamic domains. This is also the case for <code>s2s</code> and the XMPP components (XEP-0114) mechanism, as configured in the <code>listen.service</code> section.</p>"},{"location":"developers-guide/domain_management/#mongooseim-core-component","title":"MongooseIM core component","text":"<p>Implemented by <code>mongoose_domain_core</code> module.</p> <p>It is based on gen_server &amp; ETS table w. public read access. This module is local for the node, it does not implement any sync across the nodes in a cluster. This component is responsible for dynamic routing, it is always started by MIM even if there is no support of dynamic domain names configured.</p> <p>It provides the following interfaces:</p> <ul> <li>Init - accepts the list of initial domain/host_type pairs provided in   config file, and the list of host_types that can be used for dynamic insertion.   Any of these lists can be empty, initial list of domain/host_type pairs can   have some unique host_types not mentioned in the host_types list.   The component is initialised by the main MIM supervisor.   Implemented in <code>mongoose_domain_sup:start_link/0</code>.</li> <li>Insert - adding new domain/host_type pair.   This function is idempotent. It returns success on an attempt to insert the existing data,   but fails if ETS already has the domain name associated with another host type.   Implemented in <code>mongoose_domain_api:insert_domain(Domain, HostType)</code>.</li> <li>Remove - This function is idempotent. It deletes existing   domain/host_type pairs.   It is impossible to delete domain/host_type pairs specified on init   of the component.   Implemented in <code>mongoose_domain_api:delete_domain(Domain)</code>.</li> <li>Get host type by domain.   Implemented in <code>mongoose_domain_api:get_host_type(Domain).</code>.</li> <li>Get all domains configured for the host_type.    Implemented in <code>mongoose_domain_api:get_domains_by_host_type(HostType).</code>.</li> <li>Get the list of the host_types provided during initialisation.   Implemented in <code>mongoose_domain_api:get_all_static().</code>.</li> </ul> <p><code>mongoose_domain_core</code> implementation:</p> <ul> <li>Has <code>mongoose_domain_core</code> table.</li> <li>Default (initial) domains are static.</li> <li>Disabled or deleted domains are not in <code>mongoose_domain_core</code>.</li> <li>Static domains are non-mutable.</li> <li>Static domains are not replicated.</li> <li>Static domains has priority above DB domains.</li> </ul>"},{"location":"developers-guide/domain_management/#mongooseim-service","title":"MongooseIM service","text":"<p>As described in Services. Implements the service behaviour. Implemented by <code>service_domain_db</code> module.</p> <p>This service provides an interface for dynamic management of domain names. It has persistent storage (RDBMS) where it stores information about domain names. This service ensures synchronization of dynamically managed domain names across different nodes in the cluster.</p> <p>The minimal set of information associated with domain name is this:</p> <ul> <li>Host type</li> <li>Status (enabled/disabled)</li> </ul> <p>This service provides the following interfaces:</p> <ul> <li>Init - on init all the \u201cenabled\u201d domain names from the persistent storage   is added to the core MIM component described above.</li> <li>Add domain name (w/ host type) - This function is idempotent.   An added domain is always \u201cenabled\u201d by default - it must be added in the core MIM   component described in the previous section.   If it\u2019s successfully enabled than Information about the domain name is   added into persistent storage and distributed across all the nodes in the cluster.</li> <li>Disabling/Enabling domain name - This function is idempotent. The status   of the existing domain is always changed on successful call.   If domain name is enabled, then it is added in the core MIM component.   On disabling domain name is deleted from the core MIM component.   Change of the status is distributed across all the nodes in the cluster.</li> <li>Remove the domain name - This function is idempotent.   Domain name is deleted from the core MIM component (if required) and from the DB.   This action is distributed across all the nodes in the cluster.</li> </ul> <p>In case of any issues (domain name is already configured with another host_type or host_type is not supported), errors are logged.</p> <p>The database schema contains two tables:</p> <ul> <li><code>domain_settings</code> - one record per domain. Maps <code>domain</code> name to <code>host_type</code> and <code>enabled</code> status.</li> <li><code>domain_events</code> - the log of changes. The only reason it exists is that   we can track updates in the <code>domain_settings</code> and get apply updates across different nodes.   The old events are eventually deleted from the table.  Removal is triggered by   all nodes of MongooseIM, that have the service configured.</li> </ul> <p><code>service_domain_db</code> module does two tasks:</p> <ul> <li>Initially downloads domains from <code>domain_settings</code> table, using sorting by id.</li> <li>Waits for <code>check_for_updates</code> message and updates core component, depending   on records in the <code>domain_events</code> table.</li> </ul> <p>We use <code>id</code> field to sort records when paginating.</p>"},{"location":"developers-guide/domain_management/#domain-removal","title":"Domain removal","text":"<p>You cannot delete domains with unknown host-type. Configure host-type first to delete such domains.</p> <p>Modules which store data in RDBMS and support dynamic domains will remove all persistent data associated with a domain when its removal is requested. This is not the case for NoSQL databases or Mnesia. Because of that, we recommend using RDBMS with dynamic domains. Please note, that <code>mod_auth_token</code> is the only exception for now and does not remove data from RDBMS when removing a domain.</p>"},{"location":"developers-guide/domain_management/#service-options","title":"Service options","text":"<p>Described in the <code>services</code> section.</p>"},{"location":"developers-guide/domain_management/#command-line-interface","title":"Command Line Interface","text":"<p>You can manage the domains with the <code>mongooseimctl</code> command. Some examples are provided below:</p>"},{"location":"developers-guide/domain_management/#add-domain","title":"Add domain:","text":"<pre><code>./mongooseimctl domain addDomain --domain example.com --hostType type1\n</code></pre>"},{"location":"developers-guide/domain_management/#delete-domain","title":"Delete domain:","text":"<pre><code>./mongooseimctl domain removeDomain --domain example.com --hostType type1\n</code></pre>"},{"location":"developers-guide/domain_management/#disable-domain","title":"Disable domain:","text":"<pre><code>./mongooseimctl domain disableDomain --domain example.com\n</code></pre>"},{"location":"developers-guide/domain_management/#enable-domain","title":"Enable domain:","text":"<pre><code>./mongooseimctl domain enableDomain --domain example.com\n</code></pre> <p>Run <code>./mongooseimctl domain</code> to get more information about all supported operations.</p>"},{"location":"developers-guide/domain_management/#api","title":"API","text":"<p>You can manage domains with one of our API's:</p> <ul> <li>The GraphQL API has the same funtionality as the command line interface. The queries and mutations for domains are grouped under the <code>domain</code> category.</li> <li>The REST API (deprecated) supports domain management as well. See Dynamic Domains for details.</li> </ul>"},{"location":"developers-guide/hooks_description/","title":"Selected hooks description","text":"<p>This is a brief documentation for a few selected hooks. Though hooks &amp; handlers differ in what they are there to do, it is not necessary to describe them all, because the mechanism is general. The following is meant to give you the idea of how the hooks work, what they are used for and the various purposes they can serve.</p>"},{"location":"developers-guide/hooks_description/#user_send_","title":"<code>user_send_*</code>","text":"<p><pre><code>mongoose_c2s_hooks:user_send_packet(HostType, Acc, Params)\nmongoose_c2s_hooks:user_send_message(HostType, Acc, Params)\nmongoose_c2s_hooks:user_send_presence(HostType, Acc, Params)\nmongoose_c2s_hooks:user_send_iq(HostType, Acc, Params)\nmongoose_c2s_hooks:user_send_xmlel(HostType, Acc, Params)\n</code></pre> These hooks are run in <code>mongoose_c2s</code> after the C2S process receives an XML element from the client.</p> <p>The hooks won't be called for stanzas arriving from a user served by a federated server (i.e. on a server-to-server connection handled by <code>ejabberd_s2s</code>).</p> <p>The logic depends on the C2S state, which changes during the connection, authentication and resource binding process:</p>"},{"location":"developers-guide/hooks_description/#hooks-called-for-session_established","title":"Hooks called for <code>session_established</code>","text":"<p>Some rudimentary verification of the stanza is done once it is received from the socket:</p> <ul> <li>if present, the <code>from</code> attribute of the stanza is checked against the identity of the user whose session the process in question serves;   if the identity does not match the contents of the attribute, an error is returned,</li> <li>the recipient JID (<code>to</code> attribute) format is verified.</li> </ul> <p>After successful checks, the following hooks are called. The first one is <code>user_send_packet</code>, which is called for all received XML elements. Next, depending on the type of the element, one of the following hooks is called:</p> <ul> <li><code>user_send_message</code> for messages,</li> <li><code>user_send_presence</code> for presences,</li> <li><code>user_send_iq</code> for IQ (info/query) stanzas,</li> <li><code>user_send_xmlel</code> for other XML elements.</li> </ul> <p>These type-specific hooks should be used instead of <code>user_send_packet</code> when possible.</p>"},{"location":"developers-guide/hooks_description/#hooks-called-for-other-states","title":"Hooks called for other states","text":"<p>If the session is not established (e.g. the client hasn't authenticated or its resource is not bound yet), only the <code>user_send_xmlel</code> hook is called regardless of the XML element type. No other <code>user_send_*</code> hooks are called, and no stanza checks are performed.</p>"},{"location":"developers-guide/hooks_description/#handler-examples","title":"Handler examples","text":"<p>These hooks are handled by the following modules:</p> <ul> <li><code>mod_blocking</code> - handles IQ requests for blocking lists.</li> <li><code>mod_caps</code> - detects and caches capability information sent with certain presences for later use.</li> <li><code>mod_carboncopy</code> - forwards messages to all the user's resources which have carbon copying enabled.</li> <li><code>mod_event_pusher</code> - sends selected messages to an external service.</li> <li><code>mod_inbox</code> - stores messages in the user's inbox.</li> <li><code>mod_mam</code> - stores outgoing messages in an archive.</li> <li><code>mod_ping</code> - upon reception of every message from the client, this module (re)starts a timer;  if nothing more is received from the client within 60 seconds, it sends an IQ ping, to which the client should reply - which starts another timer.</li> <li><code>mod_presence</code> - handles presence stanzas, updating the user presence state and broadcasting presence updates.</li> <li><code>mod_privacy</code> - filters sent stanzas according to privacy lists and handles privacy-related IQ requests.</li> <li><code>mod_register</code> - registers a new user when a registration IQ is received. <code>user_send_xmlel</code> is used because the stanza is received while the session is not established.</li> <li><code>mod_smart_markers</code> - checks if the stanza contains chat markers info and stores the update.</li> <li><code>mod_stream_management</code> - counts stanzas sent by the client and handles special XML elements like <code>&lt;a&gt;</code> and <code>&lt;enable&gt;</code>.</li> </ul>"},{"location":"developers-guide/hooks_description/#filter_packet-and-filter_local_packet","title":"<code>filter_packet</code> and <code>filter_local_packet</code>","text":"<pre><code>mongoose_hooks:filter_packet({From, To, Acc, Packet})\nmongoose_hooks:filter_local_packet({From, To, Acc, Packet})\n</code></pre> <p>These hooks are run when the packet is being routed by <code>ejaberd_router:route/4</code>, which is the most general function used to route stanzas across the entire cluster. For example, <code>mongoose_c2s</code> calls it after calling the <code>user_send_message</code> or <code>user_send_iq</code> hook, and multiple modules use it for sending replies and errors.</p> <ul> <li><code>filter_packet</code> is run by <code>mongoose_router_global</code> for all routed packets. It is called at the start of the routing procedure.</li> <li><code>filter_local_packet</code> is run by <code>mongoose_local_delivery</code> when the packet is being routed to a domain hosted by the local server.</li> </ul> <p>The handlers expect the <code>{From, To, Acc, Packet}</code> accumulator as their first argument. The stanza can be filtered out (in case the handler returns <code>drop</code>), left unchanged or modified.</p> <p><code>filter_packet</code> is a global hook</p> <p>Note the hook code inside <code>mongoose_hooks</code>: <pre><code>filter_packet(Acc) -&gt;\n    run_global_hook(filter_packet, Acc, #{}).\n</code></pre> This hook is run not for a host type, but globally across the whole cluster. Keep that in mind when registering the handlers and appropriately use the atom <code>global</code> instead of a host type as the second argument.</p>"},{"location":"developers-guide/hooks_description/#handler-examples_1","title":"Handler examples","text":"<p>These hooks are handled by the following modules:</p> <ul> <li><code>mod_domain_isolation</code> - filters out cross-domain stanzas.</li> <li><code>mod_event_pusher</code> - sends out configured events (e.g. push notifications) for incoming stanzas.</li> <li><code>mod_inbox</code> - stores incoming messages in the recipient's inbox.</li> <li><code>mod_mam</code> - stores incoming messages in the recipient's archive, and adds MAM-related elements to the message.</li> <li><code>mod_pubsub</code> - for each subscription authorization form sent by a node owner, the subscription state is updated, and the stanza is dropped.</li> <li><code>mod_smart_markers</code> - filters out chat markers, because they are handled separately by <code>mod_offline_chatmarkers</code>.</li> </ul>"},{"location":"developers-guide/hooks_description/#user_receive_","title":"<code>user_receive_*</code>","text":"<pre><code>mongoose_c2s_hooks:user_receive_packet(HostType, Acc, Params)\nmongoose_c2s_hooks:user_receive_message(HostType, Acc, Params)\nmongoose_c2s_hooks:user_receive_presence(HostType, Acc, Params)\nmongoose_c2s_hooks:user_receive_iq(HostType, Acc, Params)\nmongoose_c2s_hooks:user_receive_xmlel(HostType, Acc, Params)\n</code></pre> <p>These hooks are run in <code>mongoose_c2s</code> after the recipient's  C2S process receives an XML element and before sending it to the user.</p> <p>The hooks won't run for stanzas which are destined to users of a different XMPP domain served by a federated server, connection to which is handled by <code>ejabberd_s2s</code>.</p> <p>The first hook is <code>user_receive_packet</code>, which is called for all received XML elements. Next, depending on the type of the stanza, one of the following hooks is called:</p> <ul> <li><code>user_receive_message</code> for messages,</li> <li><code>user_receive_presence</code> for presences,</li> <li><code>user_receive_iq</code> for IQ (info/query) stanzas,</li> <li><code>user_receive_xmlel</code> for other XML elements.</li> </ul> <p>These type-specific hooks should be used instead of <code>user_receive_packet</code> when possible.</p>"},{"location":"developers-guide/hooks_description/#handler-examples_2","title":"Handler examples","text":"<p>These hooks are handled by the following modules:</p> <ul> <li><code>mod_caps</code> - detects and caches capability information sent with certain messages for later use.</li> <li><code>mod_carboncopy</code> - forwards messages to all the user's resources which have carbon copying enabled.</li> <li><code>mod_last</code> - filters queries for user's last activity according to presence subscriptions.</li> <li><code>mod_presence</code> - handles incoming presences from other users, updating the presence status, and responds to presence probes.</li> <li><code>mod_privacy</code> - filters received stanzas according to privacy lists.</li> <li><code>mod_stream_management</code> - filters out stanzas with conflicting session ID's.</li> </ul>"},{"location":"developers-guide/hooks_description/#offline_message_hook","title":"<code>offline_message_hook</code>","text":"<pre><code>mongoose_hooks:offline_message_hook(Acc, From, To, Packet)\n</code></pre> <p><code>ejabberd_sm</code> runs this hook for each message which cannot be delivered, because no resource (i.e. device or desktop client application) of its recipient is available online for delivery.</p>"},{"location":"developers-guide/hooks_description/#handler-examples_3","title":"Handler examples","text":"<p>This hook is handled by the following modules, listed in the order of execution:</p> <ul> <li> <p><code>mod_offline_chatmarkers</code> - for chat marker messages, the handler stores them and returns <code>{stop, Acc}</code>, preventing further handlers from being called.</p> </li> <li> <p><code>mod_offline</code> - stores messages in a persistent way until the recipient comes online, and the message can be successfully delivered. The handler returns <code>{stop, Acc}</code> for all messages, preventing further handlers from being called.</p> </li> <li> <p><code>mod_offline_stub</code> - returns <code>{stop, Acc}</code> for all messages, preventing further handlers from being called.</p> </li> <li> <p><code>ejabberd_sm</code> - calls <code>ejabberd_sm:bounce_offline_message</code>, which responds with the <code>&lt;service-unavailable/&gt;</code> stanza error. In the case of using <code>mod_mam</code> the message is actually stored, and no such error should be sent - that's why the module <code>mod_offline_stub</code> can be enabled.</p> </li> </ul>"},{"location":"developers-guide/hooks_description/#remove_user","title":"<code>remove_user</code>","text":"<pre><code>mongoose_hooks:remove_user(Acc, LServer, LUser)\n</code></pre> <p><code>remove_user</code> is run by <code>ejabberd_auth</code> - the authentication module - when a request is made to remove the user from the database of the server.</p>"},{"location":"developers-guide/hooks_description/#handler-examples_4","title":"Handler examples","text":"<p>This hook is used by multiple modules, since removing a user requires many cleanup operations:</p> <ul> <li><code>mod_auth_token</code> removes user's authentication tokens;</li> <li><code>mod_event_pusher</code> disables user's push notifications;</li> <li><code>mod_inbox</code> removes user's inbox;</li> <li><code>mod_last</code> removes last activity information (XEP-0012: Last Activity);</li> <li><code>mod_mam</code> removes the user's message archive;</li> <li><code>mod_muc_light</code> quits multi-user chat rooms;</li> <li><code>mod_offline</code> deletes the user's offline messages;</li> <li><code>mod_privacy</code> removes the user's privacy lists;</li> <li><code>mod_private</code> removes the user's private xml data storage;</li> <li><code>mod_pubsub</code> unsubscribes from publish/subscribe channels;</li> <li><code>mod_roster</code> removes the user's roster from the database;</li> <li><code>mod_smart_markers</code> removes chat markers stored for the user;</li> <li><code>mod_vcard</code> removes user's vCard information.</li> </ul>"},{"location":"developers-guide/hooks_description/#node_cleanup","title":"<code>node_cleanup</code>","text":"<pre><code>mongoose_hooks:node_cleanup(Node)\n</code></pre> <p><code>node_cleanup</code> is run by a <code>mongooseim_cleaner</code> process which subscribes to <code>nodedown</code> messages. Currently, the hook is run inside a global transaction (via <code>global:trans/4</code>).</p> <p>The job of this hook is to remove all processes registered in Mnesia. MongooseIM uses Mnesia to store processes through which messages are then routed - like user sessions or server-to-server communication channels - or various handlers, e.g. IQ request handlers. Those must obviously be removed when a node goes down, and to do this the modules <code>ejabberd_local</code>, <code>ejabberd_router</code>, <code>ejabberd_s2s</code>, <code>ejabberd_sm</code> and <code>mod_bosh</code> register their handlers with this hook.</p> <p>Number of retries for this transaction is set to 1 which means that in some situations the hook may be run on more than one node in the cluster, especially when there is little garbage to clean after the dead node. Setting retries to 0 is not good decision as it was observed that in some setups it may abort the transaction on all nodes.</p>"},{"location":"developers-guide/hooks_description/#session_opening_allowed_for_user","title":"<code>session_opening_allowed_for_user</code>","text":"<pre><code>allow == mongoose_hooks:session_opening_allowed_for_user(HostType, JID)\n</code></pre> <p>This hook is run after authenticating when user sends the IQ opening a session. Handler function are expected to return:</p> <ul> <li><code>allow</code> if a given JID is allowed to open a new sessions (the default)</li> <li><code>deny</code> if the JID is not allowed but other handlers should be run</li> <li><code>{stop, deny}</code> if the JID is not allowed but other handlers should not be run</li> </ul> <p>In the default implementation the hook is not used, built-in user control methods are supported elsewhere. This is the perfect place to plug in custom security control.</p>"},{"location":"developers-guide/hooks_description/#other-hooks","title":"Other hooks","text":"<ul> <li>acc_room_affiliations</li> <li>adhoc_local_commands</li> <li>adhoc_sm_commands</li> <li>amp_check_condition</li> <li>amp_determine_strategy</li> <li>amp_verify_support</li> <li>anonymous_purge_hook</li> <li>auth_failed</li> <li>c2s_stream_features</li> <li>can_access_identity</li> <li>can_access_room</li> <li>caps_recognised</li> <li>check_bl_c2s</li> <li>disco_info</li> <li>disco_local_features</li> <li>disco_local_identity</li> <li>disco_local_items</li> <li>disco_muc_features</li> <li>disco_sm_features</li> <li>disco_sm_identity</li> <li>disco_sm_items</li> <li>does_user_exist</li> <li>extend_inbox_result</li> <li>failed_to_store_message</li> <li>filter_local_packet</li> <li>filter_packet</li> <li>filter_pep_recipient</li> <li>filter_room_packet</li> <li>filter_unacknowledged_messages</li> <li>forbidden_session_hook</li> <li>foreign_event</li> <li>forget_room</li> <li>get_key</li> <li>get_mam_muc_gdpr_data</li> <li>get_mam_pm_gdpr_data</li> <li>get_pep_recipients</li> <li>get_personal_data</li> <li>inbox_unread_count</li> <li>invitation_sent</li> <li>is_muc_room_owner</li> <li>join_room</li> <li>leave_room</li> <li>mam_archive_id</li> <li>mam_archive_message</li> <li>mam_archive_size</li> <li>mam_archive_sync</li> <li>mam_flush_messages</li> <li>mam_get_behaviour</li> <li>mam_get_prefs</li> <li>mam_lookup_messages</li> <li>mam_muc_archive_id</li> <li>mam_muc_archive_message</li> <li>mam_muc_archive_size</li> <li>mam_muc_archive_sync</li> <li>mam_muc_flush_messages</li> <li>mam_muc_get_behaviour</li> <li>mam_muc_get_prefs</li> <li>mam_muc_lookup_messages</li> <li>mam_muc_remove_archive</li> <li>mam_muc_retraction</li> <li>mam_muc_set_prefs</li> <li>mam_remove_archive</li> <li>mam_retraction</li> <li>mam_set_prefs</li> <li>mod_global_distrib_known_recipient</li> <li>mod_global_distrib_unknown_recipient</li> <li>node_cleanup</li> <li>offline_groupchat_message_hook</li> <li>offline_message_hook</li> <li>packet_to_component</li> <li>presence_probe_hook</li> <li>privacy_check_packet</li> <li>privacy_get_user_list</li> <li>privacy_iq_get</li> <li>privacy_iq_set</li> <li>privacy_list_push</li> <li>privacy_updated_list</li> <li>push_notifications</li> <li>register_subhost</li> <li>register_user</li> <li>remove_domain</li> <li>remove_user</li> <li>reroute_unacked_messages</li> <li>resend_offline_messages_hook</li> <li>room_exists</li> <li>room_new_affiliations</li> <li>room_packet</li> <li>roster_get</li> <li>roster_get_jid_info</li> <li>roster_get_subscription_lists</li> <li>roster_get_versioning_feature</li> <li>roster_groups</li> <li>roster_in_subscription</li> <li>roster_out_subscription</li> <li>roster_process_item</li> <li>roster_push</li> <li>roster_set</li> <li>s2s_allow_host</li> <li>s2s_receive_packet</li> <li>s2s_send_packet</li> <li>s2s_stream_features</li> <li>session_cleanup</li> <li>session_opening_allowed_for_user</li> <li>set_presence_hook</li> <li>set_vcard</li> <li>sm_filter_offline_message</li> <li>sm_register_connection_hook</li> <li>sm_remove_connection_hook</li> <li>unacknowledged_message</li> <li>unregister_subhost</li> <li>unset_presence_hook</li> <li>update_inbox_for_muc</li> <li>user_available_hook</li> <li>user_open_session</li> <li>user_ping_response</li> <li>user_receive_iq</li> <li>user_receive_message</li> <li>user_receive_packet</li> <li>user_receive_presence</li> <li>user_receive_xmlel</li> <li>user_send_iq</li> <li>user_send_message</li> <li>user_send_packet</li> <li>user_send_presence</li> <li>user_send_xmlel</li> <li>user_socket_closed</li> <li>user_socket_error</li> <li>user_stop_request</li> <li>user_terminate</li> <li>vcard_set</li> <li>xmpp_bounce_message</li> <li>xmpp_presend_element</li> <li>xmpp_send_element</li> <li>xmpp_stanza_dropped</li> </ul>"},{"location":"developers-guide/logging/","title":"Logging","text":"<p>To use logger in your module, include</p> <p><pre><code>-include(\"mongoose_logger.hrl\").\n</code></pre> or <pre><code>-include(\"mongoose.hrl\").\n</code></pre></p>"},{"location":"developers-guide/logging/#logging-macros","title":"Logging macros","text":"<p>There are several macros for the most common logging levels:</p> <pre><code>?LOG_DEBUG(#{what =&gt; debug_event, info =&gt; Arg}),\n?LOG_INFO(#{what =&gt; info_event, info =&gt; Arg}),\n?LOG_NOTICE(#{what =&gt; notice_event, info =&gt; Arg}),\n?LOG_WARNING(#{what =&gt; warning_event, info =&gt; Arg}),\n?LOG_ERROR(#{what =&gt; error_event, info =&gt; Arg}),\n?LOG_CRITICAL(#{what =&gt; critical_event, info =&gt; Arg}),\n</code></pre> <p>Use them in correspondence with the appropriate log level. Please be mindful of what is logged and which log level is used for it.</p>"},{"location":"developers-guide/logging/#logging-levels","title":"Logging levels","text":"<p>A system operator can choose the global log level by setting <code>loglevel</code> in <code>mongooseim.toml</code>.</p> <p>Possible values are the standard syslog severity levels, plus all or none: <code>\"all\"</code>, <code>\"debug\"</code>, <code>\"info\"</code>, <code>\"notice\"</code>, <code>\"warning\"</code>, <code>\"error\"</code>, <code>\"critical\"</code>, <code>\"alert\"</code>, <code>\"emergency\"</code>, and <code>\"none\"</code>.</p> <pre><code>[general]\n  loglevel = \"notice\"\n</code></pre> <p>If a user sets the log level to <code>all</code>, then they would see all messages in logs.</p> <p>Levels <code>warning</code> and <code>error</code> are the most commonly used for production systems.</p>"},{"location":"developers-guide/logging/#logging-format","title":"Logging format","text":"<p>We use structured logging as inspired by Ferd's post. We also use a modified logfmt format as one of the possible default logger formatters. This format is Splunk and ELK friendly. Check the list of fields for fields documentation.</p> <p><code>what =&gt; something_interesting</code> field is required.</p> <pre><code>    ?LOG_ERROR(#{what =&gt; check_password_failed,\n                 reason =&gt; Error, user =&gt; LUser})\n\n    try ...\n    catch\n        Class:Reason:StackTrace -&gt;\n            ?LOG_ERROR(#{what =&gt; check_password_failed,\n                         class =&gt; Class, reason =&gt; Reason, stacktrace =&gt; StackTrace}),\n            erlang:raise(Class, Reason, StackTrace)\n    end\n</code></pre> <p>Field <code>user =&gt; &lt;&lt;\"alice\"&gt;&gt;</code> is often used too.</p> <p>A common way to name an error event is <code>what =&gt; function_name_failed</code>. For example, <code>what =&gt; remove_user_failed</code>. Use the advice critically, it would not work well for any function. Counterexample:</p> <pre><code>handle_info(Info, State) -&gt;\n    ?LOG_WARNING(#{what =&gt; unexpected_message, msg =&gt; Info}),\n    {noreply, State}.\n</code></pre>"},{"location":"developers-guide/logging/#filtering-logs-by-module","title":"Filtering logs by module","text":"<p>Setting loglevel to <code>debug</code> can lead to a flood of messages in logs. To set a different loglevel for just one module, call:</p> <pre><code>mongoose_logs:set_global_loglevel(error).\nmongoose_logs:set_module_loglevel(mod_mam, debug).\n</code></pre> <p>This code sets the loglevel to error for all log messages, except for those generated by <code>mod_mam</code>. All messages from <code>mod_mam</code> would be logged.</p>"},{"location":"developers-guide/mod_amp_developers_guide/","title":"The Developer's Guide to mod_amp","text":"<p>This is a quick, introductory guide for developers wishing to extend <code>mod_amp</code> or plug into the message processing system.</p>"},{"location":"developers-guide/mod_amp_developers_guide/#source-files-headers-and-tests","title":"Source Files, Headers and Tests","text":"<ul> <li> <p><code>include/amp.hrl</code>     This header file contains the amp XML namespace and the types used by mod_amp: <code>amp_rule()</code> and <code>amp_strategy()</code> are the top-level points of interest.</p> </li> <li> <p><code>src/mod_amp.erl</code>     This module is responsible for plugging in all the other components.     It's main driving function is <code>filter_packet</code>.     After determining that a given message contains amp rules, the module proceeds by determining its strategy for the message and comparing it against the rules.     The server may return an error at multiple points in its work-flow.     This is signaled by calling the function <code>send_error_and_drop/3</code> or <code>send_errors_and_drop/2</code>.</p> </li> <li> <p><code>src/amp.erl</code>     This module is responsible for parsing rules from incoming elements and serializing server responses in the proper format.     <code>binaries_to_rule/3</code> can return either a proper <code>amp_rule()</code>, or an <code>amp_invalid_rule()</code>, which does not contain sensible values, but can be used by the server to create an appropriate error message.</p> </li> <li> <p><code>test/amp_SUITE.erl</code>     Tests for the API functions exported by <code>amp.erl</code></p> </li> <li> <p><code>src/amp_strategy.erl</code>     This module is where the server-side hook for determining a default action for a given message is performed.     Calls to <code>ejabberd_sm</code> are made here.</p> </li> <li> <p><code>src/amp_resolver.erl</code>     This module models the resolution of amp rules, given a certain strategy.     Also, the function verify_rule_support is hard-coded here to return an <code>unsupported-</code> type error for unsupported rule actions and values.</p> </li> <li> <p><code>test/amp_resolver_SUITE.erl</code>     These tests verify that the <code>amp_resolver:check_condition/3</code> hook works as intended, i.e: that the rules which would be triggered given a particular server-side strategy actually do get triggered, and that all others get rejected.</p> </li> <li> <p><code>test/amp_gen.erl</code>     This module contains PropEr generators for server-side strategies, as well as valid and invalid amp rules.     Used in both test suites.</p> </li> </ul>"},{"location":"developers-guide/mod_amp_developers_guide/#hooks-for-other-modules","title":"Hooks for Other Modules","text":"<p>If your module would like to have some say in the amp decision making process, please refer to the hooks: <code>amp_determine_strategy</code> and <code>amp_check_condition</code>. Remember that the hook for check_condition is a fold on a boolean(), and should behave like a variadic <code>or</code>. I.e: once a rule is deemed to apply, other hooks SHOULD NOT revert this value to false.</p> <p>Cf. this code from <code>amp_resolver</code>:</p> <pre><code>-spec check_condition(any(), amp_strategy(), amp_condition(), amp_value())\n                          -&gt; boolean().\ncheck_condition(HookAcc, Strategy, Condition, Value) -&gt;\n    case HookAcc of\n        true -&gt; true;   %% SOME OTHER HOOK HAS DECIDED THAT THIS RULE APPLIES %%\n        _    -&gt; resolve(Strategy, Condition, Value) %% PERFORM LOCAL CHECK %%\n    end.\n</code></pre>"},{"location":"developers-guide/mod_amp_developers_guide/#ideas-for-further-development","title":"Ideas for Further Development","text":""},{"location":"developers-guide/mod_amp_developers_guide/#easy","title":"Easy","text":"<ul> <li>Implement the 'alert' and 'drop' action types.</li> <li>Implement support for the 'stored' value for 'deliver'</li> </ul>"},{"location":"developers-guide/mod_amp_developers_guide/#medium","title":"Medium","text":"<ul> <li> <p>Implement the security policy described in the third bullet point of XEP-0079, Section 9 (Security Considerations).   This will require that <code>amp_resolver:verify_support</code> also take the <code>{From, To, Packet} :: hook_data()</code> parameter and check that <code>From</code> is permitted to know about <code>To</code>'s presence.   If they are not, then the server should treat this as a <code>not-acceptable</code> amp request.</p> </li> <li> <p>Make support for various actions, conditions and values configurable.     This will require implementing an intelligent mechanism for matching the user-supplied rules with what's configured server-side.     Currently, server-side support is hard-coded in several places:</p> <ol> <li>Disco announcements are in <code>mod_amp:amp_features/0</code></li> <li>Rule support is in <code>amp_resolver:verify_rule_support/1</code></li> <li>Every other function that deals with rules can handle unsupported rules, but ignores their meaning and decides that these rules don't apply.</li> </ol> </li> </ul>"},{"location":"developers-guide/mod_amp_developers_guide/#hard","title":"Hard","text":"<ul> <li>Implement support for the 'expire-at' condition.</li> </ul>"},{"location":"developers-guide/mod_muc_light_developers_guide/","title":"The Developer's Guide to mod_muc_light","text":"<p>This is an in-depth guide on <code>mod_muc_light</code> design decisions and implementation.</p>"},{"location":"developers-guide/mod_muc_light_developers_guide/#source-header-and-test-suite-files","title":"Source, header and test suite files","text":"<p>All source files can be found in <code>src/muc_light/</code>.</p> <ul> <li><code>mod_muc_light.erl</code></li> </ul> <p>Main module.   It implements the <code>gen_mod</code> behaviour.   It subscribes to some essential hooks and exports several functions, mostly callbacks.   It handles integration with <code>mod_disco</code>, <code>mod_privacy</code> and <code>mod_roster</code>.   All operations that take place outside the room (including the room creation) are implemented here.   Last but not least - this module prevents <code>service-unavailable</code> errors being sent when an offline user receives a groupchat message.</p> <ul> <li><code>mod_muc_light_codec_backend.erl</code></li> </ul> <p>A behaviour implemented by modules that translate the MUC Light internal data format to stanzas for clients and vice versa.   Besides specifying callbacks, it implements generic error encoder function.</p> <ul> <li><code>mod_muc_light_codec_legacy.erl</code></li> </ul> <p>An implementation of XEP-0045 compatibility mode.   Note, that while some parts of the legacy mode are implemented directly in <code>mod_muc_light.erl</code>, the stanza translation takes place here.   It does not utilise the full potential of the MUC Light extension but allows using the standard MUC implementation in XMPP client libraries for prototyping or the transition phase.   Not recommended for production systems (less efficient than modern codec and requires more round-trips).</p> <ul> <li><code>mod_muc_light_codec_modern.erl</code></li> </ul> <p>An implementation of a modern MUC Light protocol, described in the XEP.   Supports all MUC Light features.</p> <ul> <li><code>mod_muc_light_db_backend.erl</code></li> </ul> <p>A behaviour implemented by database backends for the MUC Light extension.</p> <ul> <li><code>mod_muc_light_db_mnesia.erl</code></li> </ul> <p>A Mnesia backend for this extension.   Uses transactions for room metadata updates (configuration and affiliation list) and dirty reads whenever possible.</p> <ul> <li><code>mod_muc_light_db_rdbms.erl</code></li> </ul> <p>An SQL backend for <code>mod_muc_light</code>.   <code>create_room</code>, <code>destroy_room</code>, <code>remove_user</code>, <code>set_config</code>, <code>modify_aff_users</code> execute at least one query in a single transaction.   <code>room_exists</code>, <code>get_user_rooms</code>, <code>get_user_rooms_count</code>, <code>get_config</code>, <code>get_blocking</code>, <code>set_blocking</code>, <code>get_aff_users</code> execute only one query per function call.   <code>get_info</code> executes 3 <code>SELECT</code> queries, not protected by a transaction.</p> <ul> <li><code>mod_muc_light_db_rdbms_sql.erl</code></li> </ul> <p>SQL queries for <code>mod_muc_light_db_rdbms.erl</code>.</p> <ul> <li><code>mod_muc_light_room.erl</code></li> </ul> <p>This module handles everything that occurs inside the room: access checks, metadata changes, message broadcasting etc.</p> <ul> <li><code>mod_muc_light_utils.erl</code></li> </ul> <p>Utilities shared by other MUC Light modules.   It includes the room configuration processing and the affiliation logic.</p> <p>The header file can be found in <code>include/</code>.</p> <ul> <li><code>mod_muc_light.hrl</code></li> </ul> <p>It contains definitions of MUC Light namespaces, default configuration options and several common data types and records.</p> <p>There are 2 test suites and one helper module in <code>big_tests/tests</code>.</p> <ul> <li><code>muc_light_SUITE.erl</code></li> </ul> <p>Main test suite, checks all the most important functionalities of the MUC Light extension.</p> <ul> <li><code>muc_light_legacy_SUITE.erl</code></li> </ul> <p><code>muc_light_SUITE.erl</code> equivalent that uses XEP-0045 compatibility mode.</p> <ul> <li><code>muc_helper.erl</code></li> </ul> <p>Provides handy iterators over room participants.   Used in MUC Light suites but in the future could be used in <code>muc_SUITE</code> as well.</p>"},{"location":"developers-guide/mod_muc_light_developers_guide/#hooks-handled-by-this-extension","title":"Hooks handled by this extension","text":"<ul> <li><code>offline_groupchat_message_hook</code> handled by <code>mod_muc_light:prevent_service_unavailable/3</code></li> </ul> <p>Prevents the default behaviour of sending <code>service-unavailable</code> error to the room when a groupchat message is sent to an offline occupant.</p> <ul> <li><code>remove_user</code> handled by <code>mod_muc_light:remove_user/2</code></li> </ul> <p>Triggers DB cleanup of all data related to the removed user. Includes a broadcast of a notification about user removal from occupied rooms.</p> <ul> <li><code>disco_local_items</code> handled by <code>mod_muc_light:get_muc_service/5</code></li> </ul> <p>Adds a MUC service item to the Disco result. Uses either a MUC Light or a classic MUC namespace when the legacy mode is enabled.</p> <ul> <li><code>roster_get</code> handled by <code>mod_muc_light:add_rooms_to_roster/2</code></li> </ul> <p>Injects room items to the user's roster.</p> <ul> <li><code>privacy_iq_get</code>, <code>privacy_iq_set</code> handled by <code>mod_muc_light:process_iq_get/5</code> and <code>mod_muc_light:process_iq_set/4</code> respectively</li> </ul> <p>These callbacks handle blocking settings when legacy mode is enabled.</p> <ul> <li><code>is_muc_room_owner</code>, <code>can_access_room</code>, <code>can_access_identity</code> used by <code>mod_muc_light:is_room_owner/3</code>, <code>mod_muc_light:can_access_room/3</code> and <code>mod_muc_light:can_access_identity/3</code> respectively</li> </ul> <p>Callbacks that provide essential data for the <code>mod_mam_muc</code> extension.</p>"},{"location":"developers-guide/mod_muc_light_developers_guide/#hooks-executed-by-this-extension","title":"Hooks executed by this extension","text":"<ul> <li><code>filter_room_packet</code> by codecs</li> </ul> <p>Allows <code>mod_mam_muc</code> to archive groupchat messages.</p> <ul> <li><code>forget_room</code> by <code>mod_muc_light_db_mnesia</code> and <code>mod_muc_light_room</code></li> </ul> <p>It is a part of <code>mod_mam_muc</code> integration as well. A hook used for MAM cleanup upon room destruction.</p>"},{"location":"developers-guide/mod_muc_light_developers_guide/#advantages-and-drawbacks-compared-to-classic-muc","title":"Advantages and drawbacks (compared to classic MUC)","text":"<p>The new MUC implementation brings quite a few benefits to the table:</p> <ul> <li>It is fully distributed - Does not have SPOF, concurrent senders do not block each other, especially in large rooms.  Message broadcasting is being done in sender c2s context.</li> <li>It does not use presences - Much less traffic and stable membership information, especially on mobile networks.</li> <li>It provides built-in blocking support - Instead of blocking traffic like Privacy Lists do, it handles blocklists internally, preventing the blocker from being added to or by blocked entities.</li> <li>Less round-trips - A room can be created and configured with an initial list of occupants with a single request.</li> <li>Versioning - Reduces traffic and allows clients to reliably and quickly detect that the room state has changed.</li> <li>Isolation - Processing errors are contained in a sender context, not affecting other room occupants.</li> <li>Fully customisable room configuration - Your users can store any meta room information you allow.</li> </ul> <p>Drawbacks are:</p> <ul> <li>Requires DB transactions to ensure Room state consistency.</li> <li>Fetches the occupant list from DB for every message that is broadcasted.</li> <li>Due to concurrent message broadcast, it is possible for occupants to receive messages in a different order (given the messages are broadcasted at the exactly same time).</li> <li>With stream resumption disabled or when resumption times out, user may miss a message in a following scenario:</li> <li>Message A archived</li> <li>Message B archived</li> <li>Message B delivered to the user</li> <li>User loses connection</li> <li>Resumption timeout</li> <li>User queries MAM for all messages after B and misses A</li> </ul>"},{"location":"developers-guide/mod_muc_light_developers_guide/#ideas-for-further-development","title":"Ideas for Further Development","text":""},{"location":"developers-guide/mod_muc_light_developers_guide/#easy","title":"Easy","text":"<ul> <li>Add more tests for negative cases</li> </ul>"},{"location":"developers-guide/mod_muc_light_developers_guide/#medium","title":"Medium","text":"<ul> <li>Add optional per-room processes to avoid the need of DB transactions and ensure message ordering (maybe \"hard\"?).</li> <li>Redis backend</li> </ul>"},{"location":"developers-guide/mod_muc_light_developers_guide/#hard","title":"Hard","text":"<ul> <li>Room metadata cache (maybe \"medium\"?).</li> </ul>"},{"location":"developers-guide/mongoose_wpool/","title":"mongoose_wpool","text":"<p>All the outgoing pools configured by the <code>outgoing_pools</code> option are hidden behind the <code>mongoose_wpool</code> API. Every pool is described by a tuple <code>{Type, Host, Tag, PoolOptions, ConnectionOptions}</code> (see outgoing pools for details about each element of the tuple).</p>"},{"location":"developers-guide/mongoose_wpool/#supervision-tree","title":"Supervision tree","text":"<ul> <li><code>mongoose_wpool_sup</code> supervisor for every type of the pool. Under it there can be many children of:<ul> <li><code>mongoose_wpool_type_sup</code> is started on-demand when a pool of given type is started.   Many pools of the same type are supervised by the supervisor. Its children are:<ul> <li><code>mongoose_wpool_mgr</code> all the pools of the same type are managed by a manager.    It's responsible for starting, stopping and restarting the pool.    Restarting happens when the main <code>worker_pool</code> process for the pool is stopped unintentionally.    This usually happens when there was too many restarts of worker processes.</li> <li>many <code>worker_pool</code> supervisors holding a specific pool are on the same level as the manager.</li> </ul> </li> </ul> </li> </ul> <p>The <code>mongoose_wpool_mgr</code> manages the pool by setting monitor for every started pool.</p>"},{"location":"developers-guide/mongoose_wpool/#implementing-new-pool-type","title":"Implementing new pool type","text":"<p>To add a new pool type, create a <code>mongoose_wpool_NEW_TYPE</code> module implementing the <code>mongoose_wpool</code> behaviour. This means that for a new type <code>xyz</code> we need to create a <code>mongoose_wpool_xyz</code> module. Then we can use the <code>xyz</code> type to start the pool via <code>outgoing_pools</code> option or directly via the <code>mongoose_wpool</code> API.</p>"},{"location":"developers-guide/release_config/","title":"Release/Installation configuration","text":""},{"location":"developers-guide/release_config/#advanced-release-configuration","title":"Advanced release configuration","text":"<p>It's now possible to install MongooseIM from source in two modes:</p> <ul> <li><code>system</code> - it's used internally to generate Linux packages (.deb, .rpm)</li> <li><code>user</code>  - which is the default mode and used for testing on GitHub Actions and     in development</li> </ul> <p>You can also build OS specific packages by using the tools in <code>[MongooseIM repo root]/tools/pkg</code> - refer to <code>README.md</code> therein.</p>"},{"location":"developers-guide/release_config/#configure-script","title":"Configure script","text":"<p>The <code>tools/configure</code> script can be used to specify which 3rd party dependencies should be included in the final release or to set the installation prefix and installation mode. More details can found in the tool's help. The help is printed when the script is run without any parameters <code>tools/configure</code>:</p> <pre><code>configure: OPTIONS\n\nSpecifies which 3rd party deps will be included in the release.\nWrites configure.out file as output - this file can be sourced with:\n\n    . configure.out\n\nWrites rel/configure.vars.config which can be used as Reltool input.\n\n3rd party apps:\n\n    with-none           include no 3rd party drivers\n    with-all            include all drivers\n    with-mysql          include mysql driver\n    with-odbc           include an ODBC driver (requires unixodbc to compile)\n    with-pgsql          include pgsql driver\n    with-redis          include redis driver\n\nOptions:\n\n    prefix    Installation PREFIX directory. Default: /usr/local\n    system    Install files into $PREFIX/{bin, etc, ...} instead of a completely self contained release. Default: no\n    user      System user to run the server as. Default:\n</code></pre> <p>This script is also accessible via the make <code>configure</code> target.</p>"},{"location":"developers-guide/release_config/#example","title":"Example","text":"<p>If <code>mysql</code> and <code>redis</code> are the only drivers that should be included in the release, run the following command before <code>make rel</code>:</p> <pre><code>$ ./tools/configure with-mysql with-redis\n</code></pre> <p>You only need to run the <code>./tools/configure</code> command once (unless changing the release's config is needed to include some other dependencies).</p>"},{"location":"developers-guide/release_config/#system-install","title":"System install","text":"<p>To manually test the installation run <code>tools/test-install.sh</code>. This script is intended for careful inspection by a human user, not for automation. Results should be similar to those described below.</p> <p>On Mac:</p> <pre><code>./tools/configure with-all user=erszcz prefix=/tmp/mim-sandbox-system system=yes\ncat configure.out rel/configure.vars.config\nRUNNER_GROUP=staff make install\n</code></pre> <p>Overriding <code>RUNNER_GROUP</code> on a Mac is necessary, as users by default don't have private groups of the same name as their usernames.</p> <p>Generated build configs:</p> <pre><code>$ cat configure.out rel/configure.vars.config\nexport MONGOOSEIM_CONFIGURED=\"yes\"\nexport APPS=\"mysql eodbc epgsql eredis nksip cqerl tirerl erlcloud\"\nexport PREFIX=\"/tmp/mim-sandbox-system\"\nexport RELTOOL_VARS=\"rel/configure.vars.config\"\nexport SYSTEM=\"yes\"\nexport RUNNER_USER=\"erszcz\"\nexport BIN_DIR=\"$PREFIX/usr/bin\"\nexport ETC_DIR=\"$PREFIX/etc/mongooseim\"\nexport LIB_DIR=\"$PREFIX/usr/lib/mongooseim\"\nexport LOG_DIR=\"$PREFIX/var/log/mongooseim\"\nexport MDB_DIR=\"$PREFIX/var/lib/mongooseim\"\nexport LOCK_DIR=\"$PREFIX/var/lock/mongooseim\"\nexport PID_DIR=\"$PREFIX/var/lib/mongooseim\"\nexport STATUS_DIR=\"$PREFIX/var/lib/mongooseim\"\n{mongooseim_runner_user, \"erszcz\"}.\n{mongooseim_script_dir, \"/tmp/mim-sandbox-system/usr/lib/mongooseim/bin\"}.\n{mongooseim_etc_dir, \"/tmp/mim-sandbox-system/etc/mongooseim\"}.\n{mongooseim_log_dir, \"/tmp/mim-sandbox-system/var/log/mongooseim\"}.\n{mongooseim_mdb_dir, \"/tmp/mim-sandbox-system/var/lib/mongooseim\"}.\n{mongooseim_pid_dir, \"/tmp/mim-sandbox-system/var/lib/mongooseim\"}.\n{mongooseim_status_dir, \"/tmp/mim-sandbox-system/var/lib/mongooseim\"}.\n{mongooseim_mdb_dir_toggle, []}.\n{mongooseim_lock_dir, \"/tmp/mim-sandbox-system/var/lock/mongooseim\"}.\n</code></pre> <p>Installed tree:</p> <pre><code>$ tree mim-sandbox-system/ -L 3\nmim-sandbox-system/\n\u251c\u2500\u2500 etc\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 mongooseim\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 app.config\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 mongooseim.toml\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 vm.args\n\u251c\u2500\u2500 usr\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 bin\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 mongooseimctl\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 lib\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 mongooseim\n\u2514\u2500\u2500 var\n    \u251c\u2500\u2500 lib\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 mongooseim\n    \u251c\u2500\u2500 lock\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 mongooseim\n    \u2514\u2500\u2500 log\n        \u2514\u2500\u2500 mongooseim\n\n13 directories, 4 files\n</code></pre> <p>Files which change after starting and stopping such an installation:</p> <pre><code>var/lib/mongooseim/DECISION_TAB.LOG\nvar/lib/mongooseim/LATEST.LOG\nvar/lib/mongooseim/last_activity.DCD\nvar/lib/mongooseim/muc_registered.DCD\nvar/lib/mongooseim/muc_room.DCD\nvar/lib/mongooseim/offline_msg.DAT\nvar/lib/mongooseim/passwd.DCD\nvar/lib/mongooseim/privacy.DCD\nvar/lib/mongooseim/private_storage.DAT\nvar/lib/mongooseim/roster.DCD\nvar/lib/mongooseim/roster_version.DCD\nvar/lib/mongooseim/schema.DAT\nvar/lib/mongooseim/vcard.DAT\nvar/lib/mongooseim/vcard_search.DCD\nvar/lib/mongooseim/pid\nvar/lib/mongooseim/status\nvar/log/mongooseim/crash.log\nvar/log/mongooseim/mongooseim.log\nvar/log/mongooseim/erlang.log.1\nvar/log/mongooseim/run_erl.log\n</code></pre>"},{"location":"developers-guide/release_config/#caveats","title":"Caveats","text":"<ul> <li>Running <code>make install</code> will blindly overwrite any configs it encounters on its way.   Mnesia database and log files are preserved only due to the fact that they're   not build process artifacts.</li> </ul>"},{"location":"developers-guide/xep_tool/","title":"XEP-tool usage","text":"<p>The XEP-tool is the answer for developers who wonder how to maintain an actual list of supported XEPs. It's a fast and easy way to automatically produce documentation from raw, beam files. This is a quick guide on how to enjoy the usage of the XEP-tool.</p>"},{"location":"developers-guide/xep_tool/#sign-your-module-file-first","title":"Sign your module file first","text":"<p>The architecture of MongooseIM determines that almost every XEP or feature implementation resides in its own file. It is not strictly enforced but usually the file is named with a <code>mod_</code> prefix. For example <code>mod_privacy</code> file implements XEP-0016: Privacy Lists.</p>"},{"location":"developers-guide/xep_tool/#mandatory-xep-and-version","title":"Mandatory <code>xep</code> and <code>version</code>","text":"<p>In order to let the XEP-tool know about your module, we add a special attribute <code>xep</code> at the beginning of the <code>mod_privacy</code> module:</p> <pre><code>-xep([{xep, 16}, {version, \"1.6\"}]).\n</code></pre> <p>Now we know that this module implements to XEP-0016: Privacy Lists with version 1.6.</p> <p>It gives the tool enough information to generate a URL to the XEP homepage. If the module implements a ProtoXEP, the <code>xep</code> property should be an atom:</p> <pre><code>-xep([{xep, 'muc-light'}, {version, \"0.0.1\"}]).\n</code></pre> <p>You ought to remember to specify <code>xep</code> and <code>version</code> properties every time. You can also put several <code>xep</code> attributes in one module. For example <code>mod_roster</code> implements attributes of XEP-0083: Nested Roster Groups, XEP-0093: Roster Item Exchange and XEP-0237: Roster Versioning. Just list them one after another:</p> <pre><code>-xep([{xep, 237}, {version, \"1.3\"}]).\n-xep([{xep, 83}, {version, \"1.0\"}]).\n-xep([{xep, 93}, {version, \"1.2\"}]).\n</code></pre>"},{"location":"developers-guide/xep_tool/#status","title":"Status","text":"<p>By default the status is <code>complete</code>. You can also mark the implementation status as <code>partial</code>:</p> <pre><code>-xep([{xep, 79}, {version, \"1.2\"}, {status, partial}]).\n</code></pre>"},{"location":"developers-guide/xep_tool/#legacy-versions","title":"Legacy versions","text":"<p>Sometimes the implementation is backwards-compatible, supporting legacy namespaces defined in a particular historical version. You can list such versions as below:</p> <pre><code>-xep([{xep, 313}, {version, \"0.6\"}, {legacy_versions, [\"0.5\"]}]).\n</code></pre> <p>Warning</p> <p>Watch out for conflicts! Put the <code>xep</code> attribute in the main module implementing the extension to avoid conflicting declarations. If you need to specify the same XEP multiple times (e.g. because the implementation is split into two parts), make sure that the <code>version</code> properties are the same for all attributes - otherwise the XEP tool will report an error. The resulting status for a XEP is <code>complete</code> unless all implementing modules have the <code>partial</code> status.</p>"},{"location":"developers-guide/xep_tool/#compile-and-run","title":"Compile and run","text":"<p>After annotating all modules with the <code>xep</code> attributes, you need to run <code>make</code> in order to generate the .beam files. Next, you can run the XEP tool. It has a mandatory argument, which specifies the output format:</p> <ul> <li><code>markdown</code> - a Markdown table,</li> <li><code>list</code> - an Erlang list,</li> <li><code>doap</code> - Description Of A Project.</li> </ul> <p>For example, to print out the DOAP, you can run the following from the MongooseIM project directory:</p> <pre><code>tools/xep_tool/xep_tool.escript doap\n</code></pre> <p>To save the output to a file, you can just provide the file name as the second argument.</p> <pre><code>tools/xep_tool/xep_tool.escript doap doc/mongooseim.doap\ntools/xep_tool/xep_tool.escript markdown doc/user-guide/Supported-XEPs.md\n</code></pre> <p>The last two commands have a shortcut in the Makefile:</p> <pre><code>make xeplist\n</code></pre>"},{"location":"developers-guide/xep_tool/#examples-of-generated-content","title":"Examples of generated content","text":"<ul> <li>Markdown table</li> <li>DOAP file</li> </ul>"},{"location":"getting-started/Installation/","title":"Installation","text":"<p>There are multiple ways in which you can get MongooseIM:</p> <ul> <li>install MongooseIM binaries from a package Erlang Solutions delivers,</li> <li>get the Docker image,</li> <li>use the Helm chart.</li> </ul> <p>Alternatively, check out our tutorial on How to build MongooseIM from source code for an introduction to compiling, building and testing MongooseIM.</p>"},{"location":"getting-started/Installation/#packages","title":"Packages","text":"<p>Go to the downloads section of the Erlang Solutions website, and choose the version of MongooseIM you want. The following sections describe the installation process for different operating systems.</p> Ubuntu and DebianCentOS <p>Once the deb file is downloaded, open a terminal window and navigate to the directory containing the package. Use the following command to unpack and install MongooseIM:</p> <pre><code>sudo dpkg -i mongooseim_[version here].deb\n</code></pre> <p>An ODBC (RDBMS) driver must be installed on your machine to unpack and install from RPM packages. Enter the following command in a terminal window to install the latest unixODBC driver:</p> <pre><code>sudo yum install unixODBC\n</code></pre> <p>Once the RPM file is downloaded, open a terminal window and navigate to the directory containing the package. Use the following command to unpack and install MongooseIM:</p> <pre><code>sudo rpm -i mongooseim_[version here].rpm\n</code></pre>"},{"location":"getting-started/Installation/#docker","title":"Docker","text":"<p>In order to install MongooseIM using Docker, simply run the following command:</p> <pre><code>docker pull mongooseim/mongooseim\n</code></pre> <p>This will download the latest release. You can use tags to download an exact version.</p> <p>We build Docker images for every release marked with a git tag, as well as for every Pull Request. You can see all of them on DockerHub. In order to learn more about how the images are built, please visit the source code repository.</p> <p>The <code>mongooseimctl</code> command is available in <code>/usr/lib/mongooseim/bin/mongooseimctl</code> in the container.</p>"},{"location":"getting-started/Installation/#helm","title":"Helm","text":"<p>You can easily install MongooseIM to a Kubernetes cluster with the help of our Helm chart, defined in the source code repository. After you have a Kubernetes cluster set up, simply run:</p> <pre><code>helm repo add mongoose https://esl.github.io/MongooseHelm/\n</code></pre> <p>to add our chart repository, and then:</p> <pre><code>helm install my-mongooseim mongoose/mongooseim\n</code></pre> <p>to install the chart. You can use any name instead of <code>my-mongooseim</code>, or generate a random name.</p>"},{"location":"getting-started/Installation/#source","title":"Source","text":"<p>Please see the tutorial How to build MongooseIM from source code.</p>"},{"location":"getting-started/Quick-setup/","title":"Quick Setup","text":"<p>In this short guide we will set MongooseIM up and get users chatting right away. The goal is to get to know MongooseIM, set it up, go through basic operations and validation.</p> <p>You should have MongooseIM already installed on your machine and the <code>mongooseimctl</code> command available. If you have not installed MIM, please refer to the installation instructions.</p> <p>Warning</p> <p>This setup is not intended for production.</p> <p>Note</p> <p>This procedure has been tested on an Ubuntu 18.04.x LTS.</p>"},{"location":"getting-started/Quick-setup/#running-mongooseim","title":"Running MongooseIM","text":"<p>Warning</p> <p>MongooseIM will use its default database - Mnesia, which is faster and simpler to set up, but not intended for production purposes when it comes to persistent data.</p> <p>It is possible to use external databases instead - for more information, see the database backend configuration page.</p> <p>The following command will start the MongooseIM server: <pre><code>mongooseimctl start\n</code></pre></p> <p>When you change the config file and want to restart the MongooseIM server: <pre><code>mongooseimctl restart\n</code></pre></p> <p>Use the following command to stop the MongooseIM server: <pre><code>mongooseimctl stop\n</code></pre> This takes a few seconds.</p> <p>At any given time, the following command shows the status of a MongooseIM server: <pre><code>mongooseimctl status\n</code></pre> If the command replies <code>nodedown</code> then MongooseIM is not running. Else it will show its status <code>starting</code>, <code>started</code>, or <code>stopping</code>, and its version.</p> <p>When needed, you can also launch the server in the interactive mode: <pre><code>mongooseimctl live\n</code></pre> This will allow you to better detect and understand the errors in the configuration. When MongooseIM is properly running, the Erlang shell/console is then shown. Just type Control-C twice to exit, the server will then be shut down.</p> <p>For running MongooseIM in a non-interactive way within a supervision system (e.g. systemd), it is recommended to use the foreground mode: <pre><code>mongooseimctl foreground\n</code></pre> Typing Control-C will stop the server.</p> <p>You can check server loglevel: <pre><code>mongooseimctl get_loglevel\n</code></pre></p> <p>Run bootstrap scripts for initial configuration:</p> <pre><code>mongooseimctl bootstrap\n</code></pre> <p>It executes scripts inside the <code>scripts/</code> directory with a <code>bootstrap</code> prefix in alphabetical order. More information</p> <p>Execute <code>Hello</code> from the <code>scripts/bootstrap01-hello.sh</code> script that you can find in the release directory <code>$REPO_DIR/_build/prod/rel/mongooseim</code>.</p>"},{"location":"getting-started/Quick-setup/#chat-users","title":"Chat users","text":""},{"location":"getting-started/Quick-setup/#registering-creating-users","title":"Registering (creating) users","text":"<p>The default XMPP domain served by MongooseIM right after installation is <code>localhost</code>.</p> <p>You can register (create) users with the <code>mongooseimctl</code> utility.</p> <p>This command registers the user <code>user@localhost</code> using password <code>secret</code>. <pre><code>mongooseimctl account registerUser --username user --domain localhost --password secret\n</code></pre> Examples: <pre><code>mongooseimctl account registerUser --username alice --domain localhost --password qwerty\nmongooseimctl account registerUser --username bob --domain localhost --password 12345678\nmongooseimctl account registerUser --username carol --domain localhost --password abc123\nmongooseimctl account registerUser --username dan --domain localhost --password dan\n</code></pre></p> <p>Warning</p> <p>The password is entered manually in the command line and history is accessible to the command line users. This method is not recommended for production use, you may prefer for example LDAP.</p> <p>You can check that the user account has been created: <pre><code>mongooseimctl account checkUser --user alice@localhost\n{\n  \"data\" : {\n    \"account\" : {\n      \"checkUser\" : {\n        \"message\" : \"User alice@localhost exists\",\n        \"exist\" : true\n      }\n    }\n  }\n}\n</code></pre></p> <p>Now you can list all registered users in your host: <pre><code>mongooseimctl account listUsers --domain localhost\n{\n  \"data\" : {\n    \"account\" : {\n      \"listUsers\" : [\n        \"alice@localhost\",\n        \"bob@localhost\",\n        \"carol@localhost\",\n        \"dan@localhost\"\n      ]\n    }\n  }\n}\n</code></pre></p> <p>If you want to delete a user from your host: <pre><code>mongooseimctl account removeUser --user dan@localhost\n{\n  \"data\" : {\n    \"account\" : {\n      \"removeUser\" : {\n        \"message\" : \"User dan@localhost successfully unregistered\",\n        \"jid\" : \"dan@localhost\"\n      }\n    }\n  }\n}\n</code></pre></p>"},{"location":"getting-started/Quick-setup/#populate-the-contact-lists-rosters","title":"Populate the contact lists (rosters)","text":"<p>As an example, let's add <code>bob@localhost</code> as a contact of <code>alice@localhost</code>:</p> <pre><code>mongooseimctl roster addContact --user alice@localhost --contact bob@localhost --groups '[\"friends\"]' --name Bobby\n{\n  \"data\" : {\n    \"roster\" : {\n      \"addContact\" : \"Contact added successfully\"\n    }\n  }\n}\n</code></pre> <p>You need to quote <code>[\"friends\"]</code> because it is a list of strings - JSON syntax is required for such complex types. The single quotes are there to prevent <code>bash</code> from interpreting special characters like <code>\"</code>. If you want <code>alice@locahost</code> to receive presences from <code>bob@localhost</code>, you need to firstly request the subscription:</p> <pre><code>mongooseimctl roster subscription --user alice@localhost --contact bob@localhost --action INVITE\n{\n  \"data\" : {\n    \"roster\" : {\n      \"subscription\" : \"Subscription stanza with type subscribe sent successfully\"\n    }\n  }\n}\n</code></pre> <p>Then, accept the subscription request:</p> <pre><code>mongooseimctl roster subscription --user bob@localhost --contact alice@localhost --action ACCEPT\n{\n  \"data\" : {\n    \"roster\" : {\n      \"subscription\" : \"Subscription stanza with type subscribed sent successfully\"\n    }\n  }\n}\n</code></pre> <p>Verify the contact list:</p> <pre><code>mongooseimctl roster listContacts --user alice@localhost\n{\n  \"data\" : {\n    \"roster\" : {\n      \"listContacts\" : [\n        {\n          \"subscription\" : \"TO\",\n          \"name\" : \"Bobby\",\n          \"jid\" : \"bob@localhost\",\n          \"groups\" : [\n            \"friends\"\n          ],\n          \"ask\" : \"NONE\"\n        }\n      ]\n    }\n  }\n}\n</code></pre> <p>Note that <code>bob@localhost</code> has <code>alice@localhost</code> in his contacts as well, but he is not subscribed to her presences - the subscriptions are unidirectional.</p> <pre><code>mongooseimctl roster listContacts --user bob@localhost\n{\n  \"data\" : {\n    \"roster\" : {\n      \"listContacts\" : [\n        {\n          \"subscription\" : \"FROM\",\n          \"name\" : \"\",\n          \"jid\" : \"alice@localhost\",\n          \"groups\" : [\n\n          ],\n          \"ask\" : \"NONE\"\n        }\n      ]\n    }\n  }\n}\n</code></pre> <p>To quickly set up mutual subscriptions between users, you can use <code>mongooseimctl roster setMutualSubscription</code>.</p>"},{"location":"getting-started/Quick-setup/#basic-mongooseim-configuration","title":"Basic MongooseIM configuration","text":"<p>The main configuration file of MongooseIM is <code>mongooseim.toml</code>: <pre><code>/etc/mongooseim/mongooseim.toml\n</code></pre> You can edit this file to tailor MongooseIM to your needs. Learn more about MongooseIM configuration files in general, or jump right into the documentations of different <code>mongooseim.toml</code> sections. </p> <p>For each change, edit the configuration file using the right Linux/Unix user. Save (and optionally backup, archive, or version) the configuration file and restart the MongooseIM server.</p>"},{"location":"getting-started/Quick-setup/#logging","title":"Logging","text":"<p>Set your own loglevel in the configuration file: <pre><code>[general]\n  loglevel = \"notice\"\n</code></pre></p> <p>Save and exit your editor, restart MongooseIM and check your loglevel from the command line: <pre><code>mongooseimctl get_loglevel\n</code></pre></p> <p>Read the <code>mongooseim.log</code> file: <pre><code>/var/log/mongooseim/mongooseim.log\n</code></pre></p> <p>You can use commands such <code>cat</code>, <code>more</code> or <code>less</code>, even <code>head</code> or <code>tail</code>. In order to see live logs: <pre><code>tail -f /var/log/mongooseim/mongooseim.log\n</code></pre> Type <code>Ctrl+C</code> to exit.</p>"},{"location":"getting-started/Quick-setup/#muc-multi-user-chat-for-groupchats","title":"MUC (Multi-User Chat) for groupchats","text":"<p>Enable MUC, or Multi-User Chat, for groupchats/channels in the <code>mongooseim.toml</code> file: <pre><code>[modules.mod_muc]\n  host = \"muc.@HOST@\"\n  access = \"muc\"\n  access_create = \"muc_create\"\n</code></pre></p>"},{"location":"getting-started/Quick-setup/#roster-versioning","title":"Roster versioning","text":"<p>For faster contact list downloads at each client/app (re)connection, edit the configuration file: <pre><code>[modules.mod_roster]\n  versioning = true\n  store_current_id = true\n</code></pre></p>"},{"location":"getting-started/Quick-setup/#review-configuration","title":"Review configuration","text":"<p>If MongooseIM does not start because the configuration file is broken in some way: <pre><code>mongooseimctl live\n</code></pre></p>"},{"location":"getting-started/Quick-setup/#using-an-xmppjabber-clientapp","title":"Using an XMPP/Jabber client/app","text":"<p>The following steps use the registered users on the MongooseIM server, done above.</p> <p>Users that are registered on your server can now add their accounts in a chat application like Gajim (specifying either the server\u2019s IP address or domain name), and start chatting!</p>"},{"location":"getting-started/Quick-setup/#note-about-session-conflicts","title":"Note about session conflicts","text":"<p>If you're going to connect several clients with the same username and domain (for example a phone and a laptop), please make sure they are using different resource names (a kind of device/client identifier). This should be configurable in the account settings of every XMPP client.</p> <p>Otherwise, the clients will keep disconnecting each other, because MongooseIM always terminates the older session in case of a conflict.</p>"},{"location":"getting-started/Quick-setup/#connect-gajim","title":"Connect Gajim","text":"<p>Gajim is available on Ubuntu, CentOS &amp; Windows.</p> <p>Warning</p> <p>Gajim has an obsolete UX. However, it is still well maintained, and has a console that is extremely useful for debugging and testing/validation purposes at the XMPP protocol level.</p> <ol> <li>Launch Gajim. Ignore the window with Plugin updates.</li> <li>Go to Edit -&gt; Accounts.</li> <li>Click Add in the left part of the window and select I already have an account I want to use, click Forward</li> <li>Enter the user, domain and password for the accounts registered previously on the command line</li> <li>Click Forward and then Finish</li> <li>Ignore the TLS/SSL error/warning and continue</li> <li>Close the Account window.</li> </ol> <p>Add your three created users: <code>alice</code>, <code>bob</code>, and <code>carol</code>.</p> <p>Check what users are currently connected. <pre><code>mongooseimctl session listSessions\n{\n  \"data\" : {\n    \"session\" : {\n      \"listSessions\" : [\n        {\n          \"user\" : \"bob@localhost/BobsComputer,\n          \"uptime\" : 12,\n          \"priority\" : 50,\n          \"port\" : 56267,\n          \"node\" : \"mongooseim@localhost\",\n          \"ip\" : \"127.0.0.1\",\n          \"connection\" : \"c2s_tls\"\n        }\n      ]\n    }\n  }\n}\n</code></pre></p> <p>The result shows that Bob is currently connected.</p>"},{"location":"getting-started/Quick-setup/#chat-with-another-person","title":"Chat with another person","text":"<p>Use <code>alice</code>'s account to send messages directly to <code>bob</code> and use <code>bob</code>'s account to reply directly to <code>alice</code>.</p> <p>It is possible to send a message from the command line:</p> <pre><code>mongooseimctl stanza sendMessage --from alice@localhost --to bob@localhost --body 'Hi Bob!'\n</code></pre> <p>You need to quote <code>Hi Bob!</code>, because it contains a space. If you do it while Bob is connected, he should receive the message in the XMPP client.</p>"},{"location":"getting-started/Quick-setup/#group-chats","title":"Group chats","text":"<p>Use <code>alice</code>'s account to create a groupchat <code>channel</code> on your <code>muc.localhost</code> service, and configure it by making it persistent. Invite <code>bob</code> and <code>carol</code>. From <code>bob</code>'s' and <code>carol</code>'s accounts, accept the invitation and join the <code>channel</code> groupchat. All three users exchange messages.</p>"},{"location":"getting-started/Quick-setup/#contact-lists","title":"Contact lists","text":"<p>Use <code>carol</code>'s account to add <code>alice</code> and <code>bob</code> to her contact list. Use <code>alice</code>'s and <code>bob</code>'s accounts accept those additions.</p> <p>Verify on the MongooseIM server: <pre><code>mongooseimctl roster listContacts --user alice@localhost\nmongooseimctl roster listContacts --user bob@localhost\n</code></pre></p>"},{"location":"getting-started/Quick-setup/#profile-vcard","title":"Profile (vCard)","text":"<p>Edit <code>alice</code>'s profile (vCard) in Gajim: Modify Account..., then Profile, just set her Name to <code>Alice</code>.</p> <p>Verify on the MongooseIM server: <pre><code>mongooseimctl vcard getVcard --user alice@localhost\n{\n  \"data\" : {\n    \"vcard\" : {\n      \"getVcard\" : {\n        (...)\n        \"telephone\" : [\n          {\n            \"tags\" : [\n              \"HOME\",\n              \"VOICE\"\n            ],\n            \"number\" : \"123456789\"\n          }\n        ],\n        (...)\n        \"formattedName\" : \"Alice\",\n        (...)\n      }\n    }\n  }\n}\n</code></pre></p>"},{"location":"getting-started/Quick-setup/#summary","title":"Summary","text":"<p>Now you have the minimum knowledge: you know how to deploy MongooseIM, configure some basic features, check/verify a few useful items, validate it both on the client and server side, and utilize a few good practices.</p>"},{"location":"getting-started/Quick-setup/#summary-command-line","title":"Summary: command line","text":"<p>You know <code>mongooseimctl</code>, with basic server management commands such as:</p> <ul> <li><code>start</code>, <code>restart</code>, <code>stop</code>, <code>status</code>, <code>live</code>, <code>foreground</code></li> <li><code>get_loglevel</code></li> </ul> <p>Other commands shown above correspond to the GraphQL Admin API operations, and they are grouped into the following categories:</p> <ul> <li><code>account</code> contains <code>registerUser</code>, <code>checkUser</code>, <code>listUsers</code>, <code>removeUser</code></li> <li><code>roster</code> contains <code>addContact</code>, <code>subscription</code>, <code>listContacts</code>, <code>setMutualSubscription</code></li> <li><code>session</code> contains <code>listSessions</code></li> <li><code>stanza</code> contains <code>sendMessage</code></li> <li><code>vcard</code> contains <code>getVcard</code></li> </ul> <p>There are more categories and commands. For a list of categories, use <code>mongooseimctl</code> without any arguments. To get a list of commands in a particular category, call <code>mongooseimctl</code><code>category</code>. You can also get more information about a particular command with <code>mongooseimctl</code><code>category command</code><code>--help</code>.</p>"},{"location":"getting-started/Quick-setup/#summary-files","title":"Summary: files","text":"<p>You know basic entries in the files: <code>/etc/mongooseim/mongooseim.toml</code> <code>/var/log/mongooseim/mongooseim.log</code></p>"},{"location":"getting-started/Quick-setup/#summary-clientapp","title":"Summary: client/app","text":"<p>In an app, you know how to:</p> <ul> <li>connect</li> <li>chat with another user</li> <li>create/join groupchats</li> <li>manage contact lists (roster)</li> <li>edit profile (vCard)</li> </ul>"},{"location":"getting-started/Quick-setup/#go-further","title":"Go further","text":"<p>For the next steps, we now encourage you to:</p> <ol> <li>Deploy it as a single node, on a publicly accessible server, with a real routable domain name with its certificate</li> <li>Add an RDBMS for persistent data, and LDAP for user directory</li> <li>Enable message history with MAM (Message Archive Management)</li> <li>Enable file exchange with HTTP file upload, with an S3-compatible object storage server</li> <li>Use a mobile app for users to chat</li> </ol>"},{"location":"graphql-api/Admin-GraphQL/","title":"MongooseIM's GraphQL API for the administrator","text":"<p>The new GraphQL admin API contains all the commands available through the REST API, and the vast majority of the CLI (<code>mongooseimctl</code>) commands. Only commands that wouldn't have worked well with GraphQL style have been omitted.</p> <p>We can distinguish two levels of the administration. A global admin (has access to all commands), and the admin per domain (has access only to the own domain). Each of them is handled by a different endpoint. Please see the configuration Listen section for more details.</p> <p>There is only one schema for both admin types. Admin per domain simply has no permissions to execute global commands or commands with not owned domain. The API documentation clearly says which commands are global.</p> <p>Queries and mutations can be executed with the POST or GET method, as specified in the GraphQL documentation. The endpoint URL is as configured in the Listen section, e.g. <code>http://localhost:5551/api/graphql</code> for the global admin.</p> <p>Subscriptions can be executed with the GET method, and are handled with Server-Sent Events (SSE). The endpoint URL is the same as for regular queries with the addition of <code>/sse</code>, e.g. <code>http://localhost:5551/api/graphql/sse</code> for the global admin.</p>"},{"location":"graphql-api/Admin-GraphQL/#domain-admin-configuration","title":"Domain admin configuration","text":"<p>Out of the box, domains are created with a disabled admin account. Admin per domain can be enabled only by the global admin with the command mutation.domains.setDomainPassword. Afterward, the domain admin can change the password with the same command.</p> <p>The admin per domain can be disabled by the global admin with the command mutation.domains.removeDomainPassword.</p>"},{"location":"graphql-api/Admin-GraphQL/#authentication","title":"Authentication","text":"<p>MongooseIM uses Basic Authentication as an authentication method for the GraphQL API.</p> <p>Basic authentication is a simple authentication scheme built into the HTTP protocol. Each HTTP request to the GraphQL API has to contain the Authorization header with the word <code>Basic</code> followed by a space and a base64-encoded string.</p>"},{"location":"graphql-api/Admin-GraphQL/#global-admin-endpoint","title":"Global admin endpoint","text":"<p>The authentication for global admin is optional because this endpoint shouldn't be exposed outside. The credentials set in the handler section in the config enables the authentication. Please see the GraphQL handler section for more details.</p> <p>The base64-encoded string should have the form <code>LOGIN:PASSWORD</code>, where:</p> <ul> <li><code>LOGIN</code> is the login set in the config,</li> <li><code>PASSWORD</code> is the password set in the config.</li> </ul>"},{"location":"graphql-api/Admin-GraphQL/#domain-admin-endpoint","title":"Domain admin endpoint","text":"<p>The authorization as a domain admin the base64-encoded string should have the form <code>admin@DOMAIN:PASSWORD</code>, where:</p> <ul> <li><code>DOMAIN</code> is the domain to authorize,</li> <li><code>PASSWORD</code> is the password for the given domain.</li> </ul>"},{"location":"graphql-api/Admin-GraphQL/#graphiql","title":"GraphiQL","text":"<p>GraphiQL is the GraphQL integrated development environment (IDE). It allows to experiment with API and run queries with ease. The GraphiQL page is automatically served with each GraphQL endpoint. For example:</p> <p><code>http://localhost:5551/api/graphql</code></p> <p>Open the above address in your browser and try to use it.</p>"},{"location":"graphql-api/Admin-GraphQL/#authorization","title":"Authorization","text":"<p>Executing some of the queries requires authorization. Just add the following JSON into the header tab. Remember to update the credentials.</p> <pre><code>{\n   \"Authorization\": \"Basic YWxpY2VAbG9jYWxob3N0OnNlY3JldA==\"\n}\n</code></pre>"},{"location":"graphql-api/Admin-GraphQL/#static-documentation","title":"Static documentation","text":"<p>Open GraphQL documentation as a full page</p>"},{"location":"graphql-api/User-GraphQL/","title":"MongooseIM's GraphQL API for the user","text":"<p>The new GraphQL user API contains all commands from the client REST API and provides plenty of new ones. Multiple commands previously available only for the admin have their counterparts for the user.</p> <p>Queries and mutations can be executed with the POST or GET method, as specified in the GraphQL documentation. The endpoint URL is as configured in the Listen section, e.g. <code>http://localhost:5561/api/graphql</code>.</p> <p>Subscriptions can be executed with the GET method, and are handled with Server-Sent Events (SSE). The endpoint URL is the same as for regular queries with the addition of <code>/sse</code>, e.g. <code>http://localhost:5561/api/graphql/sse</code>.</p>"},{"location":"graphql-api/User-GraphQL/#authentication","title":"Authentication","text":"<p>MongooseIM uses Basic Authentication as the authentication method for the GraphQL API.</p> <p>Basic authentication is a simple authentication scheme built into the HTTP protocol. Each HTTP request to the client REST API has to contain the Authorization header with the word <code>Basic</code> followed by a space and a base64-encoded string <code>username@host:password</code>, where:</p> <ul> <li><code>username@host</code> is the user's bare JID,</li> <li><code>password</code> is the password used to register the user's account.</li> </ul> <p>For example, to authorize as <code>alice@localhost</code> with the password <code>secret</code>, the client would send a header:</p> <pre><code>Authorization: Basic YWxpY2VAbG9jYWxob3N0OnNlY3JldA==\n</code></pre>"},{"location":"graphql-api/User-GraphQL/#graphiql","title":"GraphiQL","text":"<p>GraphiQL is the GraphQL integrated development environment (IDE). It allows to experiment with API and run queries with ease. The GraphiQL page is automatically served with each GraphQL endpoint. For example:</p> <p><code>http://localhost:5561/api/graphql</code></p> <p>Open the above address in your browser and try to use it.</p>"},{"location":"graphql-api/User-GraphQL/#authorization","title":"Authorization","text":"<p>Executing some of the queries requires authorization. Just add the following JSON into the header tab. Remember to update the credentials.</p> <pre><code>{\n   \"Authorization\": \"Basic YWxpY2VAbG9jYWxob3N0OnNlY3JldA==\"\n}\n</code></pre>"},{"location":"graphql-api/User-GraphQL/#static-documentation","title":"Static documentation","text":"<p>Open GraphQL documentation as a full page</p>"},{"location":"migrations/3.1.1_3.2.0/","title":"3.1.1 to 3.2.0","text":""},{"location":"migrations/3.1.1_3.2.0/#odbc-renamed-to-rdbms-in-module-names-and-options","title":"<code>odbc</code> renamed to <code>rdbms</code> in module names and options","text":"<ul> <li>For MongooseIM users: simply replace all instances of <code>odbc</code> in your config files with <code>rdbms</code>.   E.g. <code>{auth_method, odbc}.</code> would now be <code>{auth_method, rdbms}.</code>.   It's also important to note that all metrics that previously contained <code>odbc</code> in their names have also been renamed to contain <code>rdbms</code> instead.</li> </ul> <p>Please note that <code>odbc_server</code> has been completely replaced with new <code>outgoing_pools</code> (see one of the next sections of this document) config element.</p> <ul> <li>For developers calling MongooseIM modules: most modules, functions and atoms had <code>odbc</code> in their names replaced with <code>rdbms</code>.   The only exceptions to this rule were names actually pertaining to the ODBC driver, e.g. <code>mongoose_rdbms_odbc</code>.</li> </ul>"},{"location":"migrations/3.1.1_3.2.0/#ejabberdcfg-renamed-to-mongooseimcfg","title":"<code>ejabberd.cfg</code> renamed to <code>mongooseim.cfg</code>","text":"<p>Rename the existing config file of MongooseIM from <code>ejabberd.cfg</code> to <code>mongooseim.cfg</code>.</p>"},{"location":"migrations/3.1.1_3.2.0/#pools-configuration","title":"Pools configuration","text":"<p>Configuring pools to external services has changed, please see Outgoing Connection doc for more details.</p> <p>Note</p> <p>Keep in mind that <code>outgoing_pools</code> is a list of pools, it may turn out that you will have more than one entry in the list when more than a single outgoing pool is needed.</p>"},{"location":"migrations/3.1.1_3.2.0/#example-old-format","title":"Example - Old format","text":"<pre><code>{elasticsearch_server, [{host, \"elastic.host.com\"}, {port, 9042}]}.\n{riak_server, [{pool_size, 20}, {address, \"127.0.0.1\"}, {port, 8087}, {riak_pb_socket_opts, []}]}.\n{http_connections, [{conn1, [{server, \"http://server:8080\"}, {pool_size, 50}]} ]}.\n{cassandra_servers, [\n  {default, 100,\n   [\n    {servers,\n     [\n      {\"cassandra_server1.example.com\", 9042},\n      {\"cassandra_server2.example.com\", 9042},\n      {\"cassandra_server3.example.com\", 9042},\n      {\"cassandra_server4.example.com\", 9042}\n     ]\n    },\n    {keyspace, \"big_mongooseim\"}\n   ]\n  }\n ]\n}.\n</code></pre>"},{"location":"migrations/3.1.1_3.2.0/#example-new-format","title":"Example - New format","text":"<p>This section provides direct \"translation\" of configuration from \"Old format\" section.</p> <pre><code>{outgoing_pools, [\n  {elastic, global, default, [], [{host, \"elastic.host.com\"}, {port, 9042}]},\n  {riak, global, default, [{workers, 20}], [{address, \"127.0.0.1\"}, {port, 8087}]},\n  {http, global, conn1, [{workers, 50}], [{server, \"http://server:8080\"}]},\n  {cassandra, global, default, [{workers, 100}], [\n        {servers, [\n          {\"cassandra_server1.example.com\", 9042},\n          {\"cassandra_server2.example.com\", 9042},\n          {\"cassandra_server3.example.com\", 9042},\n          {\"cassandra_server4.example.com\", 9042}\n        ]},\n        {keyspace, \"big_mongooseim\"}\n    ]}\n]}.\n</code></pre>"},{"location":"migrations/3.1.1_3.2.0/#rdbms-configuration-migration","title":"RDBMS configuration migration","text":"<p>RDBMS pools are no longer configured by a <code>{pool, odbc, _}</code> tuple, instead using the generic outgoing pools mechanism. The connection configuration is now passed via <code>server</code> option of the pool instead of being configured via a top-level <code>{odbc_server, _}</code> tuple. Similarly, the number of workers is no longer configured by <code>odbc_pool_size</code>, and the default pool no longer set by <code>odbc_pool</code>. A top-level <code>odbc_keepalive_interval</code> is now also specified as an option for a specific pool. For example:</p> <pre><code>{odbc_pool_size, 10}.\n{pool, odbc, default}.\n{odbc_server_type, mssql}.\n{odbc_server, \"DSN=mongoose-mssql;UID=sa;PWD=mongooseim_secret+ESL123\"}.\n{odbc_keepalive_interval, 10}.\n</code></pre> <p>will now become:</p> <pre><code>{rdbms_server_type, mssql}.\n{outgoing_pools, [\n {rdbms, global, default, [{workers, 10}],\n  [{server, \"DSN=mongoose-mssql;UID=sa;PWD=mongooseim_secret+ESL123\"}, {keepalive_interval, 10}]}\n]}.\n</code></pre> <p>Note that <code>odbc_server_type</code> was only renamed to <code>rdbms_server_type</code> and still remains a top-level configuration value.</p>"},{"location":"migrations/3.1.1_3.2.0/#sm_backend","title":"sm_backend","text":"<p>If you had the <code>sm_backend</code> set to redis like below:</p> <pre><code>{sm_backend, {redis, [{pool_size, 3}, {worker_config, [{host, \"localhost\"}, {port, 6379}]}]}}.\n</code></pre> <p>The pool needs to be defined inside <code>outgoing_pools</code> like this:</p> <pre><code>{outgoing_pools, [\n {redis, global, default, [{workers, 3}],\n  [{host, \"localhost\"},\n   {port, 6379}]}\n]}.\n</code></pre> <p>and the <code>sm_backend</code> configuration needs to changed to just:</p> <pre><code>{sm_backend, {redis, []}}.\n</code></pre>"},{"location":"migrations/3.1.1_3.2.0/#mod_global_distrib","title":"mod_global_distrib","text":"<p>If you had <code>mod_global_distrib</code> configured in the following way:</p> <pre><code>{mod_global_distrib, [\n        (...)\n        {redis, [\n              {pool_size, 24},\n              {server, \"172.16.0.3\"}\n             ]}\n       ]}\n</code></pre> <p>The redis pool needs to be defined inside <code>outgoing_pools</code>:</p> <pre><code>{outgoing_pools, [\n {redis, global, global_distrib, [{workers, 24}], [{host, \"172.16.0.3\"}]}\n]}.\n</code></pre>"},{"location":"migrations/3.3.0_3.4.0/","title":"3.3.0 to 3.4.0","text":""},{"location":"migrations/3.3.0_3.4.0/#new-field-in-message-archive-management-muc-entries-sender-id","title":"New field in Message Archive Management MUC entries: Sender ID","text":"<p>As a part of ensuring GDPR compliance, it is essential to be able to efficiently query MAM MUC data via sender ID (to retrieve user's personal data). Originally, the sender JID could be found only as a part of an encoded XML message element, so finding all items sent by a certain user would be extremely inefficient (or rather: anti-efficient). MongooseIM 3.4.0 uses a modified schema for MAM MUC backends which enables a more efficient extraction.</p> <p>Below you may find migration instructions specific to your MAM backend.</p>"},{"location":"migrations/3.3.0_3.4.0/#rdbms","title":"RDBMS","text":""},{"location":"migrations/3.3.0_3.4.0/#step-1","title":"Step 1","text":"<p>Please execute the following SQL statements on your MIM database:</p> <p>MySQL</p> <pre><code>ALTER TABLE mam_muc_message ADD COLUMN sender_id INT UNSIGNED;\nCREATE INDEX i_mam_muc_message_sender_id USING BTREE ON mam_muc_message(sender_id);\n</code></pre> <p>PostgreSQL</p> <pre><code>ALTER TABLE mam_muc_message ADD COLUMN sender_id INT;\nCREATE INDEX i_mam_muc_message_sender_id ON mam_muc_message USING BTREE (sender_id);\n</code></pre> <p>MSSQL</p> <pre><code>ALTER TABLE [dbo].[mam_muc_message] ADD sender_id bigint;\nCREATE INDEX i_mam_muc_message_sender_id ON mam_muc_message(sender_id);\n</code></pre>"},{"location":"migrations/3.3.0_3.4.0/#step-2","title":"Step 2","text":"<p>Now you have a schema that is compatible with MIM 3.4.0 but isn't GDPR-compliant yet because the new column has no meaningful data.</p> <p>Please pick your favourite scripting/programming language and populate the new column with the help of a dedicated script. You'll need to iterate over the whole <code>mam_muc_message</code> table with the following algorithm:</p> <ol> <li>Provide <code>message</code> column content to the script.</li> <li>The script returns sender's JID as <code>username@server</code> string. You need to split it to get a separate username and server.</li> <li>Select ID from <code>mam_server_user</code> by the username and server. If it doesn't exist, insert a new one (<code>id</code> column is automatically incremented).</li> <li>Update the <code>sender_id</code> column in <code>mam_muc_message</code> with the retrieved ID.</li> </ol>"},{"location":"migrations/3.3.0_3.4.0/#cassandra","title":"Cassandra","text":""},{"location":"migrations/3.3.0_3.4.0/#step-1_1","title":"Step 1","text":"<p>Please execute the following CQL statements on your MIM database:</p> <pre><code>USE mongooseim;\nALTER TABLE mam_muc_message ADD from_jid varchar;\nCREATE INDEX ON mam_muc_message (from_jid);\nDESC mam_muc_message;\n</code></pre>"},{"location":"migrations/3.3.0_3.4.0/#step-2_1","title":"Step 2","text":"<p>Now you have a schema that is compatible with MIM 3.4.0 but isn't GDPR-compliant yet because the new column has no meaningful data.</p> <p>Please pick your favourite scripting/programming language and populate the new column with the help of a dedicated script. You'll need to iterate over the whole <code>mam_muc_message</code> table with the following algorithm:</p> <ol> <li>Extract the whole <code>mam_muc_message</code> table. Please make sure to use the paging feature of your Cassandra client, as the MAM tables tend to be very large. <pre><code>SELECT * FROM mam_muc_message;\n</code></pre></li> <li>To make data extraction faster, MongooseIM stores 2 copies of the message in the table: <pre><code>cqlsh:mongooseim&gt; SELECT * FROM mam_muc_message WHERE id = 399582233150625537 ALLOW FILTERING;\n\n room_jid                      | with_nick | id                 | from_jid | message                        | nick_name\n-------------------------------+-----------+--------------------+----------+--------------------------------+-----------\n room-ad1d999b9e@muc.localhost |           | 399582233150625537 |     null | 0x8350000001...998de2fa8426837 |       Sid\n room-ad1d999b9e@muc.localhost |       Sid | 399582233150625537 |     null | 0x8350000001...998de2fa8426837 |       Sid\n</code></pre></li> <li>The copy with an empty <code>with_nick</code> column must be updated.</li> <li>Extract the sender's JID from the <code>message</code> column in the same way as described in the RDBMS migration section. By default cassandra backend uses the <code>eterm</code> format.</li> <li>Update the <code>from_jid</code> column with the value of the extracted sender's JID: <pre><code>cqlsh:mongooseim&gt; UPDATE mam_muc_message SET from_jid = 'username@server' WHERE id = 399582233150625537  AND with_nick = '' AND room_jid = 'room-ad1d999b9e@muc.localhost';\ncqlsh:mongooseim&gt; SELECT * FROM mam_muc_message WHERE id = 399582233150625537 ALLOW FILTERING;\n\n room_jid                      | with_nick | id                 | from_jid        | message                        | nick_name\n-------------------------------+-----------+--------------------+-----------------+--------------------------------+-----------\n room-ad1d999b9e@muc.localhost |           | 399582233150625537 | username@server | 0x8350000001...998de2fa8426837 |       Sid\n room-ad1d999b9e@muc.localhost |       Sid | 399582233150625537 |            null | 0x8350000001...998de2fa8426837 |       Sid\n</code></pre></li> </ol>"},{"location":"migrations/3.3.0_3.4.0/#riak","title":"Riak","text":"<p>Changes to Riak schema are backward compatible with the current MongooseIM release. This means that skipping the migration will cause only some of the new features (namely GDPR data retrieval) to not work correctly.</p>"},{"location":"migrations/3.3.0_3.4.0/#step-1_2","title":"Step 1","text":"<p>Please update the Riak schema: <pre><code># Set the RIAK_HOST to your Riak HTTP endpoint\n# Set the RIAK_MAM_SCHEMA_PATH to point to new schema path, which\n# by default is: RIAK_MAM_SCHEMA_PATH=tools/mam_search_schema.xml\ncurl -v -XPUT $RIAK_HOST/search/schema/mam \\\n    -H 'Content-Type:application/xml' \\\n    --data-binary @${RIAK_MAM_SCHEMA_PATH}\n</code></pre></p> <p>After that we need to either reload all Riak nodes (restart them) or manually reload the schema on live nodes. Reloading the schema on live nodes requires access to Erlang Shell of one of the Riak nodes (any of them). The instruction on how to get to Riak's Erlang shell is beyond this guide, but if you manage to get to it, just call:</p> <pre><code>yz_index:reload(&lt;&lt;\"mam\"&gt;&gt;).\n</code></pre>"},{"location":"migrations/3.3.0_3.4.0/#step-2_2","title":"Step 2","text":"<p>After the schema is posted and reloaded, all \"new\" objects will be indexed properly as long they contain 2 new fields: <code>msg_owner_jid</code> and <code>mam_type</code>. The new MongooseIM code will insert both of them for all new MAM entries, but for all existing ones need to have the fields added. In order to do that, we need to create a migration script (just pick your favourite scripting/programming language) that will do the following for each object in each bucket of type <code>mam_yz</code> (the object will be referred as <code>obj</code>):</p> <ul> <li>Use this dedicated script to convert the <code>obj.packet_register</code> field value into a so called <code>$SENDER_JID</code>.</li> <li>If the script returns <code>$SENDER_JID</code> correctly:</li> <li>set <code>obj.mam_type = 'muc'</code></li> <li>set <code>obj.msg_owner_jid = $SENDER_JID</code></li> <li>If the script returns error code <code>-2</code></li> <li>set <code>obj.mam_type = 'pm'</code></li> <li>based on <code>obj_yz_rk</code> formatted as <code>$LOCAL_JID/$REMOTE_JID/$MSG_ID</code>, set <code>obj.msg_owner_jid = $LOCAL_JID</code></li> <li>Save the modified <code>obj</code></li> </ul>"},{"location":"migrations/3.3.0_3.4.0/#elasticsearch","title":"ElasticSearch","text":""},{"location":"migrations/3.3.0_3.4.0/#step-1_3","title":"Step 1","text":"<p>Please update the mapping for <code>muc_messages</code>:</p> <pre><code>PUT muc_messages/_mapping/muc\n{\n  \"properties\": {\n    \"mam_id\": {\n      \"type\": \"long\"\n    },\n    \"room\": {\n      \"type\": \"keyword\"\n    },\n    \"from_jid\" : {\n      \"type\": \"keyword\"\n    },\n    \"source_jid\": {\n      \"type\": \"keyword\"\n    },\n    \"message\": {\n      \"type\": \"text\",\n      \"index\": false\n    },\n    \"body\": {\n      \"type\": \"text\",\n      \"analyzer\": \"english\"\n    }\n  }\n}\n</code></pre>"},{"location":"migrations/3.3.0_3.4.0/#step-2_3","title":"Step 2","text":"<p>Now you have a schema that is compatible with MIM 3.4.0 but isn't GDPR-compliant yet because the new field has no meaningful data.</p> <p>Please pick your favourite scripting/programming language and populate the new column with the help of a dedicated script. You'll need to iterate over the all <code>muc_messages</code> documents with the following algorithm:</p> <ol> <li>Extract some documents (notice the <code>size</code> parameter) for conversion: <pre><code>GET muc_messages/_search/?size=100&amp;q=!_exists_:from_jid\n</code></pre></li> <li>Extract the sender's JID from the <code>message</code> field in the same way as described in the RDBMS migration section. Elasticsearch backend uses exclusively the <code>xml</code> format.</li> <li>Update the <code>from_jid</code> column with the value of the extracted sender's JID: <pre><code>POST localhost:9200/muc_messages/muc/%_id%/_update\n{\n  \"doc\": {\n    \"from_jid\" : \"%sender's jid%\"\n  }\n}\n</code></pre></li> <li>Repeat all the actions until the full conversion of the database is done.</li> </ol>"},{"location":"migrations/3.5.0_3.6.0/","title":"3.5.0 to 3.6.0","text":""},{"location":"migrations/3.5.0_3.6.0/#push-notifications","title":"Push notifications","text":"<p>In this version, push notifications work with MongoosePush 2.0.0 and its API v3 by default.</p>"},{"location":"migrations/3.5.0_3.6.0/#push-notifications-are-send-from-the-servers-jid","title":"Push notifications are send from the server's JID","text":"<p>Since this version, MongooseIM sends the PubSub publish request to push notifications node from the server's JID. Previously the publish request was sent from the user's JID. If the push PubSub node was created with <code>pubsub#access_mode</code> set to whitelist and <code>pubsub#publish_model</code> set to publishers, now the server's JID needs to be added to the push node in order to send the push notifications successfully.</p> <p>It can be done by sending the following request from the push node's owner:</p> <pre><code>&lt;iq to='pubsub.mypubsub'\n    type='set'\n    id='wy6Hibg='\n    from='alice@wonderland.com/resource'&gt;\n    &lt;pubsub xmlns='http://jabber.org/protocol/pubsub#owner'&gt;\n        &lt;affiliations node='punsub_node_for_my_private_iphone'&gt;\n            &lt;affiliation jid='mychat.com' affiliation='publish-only'/&gt;\n        &lt;/affiliations&gt;\n    &lt;/pubsub&gt;\n&lt;/iq&gt;\n</code></pre>"},{"location":"migrations/3.5.0_3.6.0/#mod_push-module-is-no-longer-available","title":"<code>mod_push</code> module is no longer available","text":"<p><code>mod_push</code> has been deprecated since MongooseIM 2.1.1 and it is no longer present in this release. Please use the <code>push</code> backend for <code>mod_event_pusher</code>, which is the direct equivalent of <code>mod_push</code>.</p>"},{"location":"migrations/3.5.0_3.6.0/#different-muc-light-room-schema-definition","title":"Different MUC Light room schema definition","text":"<p>We have introduced a change that enforces defining fields with default values. The previous setup led to problems with the RDBMS backend as separating MUC Light options for the schema from the default values was unintuitive. In a specific case when the default config was a subset of the schema and the client failed to provide these values when a room was created, MUC Light stored the incomplete config in the table. Then the missing config fields could not be supplied by the clients. If you've experienced this issue, a way to fix it is described in the Known issues page.</p> <p>The current method makes it impossible to make the same mistake, as it disallows field definition without any default value.</p>"},{"location":"migrations/3.5.0_3.6.0/#what-has-changed-for-administrators","title":"What has changed? - for administrators","text":"<ul> <li>It's no longer possible to declare a room config field only with its name.</li> <li>There is no <code>default_config</code> option anymore.</li> <li>Declaring a field name and type without an atom key is no longer supported.</li> </ul>"},{"location":"migrations/3.5.0_3.6.0/#example-1","title":"Example 1","text":"<p>Old config:</p> <pre><code>{config_schema, [\n                 \"roomname\",\n                 \"subject\",\n                 \"background\",\n                 \"notification_sound\"\n                ]},\n{default_config, [\n                  {\"roomname\", \"The room\"},\n                  {\"subject\", \"Chit-chat\"}\n                 ]}\n</code></pre> <p>New config:</p> <pre><code>{config_schema, [\n                 {\"roomname\", \"The room\"},\n                 {\"subject\", \"Chit-chat\"},\n                 {\"background\", \"\"},\n                 {\"notification_sound\", \"\"}\n                ]}\n</code></pre>"},{"location":"migrations/3.5.0_3.6.0/#example-2","title":"Example 2","text":"<p>Old config:</p> <pre><code>{config_schema, [\n                 \"roomname\",\n                 {\"subject\", binary},\n                 {\"priority\", priority, integer},\n                 {\"owners-height\", owners_height, float}\n                ]},\n{default_config, [\n                  {\"roomname\", \"The room\"},\n                  {\"subject\", \"Chit-chat\"},\n                  {\"priority\", 10}]}\n</code></pre> <p>New config:</p> <pre><code>{config_schema, [\n                 {\"roomname\", \"The room\"},\n                 {\"subject\", \"Chit-chat\"},\n                 {\"priority\", 10, priority, integer},\n                 {\"owners-height\", 180.0, owners_height, float}\n                ]}\n</code></pre>"},{"location":"migrations/3.5.0_3.6.0/#what-has-changed-for-developers","title":"What has changed? - for developers","text":"<p>The room config schema is currently stored in a completely different data structure, so if you have any custom modules that use it, you'll need to adjust them. Additionally, all definitions and the room config API have been extracted from <code>mod_muc_light.hrl</code> and <code>mod_muc_light_utils.erl</code> into <code>mod_muc_light_room_config.erl</code> module.</p> <p>For more information, please check the specs for types and functions in the aforementioned file.</p>"},{"location":"migrations/3.5.0_3.6.0/#what-hasnt-changed","title":"What hasn't changed?","text":"<ul> <li>The default room config is still the same, i.e. <code>roomname</code> (default: <code>\"Untitled\"</code>) and <code>subject</code> (empty string).</li> <li>The room config representation in databases (both Mnesia and RDBMS) is the same; no need for migration.</li> </ul>"},{"location":"migrations/3.5.0_3.6.0/#offline-storage","title":"Offline storage","text":"<p>In this version the offline storage entries contain one additional information for internal use. Riak and mnesia backends don't require any changes when upgrading to this version. In case of the RDBMS backends, a new column needs to be added. Below there are MySQL, PgSQL and MSSQL queries which can be used to add the new column.</p> <p>MySQL</p> <pre><code>ALTER TABLE offline_message ADD COLUMN permanent_fields mediumblob;\n</code></pre> <p>PostgreSQL</p> <pre><code>ALTER TABLE offline_message ADD COLUMN permanent_fields bytea;\n</code></pre> <p>MSSQL</p> <pre><code>ALTER TABLE [dbo].[offline_message] ADD permanent_fields varbinary(max);\n</code></pre>"},{"location":"migrations/3.5.0_3.6.0/#persistent-cluster-id","title":"Persistent Cluster ID","text":"<p>In this version, a new cluster ID has been created, to correctly identify the lifetime of a cluster, across restarts and nodes joining and leaving. This is used for example by System Metrics. This cluster ID is persisted in RDBMS, when an RDBMS database is available, but a new table is required:</p> <p>MySQL <pre><code>CREATE TABLE mongoose_cluster_id (k varchar(50) PRIMARY KEY, v text);\n</code></pre></p> <p>PostgreSQL <pre><code>CREATE TABLE mongoose_cluster_id (k varchar(50) PRIMARY KEY, v text);\n</code></pre></p> <p>MSSQL <pre><code>CREATE TABLE mongoose_cluster_id (k varchar(50) NOT NULL PRIMARY KEY, v text);\n</code></pre></p>"},{"location":"migrations/3.6.0_3.7.0/","title":"3.6.0 to 3.7.0","text":""},{"location":"migrations/3.6.0_3.7.0/#extended-scram-sha-support","title":"Extended SCRAM-SHA Support","text":"<p>Since this version, SCRAM authentication mechanisms were extended to support additional hashing algorithms. So far only SHA-1 was available for hashing and now SHA-224, SHA-256, SHA-384 and SHA-512 are also supported. This includes the authentication mechanisms and the password format that is stored. Please note that enabling and using this functionality might require adjusting the server setup.</p>"},{"location":"migrations/3.6.0_3.7.0/#sasl-mechanisms","title":"SASL mechanisms","text":"<p>The possible list of allowed SALS mechanisms was changed. We've added new and more secure methods that can be used during stream negotiation.</p> <p>Please note that if you were using the following in the configurations file</p> <p><code>{sasl_mechanisms, [cyrsasl_scram]}</code></p> <p>using <code>cyrsasl_scram</code> as <code>sasl_mechanism</code> is now incorrect. You can achieve the same result of allowing the usage of SHA-1 with SCRAM authentication mechanism with:</p> <p><code>{sasl_mechanisms, [cyrsasl_scram_sha1]}</code></p> <p>You can also specify a list of all supported SCRAM-SHA mechanisms with:</p> <p><code>{sasl_mechanisms, [cyrsasl_scram_sha1, cyrsasl_scram_sha224, cyrsasl_scram_sha256, cyrsasl_scram_sha384, cyrsasl_scram_sha512, cyrsasl_scram_sha1_plus, cyrsasl_scram_sha224_plus, cyrsasl_scram_sha256_plus, cyrsasl_scram_sha384_plus, cyrsasl_scram_sha512_plus]}</code></p> <p>Before setting up this configuration, please make sure that the client application is capable of authenticating with a selected set of authentication mechanisms. For more details please refer to the authentication section.</p>"},{"location":"migrations/3.6.0_3.7.0/#scram-password-format","title":"SCRAM password format","text":"<p>To complement the extensions of the authentication mechanisms, the SCRAM password format was also updated. Please note that SCRAM is now the default password format. While it is still possible to configure the password storage in plaintext format, we highly discourage doing so for security reasons. Changing the default of this option can lead to unexpected behaviours, so if after the upgrade you encounter issues with authenticating the users, please check the conifg file. If you are missing any of the following configuration lines:</p> <p><code>{password_format, scram}</code> or <code>{password_format, plain}</code></p> <p>it means that you were using the default plaintext format.</p> <p>Since the default of the password format has changed, your MongooseIM server thinks that the plaintext passwords are stored as SCRAM hashes. This can lead to users failing to authenticate.</p> <p>If you are still using the plaintext password format, please consider migrating your password storage to store scram hashes instead. Using the plaintext password format is still possible to support legacy installations and to ease the debugging while developing new features. Should you want to continue using the plaintext password format please add the following in the <code>auth_opts</code>:</p> <p><code>{password_format, plain}</code></p> <p>Legacy plaintext and SCRAM formats are still supported. Nonetheless, please note that if you were using SCRAM as a password format, this meant that SHA-1 was used as the hashing algorithm. This allowed authenticating with PLAINTEXT and SCRAM-SHA-1.</p> <p>In the new setup the user will still authenticate with those mechanisms given the possible slight syntax change explained above.</p> <p>However, mixing of the old password format with the new authentication mechanisms can lead to conflicting situations where:</p> <ol> <li>A user wants to authenticate with e.g. SCRAM-SHA-256.</li> <li>His old password format is only storing SHA-1 password hash.</li> <li>The authentication fails as it is not possible to derive SHA-256 hash from SHA-1.</li> </ol> <p>If you want to use the new password format with a full set of supported SHA hashes, a password change is required to calculate all the new SHA hashes. Otherwise, please make sure that you provide the right <code>sasl_mechanism</code> configuration, where the mechanism you authenticate with is compatible with the password format you store.</p> <p>For more details related to the new password format, please refer to authentication and SCRAM serialization sections.</p>"},{"location":"migrations/3.6.0_3.7.0/#message-retraction","title":"Message retraction","text":"<p>If you are using MAM with RDBMS, please update your database schema with the following queries. This change is necessary as the support for XEP-0424: Message Retraction requires a new column for the <code>origin_id</code> attribute of MAM messages, which allows MAM to identify the messages to retract. Indexes for this column are required for efficient queries. Only the messages stored after this change can be retracted.</p> <p>MySQL <pre><code>ALTER TABLE mam_message ADD COLUMN origin_id varchar(250) CHARACTER SET binary;\nCREATE INDEX i_mam_message_username_jid_origin_id USING BTREE ON mam_message (user_id, remote_bare_jid, origin_id);\n\nALTER TABLE mam_muc_message ADD COLUMN origin_id varchar(250) CHARACTER SET binary;\nCREATE INDEX i_mam_muc_message_room_id_sender_id_origin_id USING BTREE ON mam_muc_message (room_id, sender_id, origin_id);\n</code></pre></p> <p>PostgreSQL <pre><code>ALTER TABLE mam_message ADD COLUMN origin_id varchar;\nCREATE INDEX i_mam_message_username_jid_origin_id ON mam_message USING BTREE (user_id, remote_bare_jid, origin_id);\n\nALTER TABLE mam_muc_message ADD COLUMN origin_id varchar;\nCREATE INDEX i_mam_muc_message_room_id_sender_id_origin_id ON mam_muc_message USING BTREE (room_id, sender_id, origin_id);\n</code></pre></p> <p>MSSQL</p> <p>Note</p> <p><code>i_mam_message_username_jid_id</code> was missing from the schema, this is now fixed. It is not required by message retraction, but this change is recommended.</p> <pre><code>ALTER TABLE mam_message ADD origin_id nvarchar(250) NULL;\nCREATE INDEX i_mam_message_username_jid_id ON mam_message (user_id, remote_bare_jid, id);\nCREATE INDEX i_mam_message_username_jid_origin_id ON mam_message (user_id, remote_bare_jid, origin_id);\n\nALTER TABLE mam_muc_message ADD origin_id nvarchar(250) NULL;\nCREATE INDEX i_mam_muc_message_room_id_sender_id_origin_id ON mam_muc_message (room_id, sender_id, origin_id);\n</code></pre>"},{"location":"migrations/3.6.0_3.7.0/#rdbms-backend-for-multi-user-chats-muc","title":"RDBMS backend for Multi-User Chats (MUC)","text":"<p>If you're planning to use the new RDBMS backend for MUC, note that the following tables need to be added to the schema:</p> <p>MySQL <pre><code>CREATE TABLE muc_rooms(\n    id SERIAL,\n    muc_host VARCHAR(250)   NOT NULL,\n    room_name VARCHAR(250)       NOT NULL,\n    options JSON            NOT NULL,\n    PRIMARY KEY (muc_host, room_name)\n);\n\nCREATE TABLE muc_room_aff(\n    room_id BIGINT          NOT NULL REFERENCES muc_rooms(id),\n    luser VARCHAR(250)      NOT NULL,\n    lserver VARCHAR(250)    NOT NULL,\n    resource VARCHAR(250)   NOT NULL,\n    aff SMALLINT            NOT NULL\n);\n\nCREATE INDEX i_muc_room_aff_id ON muc_room_aff (room_id);\n\nCREATE TABLE muc_registered(\n    muc_host VARCHAR(250)   NOT NULL,\n    luser VARCHAR(250)      NOT NULL,\n    lserver VARCHAR(250)    NOT NULL,\n    nick VARCHAR(250)       NOT NULL,\n    PRIMARY KEY (muc_host, luser, lserver)\n);\n</code></pre></p> <p>PostgreSQL <pre><code>CREATE TABLE muc_rooms(\n    id BIGSERIAL            NOT NULL UNIQUE,\n    muc_host VARCHAR(250)   NOT NULL,\n    room_name VARCHAR(250)       NOT NULL,\n    options JSON            NOT NULL,\n    PRIMARY KEY (muc_host, room_name)\n);\n\nCREATE TABLE muc_room_aff(\n    room_id BIGINT          NOT NULL REFERENCES muc_rooms(id),\n    luser VARCHAR(250)      NOT NULL,\n    lserver VARCHAR(250)    NOT NULL,\n    resource VARCHAR(250)   NOT NULL,\n    aff SMALLINT            NOT NULL\n);\n\nCREATE INDEX i_muc_room_aff_id ON muc_room_aff (room_id);\n\nCREATE TABLE muc_registered(\n    muc_host VARCHAR(250)   NOT NULL,\n    luser VARCHAR(250)      NOT NULL,\n    lserver VARCHAR(250)    NOT NULL,\n    nick VARCHAR(250)       NOT NULL,\n    PRIMARY KEY (muc_host, luser, lserver)\n);\n</code></pre></p> <p>MSSQL <pre><code>CREATE TABLE muc_rooms(\n    id BIGINT IDENTITY(1,1) NOT NULL UNIQUE,\n    muc_host VARCHAR(250)   NOT NULL,\n    room_name VARCHAR(250)       NOT NULL,\n    options VARCHAR(MAX)    NOT NULL,\n    PRIMARY KEY (muc_host, room_name)\n);\n\nCREATE TABLE muc_room_aff(\n    room_id BIGINT          NOT NULL REFERENCES muc_rooms(id),\n    luser VARCHAR(250)      NOT NULL,\n    lserver VARCHAR(250)    NOT NULL,\n    resource VARCHAR(250)   NOT NULL,\n    aff SMALLINT            NOT NULL\n);\n\nCREATE INDEX i_muc_room_aff_id ON muc_room_aff (room_id);\n\nCREATE TABLE muc_registered(\n    muc_host VARCHAR(250)   NOT NULL,\n    luser VARCHAR(250)      NOT NULL,\n    lserver VARCHAR(250)    NOT NULL,\n    nick VARCHAR(250)       NOT NULL,\n    PRIMARY KEY (muc_host, luser, lserver)\n);\n</code></pre></p>"},{"location":"migrations/3.7.0_4.0.0/","title":"3.7.0 to 4.0.0","text":""},{"location":"migrations/3.7.0_4.0.0/#toml-configuration-file","title":"TOML configuration file","text":"<p>Note that a minor 4.0.1 version has been released with small but important changes to take into account if you're migrating to MongooseIM 4.0.</p> <p>There is a new TOML configuration file: <code>mongooseim.toml</code>. The legacy <code>mongooseim.cfg</code> file is still supported as an alternative, but deprecated.</p> <p>You are advised to rewrite your configuration file in the TOML format. Until then, you can still make MongooseIM use the old format by setting the <code>MONGOOSEIM_CONFIG_FORMAT</code> environment variable to <code>cfg</code>:</p> <p><code>MONGOOSEIM_CONFIG_FORMAT=cfg mongooseimctl start</code></p>"},{"location":"migrations/3.7.0_4.0.0/#changes-in-hooks","title":"Changes in hooks","text":"<p>If modified the code, e.g. by adding a custom extension module, you might want to update your handlers to the following hooks. You can find them in the <code>mongoose_hooks</code> module.</p> <ul> <li>We refactored the MAM (XEP-0313) implementation, replacing the long lists of arguments accepted by the <code>mam_archive_message</code> and <code>mam_muc_archive_message</code> hooks with a more readable key-value structure (a map).</li> <li>The argument list of the <code>failed_to_store_message</code> hook has been changed as a result of code refactoring.</li> </ul>"},{"location":"migrations/3.7.0_4.0.0/#otp-logger-as-the-logging-framework","title":"OTP Logger as the logging framework","text":"<p>We've transitioned from lager to Logger as our logging framework. No internal changes were introduced, and the default handlers still implement the same behaviour, but the configuration is different, though still done in the same place. To know more, please refer to each framework's documentation.</p> <p>As an example, for our previous default lager configuration: <pre><code> {lager, [\n    %% Make logging more async\n    %% If some very heavy loaded process want to log something, it's better to not block the process.\n    {async_threshold, 2000},\n    {async_threshold_window, 500},\n    %% Kill sink if it has more than 10k messages\n    {killer_hwm, 10000},\n    {killer_reinstall_after, 5000},\n    {log_root, \"log\"},\n    {crash_log, \"crash.log\"},\n    {handlers, [\n        {lager_console_backend, [{level, info}]},\n        {lager_file_backend, [{file, \"ejabberd.log\"}, {level, info}, {size, 2097152}, {date, \"$D0\"}, {count, 5}]}\n    ]}\n  ]}\n</code></pre></p> <p>The equivalent Logger configuration is <pre><code> {kernel, [\n  {logger_level, warning},\n  {logger, [\n    %% Console logger\n    {handler, default, logger_std_h, #{}},\n    %% Disk logger for errors\n    {handler, disk_log, logger_disk_log_h,\n       #{config =&gt; #{\n           file =&gt; \"log/mongooseim.log\",\n           type =&gt; wrap,\n           max_no_files =&gt; 5,\n           max_no_bytes =&gt; 2097152,\n           sync_mode_qlen =&gt; 2000, % If sync_mode_qlen is set to the same value as drop_mode_qlen,\n           drop_mode_qlen =&gt; 2000, % synchronous mode is disabled. That is, the handler always runs\n           flush_qlen =&gt; 5000,     % in asynchronous mode, unless dropping or flushing is invoked.\n           overload_kill_enable =&gt; true\n         },\n         formatter =&gt; {logger_formatter, #{\n           depth =&gt; 12,\n           chars_limit =&gt; 4096\n         }}\n        }\n    }\n  ]}]}\n</code></pre></p>"},{"location":"migrations/4.0.0_4.0.1/","title":"4.0.0 to 4.0.1","text":""},{"location":"migrations/4.0.0_4.0.1/#toml-configuration-file","title":"TOML configuration file","text":"<p>After the latest MongooseIM 4.0.0 release that announced the new TOML configuration format, we've changed a few configuration formats:</p> <ul> <li>Removed the backend option for <code>mod_bosh</code> as \"mnesia\" was the only valid option.</li> <li>Removed the backend option for <code>mod_inbox</code> as \"rdbms\" was the only valid option.</li> <li>Deprecated <code>mod_revproxy</code>, it can now only be configured with the older, <code>.cfg</code> configuration file. Please refer to the older versions of the documentation to see how to do this.</li> <li>For <code>mod_global_distrib</code>:</li> <li>Replaced the <code>bounce</code> option with <code>bounce.enabled</code> for <code>mod_global_distrib</code>. It was a \"boolean with only false being a valid option\" which was very confusing. This was because when someone wanted to have bounce enabled it became a TOML table as opposed to a key. Now there is a switch in the bounce section for this behaviour which keeps the behaviour of having bounce enabled by default.</li> <li>Replaced the <code>tls</code> option with <code>tls.enabled</code> for <code>mod_global_distrib</code> for the same reason. The only issue here is as tls is disabled by default (it needs some options in the tls section to be set), the \"no section - disabled\" approach seems more natural. Just for the consistency, it's changed to be similar to the bounce section in this regard.</li> </ul>"},{"location":"migrations/4.0.0_4.0.1/#mod_http_notification-module-is-no-longer-available","title":"<code>mod_http_notification</code> module is no longer available","text":"<p><code>mod_http_notification</code> has been deprecated since MongooseIM 2.1.1 and it is no longer available in this release. Please use the <code>http</code> backend for <code>mod_event_pusher</code>, which is the direct equivalent of <code>mod_http_notification</code>.</p>"},{"location":"migrations/4.0.0_4.0.1/#metrics","title":"Metrics","text":"<p><code>mod_http_notification</code> metric was updated and now is available as <code>mod_event_pusher_http</code>. For more details on how to configure <code>mod_event_pusher</code> with <code>http</code> backend, please see this section.</p>"},{"location":"migrations/4.0.1_4.1.0/","title":"4.0.1 to 4.1.0","text":""},{"location":"migrations/4.0.1_4.1.0/#http-file-upload","title":"HTTP File Upload","text":"<p>HTTP File Upload specification older than 0.3.0 is no longer supported, i.e. the one namespaced with <code>urn:xmpp:http:upload</code>. Currently, only the <code>urn:xmpp:http:upload:0</code> XMLNS is served.</p> <p>All major, modern client libraries and applications support the 0.3.0+ specification. If you experience any issues with making requests to the HTTP File Upload service, please update your client.</p>"},{"location":"migrations/4.0.1_4.1.0/#retirement-of-the-old-cfg-format","title":"Retirement of the old <code>*.cfg</code> format","text":"<p>Since release 4.1.0, we are no longer supporting the <code>*.cfg</code> MongooseIM configuration format. Please use the <code>TOML</code> format instead.</p>"},{"location":"migrations/4.0.1_4.1.0/#minor-changes-in-the-toml-config-format","title":"Minor changes in the <code>TOML</code> config format","text":"<ul> <li> <p><code>mod_bosh.max_pause</code> instead of <code>maxpause</code></p> </li> <li> <p><code>mod_disco.server_info.module</code>: the field is optional, no longer required</p> </li> <li> <p><code>mod_global_distrib.connections.advertised_endpoints</code>: default not set (<code>false</code> is no longer accepted)</p> </li> <li> <p><code>mod_global_distrib.connections.tls.enabled</code>: the flag was removed, TLS is enabled by providing the <code>cacertfile</code> and <code>certfile</code> options</p> </li> <li> <p><code>mod_http_upload.max_file_size</code>: <code>undefined</code> is no longer allowed</p> </li> <li> <p><code>mod_mam_meta.user_prefs_store</code>: <code>false</code> is no longer allowed</p> </li> <li> <p><code>mod_muc_light.config_schema</code>: the usage of <code>value</code> and <code>type</code> fields was replaced with one of the following fields: <code>string_value</code>, <code>integer_value</code> or <code>float_value</code></p> </li> <li> <p><code>mod_muc_log.css_file</code>: the default value was changed from <code>\"false\"</code> to <code>not set</code></p> </li> <li> <p><code>mod_stream_management</code>: minor adjustments of <code>buffer_max</code> and <code>ack_freq</code> options, <code>buffer</code> and <code>ack</code> booleans were added</p> </li> <li> <p><code>listen.c2s.tls.ciphers</code>, <code>listen.http.tls.ciphers</code> and <code>outgoing_pools.*.*.connection.tls.ciphers</code>: the ciphers should now be formatted as a specification string</p> </li> <li> <p>listen.http.handlers.mod_websockets.ping_rate: <code>none</code> is no longer allowed</p> </li> </ul>"},{"location":"migrations/4.1.0_4.2.0/","title":"4.1.0 to 4.2.0","text":""},{"location":"migrations/4.1.0_4.2.0/#minor-changes-in-the-toml-config-format","title":"Minor changes in the <code>TOML</code> config format","text":"<ul> <li>The <code>pgsql_users_number_estimate</code> option was moved to <code>auth.rdbms.users_number_estimate</code>. The new option supports PostgreSQL and MySQL.</li> </ul>"},{"location":"migrations/4.1.0_4.2.0/#db-migrations","title":"DB migrations","text":""},{"location":"migrations/4.1.0_4.2.0/#new-inbox-features","title":"New inbox features","text":"<p>Inbox now implements new functionality (see inbox), but this required adding new columns to the DB. If you're using inbox, please update the tables as follows:</p> <p>For Postgres or MySQL: <pre><code>ALTER TABLE inbox\n  ADD COLUMN archive BOOLEAN DEFAULT false,\n  ADD COLUMN muted_until BIGINT DEFAULT 0;\n</code></pre> For MSSQL: <pre><code>ALTER TABLE inbox\n  ADD COLUMN archive TINYINT DEFAULT 0,\n  ADD COLUMN muted_until BIGINT DEFAULT 0;\n</code></pre></p>"},{"location":"migrations/4.1.0_4.2.0/#archived-groupchat-messages-in-mod_mam","title":"Archived groupchat messages in <code>mod_mam</code>","text":"<p>The <code>archive_groupchats</code> option is now set to <code>false</code> by default, as documented. Before the change, the private message (PM) archive stored incoming groupchat messages as well, contrary to the documentation. After the upgrade you can manually remove those messages from the database. For example, when the MUC domain is <code>muc.localhost</code> and <code>rdbms_message_format</code> has the default value <code>internal</code>, one can remove such messages with the following query:</p> <pre><code>DELETE FROM mam_message\n  WHERE direction = 'I' AND remote_bare_jid LIKE 'muc.localhost:%';\n</code></pre> <p>This can be a heavy operation and it needs to be done with caution.</p>"},{"location":"migrations/4.1.0_4.2.0/#using-mod_auth_token-with-mysql-and-ms-sql","title":"Using <code>mod_auth_token</code> with MySQL and MS SQL","text":"<p>The <code>mod_auth_token</code> module supports MySQL and MS SQL now. To use this functionality, you need to create the <code>auth_token</code> table with the query which you can find in <code>priv/mysql.sql</code> and <code>priv/mssql2012.sql</code>, respectively.</p>"},{"location":"migrations/4.2.0_5.0.0/","title":"4.2.0 to 5.0.0","text":""},{"location":"migrations/4.2.0_5.0.0/#db-migrations","title":"DB migrations","text":"<p>The migrations scripts for Postgres, MySQL, MSSQL can be found in the <code>priv/migrations</code> directory. Please remember to provide the existing server domain for the <code>server</code> column instead of the localhost.</p>"},{"location":"migrations/4.2.0_5.0.0/#changes-in-xeps","title":"Changes in XEPs:","text":"<ul> <li><code>mod_last</code><ul> <li>Table <code>last</code> - added server column, updated primary key and indexes.</li> </ul> </li> <li><code>mod_privacy</code><ul> <li>Table <code>privacy_default_list</code> - added server column, updated primary key and indexes.</li> <li>Table <code>privacy_list</code> - added server column, updated primary key and indexes.</li> </ul> </li> <li><code>mod_private</code><ul> <li>Table <code>private_storage</code> - added server column, updated primary key and indexes, removed unused columns.</li> </ul> </li> <li><code>mod_roster</code><ul> <li>Table <code>rosterusers</code> - added server column, updated indexes.</li> <li>Table <code>rostergroups</code> - added server column, updated indexes.</li> <li>Table <code>roster_version</code> - added server column, updated primary key and indexes.</li> </ul> </li> <li><code>mod_muc</code> <ul> <li>Table <code>i_muc_light_blocking</code> - updated indexes.</li> </ul> </li> <li><code>mod_inbox</code><ul> <li>Table <code>inbox</code> - updated primary key and indexes.</li> </ul> </li> </ul>"},{"location":"migrations/4.2.0_5.0.0/#other-changes","title":"Other changes:","text":"<ul> <li>RDBMS auth - modified <code>users</code> table.</li> <li>Added <code>domain_settings</code> table.</li> <li>Added <code>domain_events</code> table.</li> </ul>"},{"location":"migrations/4.2.0_5.0.0/#config-migrations","title":"Config migrations","text":"<p>Most important changes without which a server might not run.</p>"},{"location":"migrations/4.2.0_5.0.0/#section-general","title":"Section general","text":"<ul> <li>New mandatory option <code>default_server_domain</code> that must be set. This domain is used as a default when one cannot be determined, for example when sending XMPP stream errors to unauthenticated clients.</li> <li>Option <code>hosts</code> is no longer mandatory, but if omitted, at least one host type has to be defined.</li> <li>New option <code>host_types</code>. If omitted, at least one host has to be defined. This is the list of names for the types of hosts that will serve dynamic XMPP domains.</li> </ul> <p>Simply use <code>hosts</code> if you want to stay with static domains and use <code>host_types</code> for dynamic domains.</p>"},{"location":"migrations/4.2.0_5.0.0/#section-host_config","title":"Section host_config","text":"<ul> <li>Option <code>host</code> specifies the XMPP domain that this section refers to.</li> <li>New option <code>host_type</code> specifies the host type that this section refers to. Either this option or <code>host</code> is mandatory.</li> </ul> <p>For every configured <code>host</code> the <code>host_type</code> of the same name is declared automatically. As <code>host_config</code> section is now used for changing configuration of the <code>host_type</code>, we don't need <code>host</code> option any more. But to stay compatible with an old config format we keep <code>host</code> option as well. Now it is just a synonym to host type.</p>"},{"location":"migrations/4.2.0_5.0.0/#hook-migrations","title":"Hook migrations","text":"<p>The support for dynamic domains has resulted in changes in most Hooks. Mostly these changes concern calling hooks for a <code>host_type</code>.</p>"},{"location":"migrations/4.2.0_5.0.0/#added","title":"Added","text":"<ul> <li><code>adhoc_local_commands/4</code></li> <li><code>adhoc_sm_commands/4</code></li> <li><code>does_user_exist/3</code></li> <li><code>get_room_affiliations/2</code></li> <li><code>mam_get_behaviour/4</code></li> <li><code>mam_set_prefs/6</code></li> <li><code>disco_muc_features/1</code></li> <li><code>remove_domain/2</code></li> <li><code>node_cleanup/1</code></li> <li><code>gen_mod:get_module_opt_by_subhost</code></li> </ul>"},{"location":"migrations/4.2.0_5.0.0/#removed","title":"Removed","text":"<ul> <li><code>host_config_update/4</code></li> <li><code>local_send_to_resource_hook/5</code></li> <li><code>muc_room_pid/3</code></li> <li><code>amp_check_packet/4</code></li> <li><code>amp_error_action_triggered/2</code></li> <li><code>amp_notify_action_triggered/2</code></li> <li><code>room_send_packet/3</code></li> <li><code>caps_update/6</code></li> <li><code>caps_add/6</code></li> </ul>"},{"location":"migrations/4.2.0_5.0.0/#changed","title":"Changed","text":"<ul> <li><code>auth_failed/2</code> -&gt; <code>auth_failed/3</code></li> <li><code>failed_to_store_message/2</code> -&gt; <code>failed_to_store_message/1</code></li> <li><code>filter_local_packet/2</code> -&gt; <code>filter_local_packet/1</code></li> <li><code>get_key/3</code> -&gt; <code>get_key/2</code></li> <li><code>register_command/2</code> -&gt; <code>register_command/1</code></li> <li><code>register_subhost/3</code> -&gt; <code>register_subhost/2</code></li> <li><code>resend_offline_messages_hook/3</code> -&gt; <code>resend_offline_messages_hook/2</code></li> <li><code>rest_user_send_packet/5</code> -&gt; <code>rest_user_send_packet/4</code></li> <li><code>set_vcard/4</code> -&gt; <code>set_vcard/3</code></li> <li><code>unregister_command/2</code> -&gt; <code>unregister_command/1</code></li> <li><code>unregister_subhost/2</code> -&gt; <code>unregister_subhost/1</code></li> <li><code>user_ping_timeout/3</code> -&gt; <code>user_ping_timeout/2</code></li> <li><code>user_send_packet/5</code> -&gt; <code>user_send_packet/4</code></li> <li><code>xmpp_stanza_dropped/5</code> -&gt; <code>xmpp_stanza_dropped/4</code></li> <li><code>c2s_broadcast_recipients/6</code> -&gt; <code>c2s_broadcast_recipients/4</code></li> <li><code>c2s_filter_packet/6</code> -&gt; <code>c2s_filter_packet/4</code></li> <li><code>c2s_presence_in/5</code> -&gt; <code>c2s_presence_in/4</code></li> <li><code>check_bl_c2s/2</code> -&gt; <code>check_bl_c2s/1</code></li> <li><code>session_opening_allowed_for_user/3</code> -&gt; <code>session_opening_allowed_for_user/2</code></li> <li><code>privacy_check_packet/6</code> -&gt; <code>privacy_check_packet/5</code></li> <li><code>privacy_get_user_list/3</code> -&gt; <code>privacy_get_user_list/2</code></li> <li><code>privacy_updated_list/4</code> -&gt; <code>privacy_updated_list/3</code></li> <li><code>offline_groupchat_message_hook/5</code> -&gt; <code>offline_groupchat_message_hook/4</code></li> <li><code>offline_message_hook/5</code> -&gt; <code>offline_message_hook/4</code></li> <li><code>set_presence_hook/5</code> -&gt; <code>set_presence_hook/3</code></li> <li><code>sm_broadcast/6</code> -&gt; <code>sm_broadcast/5</code></li> <li><code>sm_filter_offline_message/5</code> -&gt; <code>sm_filter_offline_message/4</code></li> <li><code>sm_remove_connection_hook/6</code> -&gt; <code>sm_remove_connection_hook/5</code></li> <li><code>unset_presence_hook/5</code> -&gt; <code>unset_presence_hook/3</code></li> <li><code>xmpp_bounce_message/2</code> -&gt; <code>xmpp_bounce_message/1</code></li> <li><code>roster_get/3</code> -&gt; <code>roster_get/2</code></li> <li><code>roster_get_jid_info/4</code> -&gt; <code>roster_get_jid_info/3</code></li> <li><code>roster_get_versioning_feature/2</code> -&gt; <code>roster_get_versioning_feature/1</code></li> <li><code>roster_groups/2</code> -&gt; <code>roster_groups/1</code></li> <li><code>roster_in_subscription/6</code> -&gt; <code>roster_in_subscription/5</code></li> <li><code>roster_out_subscription/5</code> -&gt; <code>roster_out_subscription/4</code></li> <li><code>roster_process_item/2</code> -&gt; <code>roster_process_item/3</code></li> <li><code>roster_push/4</code> -&gt; <code>roster_push/3</code></li> <li><code>roster_set/5</code> -&gt; <code>roster_set/4</code></li> <li><code>is_muc_room_owner/4</code> -&gt; <code>is_muc_room_owner/3</code></li> <li><code>can_access_identity/4</code> -&gt; <code>can_access_identity/3</code></li> <li><code>can_access_room/4</code> -&gt; <code>can_access_room/3</code></li> <li><code>mam_archive_id/3</code> -&gt; <code>mam_archive_id/2</code></li> <li><code>mam_archive_size/4</code> -&gt; <code>mam_archive_size/3</code></li> <li><code>mam_get_behaviour/5</code> -&gt; <code>mam_get_behaviour/4</code></li> <li><code>mam_set_prefs/7</code> -&gt; <code>mam_set_prefs/6</code></li> <li><code>mam_remove_archive/4</code> -&gt; <code>mam_remove_archive/3</code></li> <li><code>mam_lookup_messages/3</code> -&gt; <code>mam_lookup_messages/2</code></li> <li><code>mam_archive_message/3</code> -&gt; <code>mam_archive_message/2</code></li> <li><code>mam_muc_archive_id/3</code> -&gt; <code>mam_muc_archive_id/2</code></li> <li><code>mam_muc_archive_size/4</code> -&gt; <code>mam_muc_archive_size/3</code></li> <li><code>mam_muc_get_behaviour/5</code> -&gt; <code>mam_muc_get_behaviour/4</code></li> <li><code>mam_muc_set_prefs/7</code> -&gt; <code>mam_muc_set_prefs/6</code></li> <li><code>mam_muc_remove_archive/4</code> -&gt; <code>mam_muc_remove_archive/3</code></li> <li><code>mam_muc_lookup_messages/3</code> -&gt; <code>mam_muc_lookup_messages/2</code></li> <li><code>mam_muc_archive_message/3</code> -&gt; <code>mam_muc_archive_message/2</code></li> <li><code>mam_muc_flush_messages/3</code> -&gt; <code>mam_muc_flush_messages/2</code></li> <li><code>get_mam_pm_gdpr_data/3</code> -&gt; <code>get_mam_pm_gdpr_data/2</code></li> <li><code>get_mam_muc_gdpr_data/3</code> -&gt; <code>get_mam_muc_gdpr_data/2</code></li> <li><code>get_personal_data/3</code> -&gt; <code>get_personal_data/2</code></li> <li><code>find_s2s_bridge/3</code> -&gt; <code>find_s2s_bridge/2</code></li> <li><code>s2s_allow_host/3</code> -&gt; <code>s2s_allow_host/2</code></li> <li><code>s2s_connect_hook/3</code> -&gt; <code>s2s_connect_hook/2</code></li> <li><code>s2s_receive_packet/2</code> -&gt; <code>s2s_receive_packet/1</code></li> <li><code>disco_local_identity/6</code> -&gt; <code>disco_local_identity/1</code></li> <li><code>disco_sm_identity/6</code> -&gt; <code>disco_sm_identity/1</code></li> <li><code>disco_local_items/6</code> -&gt; <code>disco_local_items/1</code></li> <li><code>disco_sm_items/6</code> -&gt; <code>disco_sm_items/1</code></li> <li><code>disco_local_features/6</code> -&gt; <code>disco_local_features/1</code></li> <li><code>disco_sm_features/6</code> -&gt; <code>disco_sm_features/1</code></li> <li><code>disco_info/5</code> -&gt; <code>disco_info/1</code></li> <li><code>amp_check_condition/4</code> -&gt; <code>amp_check_condition/3</code></li> <li><code>amp_determine_strategy/6</code> -&gt; <code>amp_determine_strategy/5</code></li> <li><code>amp_verify_support/3</code> -&gt; <code>amp_verify_support/2</code></li> <li><code>forget_room/4</code> -&gt; <code>forget_room/3</code></li> <li><code>invitation_sent/7</code> -&gt; <code>invitation_sent/6</code></li> <li><code>join_room/6</code> -&gt; <code>join_room/5</code></li> <li><code>leave_room/6</code> -&gt; <code>leave_room/5</code></li> <li><code>room_packet/6</code> -&gt; <code>room_packet/5</code></li> <li><code>caps_recognised/5</code> -&gt; <code>caps_recognised/4</code></li> <li><code>pubsub_create_node/6</code> -&gt; <code>pubsub_create_node/5</code></li> <li><code>pubsub_delete_node/5</code> -&gt; <code>pubsub_delete_node/4</code></li> <li><code>pubsub_publish_item/7</code> -&gt; <code>pubsub_publish_item/6</code></li> <li><code>mod_global_distrib_known_recipient/5</code> -&gt; <code>mod_global_distrib_known_recipient/4</code></li> </ul>"},{"location":"migrations/4.2.0_5.0.0/#metrics-rest-api-obsolete","title":"Metrics REST API (obsolete)","text":"<p>The API is still considered obsolete so if you are using it, please consider using WombatOAM or metrics reporters as described in Logging and monitoring.</p> <p>In each endpoint, <code>host</code> has been changed to <code>host_type</code>. This is because the metrics are now collected per host type rather than host.</p>"},{"location":"migrations/4.2.0_5.0.0/#users-cache","title":"Users cache","text":"<p>MongooseIM used to feature a cache to check whether a user exists, that was unavoidably enabled, and had no eviction policy, that is, the cache could continue growing forever. Now, MIM features a module called <code>mod_cache_users</code> that implements a configurable cache policy, that can be enabled, disabled, and parametrised, per <code>host_type</code>. This might not be enabled by default in your configuration, so we recommend you verify your configuration and enable it if needed.</p>"},{"location":"migrations/5.0.0_5.1.0/","title":"5.0.0 to 5.1.0","text":""},{"location":"migrations/5.0.0_5.1.0/#configuration-changes","title":"Configuration changes","text":"<p>The configuration format has slightly changed and you might need to amend <code>mongooseim.toml</code>.</p>"},{"location":"migrations/5.0.0_5.1.0/#section-listen","title":"Section <code>listen</code>","text":"<p>The options <code>tls.verify_peer</code> and <code>tls.verify_mode</code> are replaced with just <code>tls.verify_mode</code>. You need to amend the affected options for each listener:</p> <ul> <li><code>verify_peer = false</code> (the old default for C2S and HTTP listeners) should be replaced with <code>verify_mode = \"none\"</code>.</li> <li><code>verify_peer = true</code> should be replaced with <code>verify_mode = \"peer\"</code> or just removed, as this is the new default.</li> </ul> <p>There is a new, simplified configuration format for <code>mongoose_client_api</code>. You need to change the <code>listen</code> section unless you have disabled the client API in your configuration file. Consult the option description and the example configuration for details.</p>"},{"location":"migrations/5.0.0_5.1.0/#section-acl","title":"Section <code>acl</code>","text":"<p>The implicit check for user's domain in patterns is now configurable and the default behaviour (previously undocumented) is more consistent - the check is always performed unless disabled with <code>match = \"all\"</code>. See the description of <code>current_domain</code> for more details.</p>"},{"location":"migrations/5.0.0_5.1.0/#section-auth","title":"Section <code>auth</code>","text":"<ul> <li>Each authentication method needs a TOML section, e.g. if you have the <code>rdbms</code> method enabled, you need to have the <code>[auth.rdbms]</code> section in the configuration file, even if it is empty. The <code>methods</code> option is not required anymore and especially if you are using only one method, you can remove it.</li> <li>The <code>auth.scram_iterations</code> option was moved to <code>auth.password.scram_iterations</code>.</li> </ul> <p>See the auth configuration for details.</p>"},{"location":"migrations/5.0.0_5.1.0/#section-outgoing_pools","title":"Section <code>outgoing_pools</code>","text":"<p>The option <code>tls.verify_peer</code> is replaced with <code>tls.verify_mode</code>. You need to change this option for each outgoing connection pool:</p> <ul> <li><code>verify_peer = false</code> (the old default for all pools except Riak) should be replaced with <code>verify_mode = \"none\"</code>.</li> <li><code>verify_peer = true</code> should be replaced with <code>verify_mode = \"peer\"</code> or just removed, as this is the new default.</li> </ul> <p>A few options of the outgoing connection pools were changed for consistency:</p> <ul> <li>Cassandra servers: <code>ip_address</code> was renamed to <code>host</code>,</li> <li>RabbitMQ: the <code>amqp_</code> option prefix was removed,</li> <li>LDAP: <code>rootdn</code> was renamed to <code>root_dn</code>; <code>encrypt</code> was removed (the <code>tls</code> option should be used instead).</li> </ul>"},{"location":"migrations/5.0.0_5.1.0/#section-s2s","title":"Section <code>s2s</code>","text":"<ul> <li>All options can be set globally or inside <code>host_config</code>.</li> <li>The <code>host_config.s2s</code> section overrides the whole global section now. Previously only the specified options were overridden.</li> <li>The <code>domain_certfile</code> option has been moved to the <code>general</code> section because it affects <code>c2s</code> connections as well.</li> </ul>"},{"location":"migrations/5.0.0_5.1.0/#section-host_config","title":"Section <code>host_config</code>","text":"<p>The rules for overriding global options in the <code>host_config</code> section have been simplified. The <code>auth</code> section and the <code>s2s.address</code> and <code>s2s.host_policy</code> options now completely override the corresponding general settings instead of being merged with them.</p>"},{"location":"migrations/5.0.0_5.1.0/#extension-modules","title":"Extension modules","text":"<ul> <li><code>mod_auth_token</code> has a new configuration format - if you are using this module, amend the <code>validity_period</code> option.</li> <li><code>mod_event_pusher</code> has an updated configuration format - the <code>backend</code> subsection is removed and the <code>http</code> backend has a new <code>handlers</code> option. Adjust your configuration according to <code>mod_event_pusher</code> documentation.</li> <li><code>mod_mam_meta</code> does not have the <code>rdbms_message_format</code> and <code>simple</code> options anymore. Use <code>db_jid_format</code> and <code>db_message_format</code> instead.</li> <li><code>mod_shared_roster_ldap</code> all options have their <code>ldap_</code> prefix dropped.</li> <li><code>mod_vcard</code> LDAP options are moved into an LDAP subsection.</li> </ul>"},{"location":"migrations/5.0.0_5.1.0/#async-workers","title":"Async workers","text":"<p>The <code>async_writer</code> flag of MAM is now a section on its own, that absorbs previous flags related to it: <code>flush_interval</code>, <code>max_batch_size</code> and <code>pool_size</code> now become subelements of the <code>async_writer</code> section, with one more parameter, <code>enabled</code>. Below an example:</p> <p><pre><code>[modules.mod_mam_meta]\n  flush_interval = 1000\n  max_batch_size = 100\n  muc.async_writer = false\n</code></pre> now becomes <pre><code>[modules.mod_mam_meta]\n  async_writer.flush_interval = 1000\n  async_writer.batch_size = 100\n  muc.async_writer.enabled = false\n</code></pre></p>"},{"location":"migrations/5.0.0_5.1.0/#smart-markers","title":"Smart markers","text":"<p>There's an experimental and undocumented module called <code>mod_smart_markers</code>, that had a default table in the RDBMS schema, which you probably never used (or shouldn't have, as it was undocumented). If you rely on this table, the column <code>from_jid</code> has been split in <code>from_luser</code> and <code>lserver</code>, in order to support the <code>remove_domain</code> callback for the dynamic domains functionality. You might need to migrate it, or simply drop the previously defined table and recreate the new one.</p>"},{"location":"migrations/5.0.0_5.1.0/#inbox","title":"Inbox","text":"<p>The archive functionality recently introduced has been extended to support many more boxes. IQ queries can remain as they were, but, a new flag called <code>box</code> is now introduced, and if provided, it takes preference over the old <code>archive</code> flag. The database requires a migration, as the archive is now a column storing the proper name of the box, see the migrations for Postgres, MySQL and MSSQL in the <code>priv/migrations</code> directory.</p>"},{"location":"migrations/5.0.0_5.1.0/#removal-of-deprecated-modules","title":"Removal of deprecated modules","text":"<ul> <li><code>mod_revproxy</code> - removed from the code base as it was unsupported since 4.2.0.</li> <li><code>mod_aws_sns</code> - its functionality is fully covered by <code>mod_event_pusher</code>.</li> </ul>"},{"location":"migrations/5.0.0_5.1.0/#internal-module-configuration-rework","title":"Internal module configuration rework","text":"<p>If you are using your own extension modules (or services), you need to update the code. The most important change is that configuration options were stored in proplists before, and now they are stored in maps, so e.g. the <code>start/2</code> function of your module should expect a map as the second argument.</p>"},{"location":"migrations/5.1.0_6.0.0/","title":"5.1.0 to 6.0.0","text":""},{"location":"migrations/5.1.0_6.0.0/#module-configuration","title":"Module configuration","text":"<ul> <li>The <code>mod_mam_meta</code> module is now named <code>mod_mam</code> for simplicity, so if you are using this module, you need to update the module name in <code>mongooseim.toml</code>.</li> <li><code>mod_commands</code>, <code>mod_inbox_commands</code>, <code>mod_muc_commands</code> and <code>mod_muc_light_commands</code> are removed. Their functionality is now fully covered by <code>mongoose_admin_api</code>. You need to delete these modules from <code>mongooseim.toml</code>.</li> </ul>"},{"location":"migrations/5.1.0_6.0.0/#metrics","title":"Metrics","text":"<p>The <code>mod_mam</code> backend module is now named <code>mod_mam_pm</code> for consistency with <code>mod_mam_muc</code>. As a result, the backend metrics have updated names, i.e. each <code>[backends, mod_mam, Metric]</code> name is changed to <code>[backends, mod_mam_pm, Metric]</code>, where <code>Metric</code> can be <code>lookup</code> or <code>archive</code>.</p>"},{"location":"migrations/5.1.0_6.0.0/#rest-api","title":"REST API","text":"<p>The whole REST API has been unified and simplified. There are now only two REST API handlers that you can configure in the <code>listen</code> section of <code>mongooseim.toml</code>:</p> <ul> <li><code>mongoose_admin_api</code> handles the administrative API,</li> <li><code>mongoose_client_api</code> handles the client-facing API.</li> </ul> <p>You need to remove the references to the obsolete handlers (<code>mongoose_api_client</code>, <code>mongoose_api_admin</code>, <code>mongoose_api</code>, <code>mongoose_domain_handler</code>) from your configuration file.</p> <p>Additionally, all the backend administration endpoints for <code>mod_muc_light</code> require now <code>XMPPMUCHost</code> (MUC subdomain) instead of <code>XMPPHost</code> (domain) and <code>roomID</code> instead of <code>roomName</code>.</p> <p>For some endpoints, the response messages may be slightly different because of the unification with other APIs.</p>"},{"location":"migrations/5.1.0_6.0.0/#command-line-interface","title":"Command Line Interface","text":"<p>For some commands, the response messages may be slightly different because of the unification with other APIs.</p>"},{"location":"migrations/5.1.0_6.0.0/#dynamic-domains","title":"Dynamic domains","text":"<p>Removing a domain was a potentially troublesome operation: if the removal was to fail midway through the process, retrials wouldn't be accepted. This is fixed now, by first disabling and marking a domain for removal, then running all the handlers, and only on full success will the domain be removed. So if any failure is notified, the whole operation can be retried again.</p> <p>The database requires a migration, as the status of a domain takes now more than the two values a boolean allows, moreover the table for data of the domain admin has been added. See the migrations for Postgres, MySQL and MSSQL in the <code>priv/migrations</code> directory.</p>"},{"location":"migrations/5.1.0_6.0.0/#hooks","title":"Hooks","text":"<p>Support for <code>ejabberd_hooks</code> has been removed. Now handlers should be compliant with <code>gen_hook</code>. If you have some custom modules (e.g. that implement some XMPP extensions) and use hooks mechanism, please refactor your handlers to be compliant with it. For more details refer to <code>Hooks and Handlers</code> chapter.</p>"},{"location":"migrations/6.0.0_6.1.0/","title":"6.0.0 to 6.1.0","text":""},{"location":"migrations/6.0.0_6.1.0/#listener-configuration","title":"Listener configuration","text":"<p>With the new implementation of the client-to-server (C2S) state machine, <code>mongoose_c2s</code>, there are some changes in the listener options:</p> <ul> <li>The <code>zlib</code> option for supporting stream compression, which was present in the default configuration file, is removed, and you need to delete it from your listener configuration unless you have already done so. The extension is obsolete due to security vulnerability, and the CRIME vulnerability has been found a long time ago.</li> <li>Support for [<code>listen.http.handlers.mod_websockets.service</code>] has been removed, the component connection over WebSockets did not correspond to any XEP/RFC, and neither it was properly described anywhere in the MIM documentation. It was present in the default configuration file, and you need to delete it from your listener configuration unless you have already done so.</li> <li>The <code>max_fsm_queue</code> option is no longer supported for C2S listeners. It is incompatible with the new <code>gen_statem</code> state machine, and if you need to limit incoming traffic, you should use traffic shapers instead. You need to remove this option from your C2S configuration if you are using it.</li> <li>The default value of the <code>backlog</code> option for all XMPP listeners has been increased from 100 to 1024 for performance reasons.</li> <li>You might be interested in the new C2S listener options: <code>max_connections</code>, <code>c2s_state_timeout</code>, <code>reuse_port</code> and <code>backwards_compatible_session</code>. The first two options can be set for websockets as well.</li> </ul>"},{"location":"migrations/6.0.0_6.1.0/#module-configuration","title":"Module configuration","text":"<p>The <code>mongoose_c2s</code> module, which provides the core XMPP features, is now separated from modules which used to have their parts hardcoded into the old C2S implementation:</p> <ul> <li>Presence handling has been exported to a separate module <code>mod_presence</code>, which is enabled in the default configuration file. Enable <code>mod_presence</code> in your configuration file unless you are sure that you don't need server-side presence handling, in which case you could gain some performance by not using this module.</li> <li>Stream management is now handled completely by <code>mod_stream_management</code>, and if you don't need it, you can now gain more performance than before by disabling it.</li> <li>Client state indication is now handled completely by <code>mod_csi</code>, and if you don't need it, you can now gain more performance than before by disabling it.</li> </ul>"},{"location":"migrations/6.0.0_6.1.0/#database-migration","title":"Database migration","text":"<p>There is no database migration required when upgrading from version <code>6.0.0</code> to <code>6.1.0</code>.</p>"},{"location":"migrations/6.0.0_6.1.0/#metrics","title":"Metrics","text":"<p>The <code>c2s_unauthenticated_iq</code> metric has been removed.</p> <p>Since we don't know whether a compressed/encrypted packet contains a single stanza or a batch, calculation of histogram metrics for compressed and encrypted streams is inaccurate. The following histogram metrics have been removed:     * <code>global.data.xmpp.received.compressed_size</code> - obsolete, <code>stream compression</code> support is removed.     * <code>global.data.xmpp.sent.compressed_size</code> - obsolete, <code>stream compression</code> support is removed.     * <code>global.data.xmpp.received.encrypted_size</code> - impractical, has no value but consumes calculation resources.     * <code>global.data.xmpp.sent.encrypted_size</code> - impractical, has no value but consumes calculation resources.</p> <p>A set of <code>global.data.xmpp.received.**</code> and <code>global.data.xmpp.sent.**</code> spiral data metrics has been introduced instead.</p>"},{"location":"migrations/6.0.0_6.1.0/#hooks","title":"Hooks","text":"<p>Multiple hooks have been added, removed or changed because of the introduction of <code>mongoose_c2s</code> - the most important change is the increased granularity of the <code>user_send_*</code> and <code>user_receive_*</code> hooks. If you have some custom modules (e.g. that implement some XMPP extensions) using the hooks mechanism, please refactor your handlers to be compliant with the new hooks. Refer to Hooks Description and Message routing for more details.</p>"},{"location":"migrations/6.0.0_6.1.0/#upgrade-procedure","title":"Upgrade procedure","text":"<p>As long as you are not using Mnesia for persistent storage (it is not recommended to do so), the safest option would be to prepare a new cluster with version 6.1.0, and switch the traffic to it on a load balancer. The only downside is that clients connected to different clusters would see each other as offline. If you are limited to one cluster, it is recommended to do a split-cluster rolling upgrade by removing each node from the cluster before stopping and upgrading it, and gradually forming a new separate cluster from the upgraded nodes. This means that for each newly started node except the first one, you should join one of the previously started nodes.</p>"},{"location":"migrations/6.0.0_6.1.0/#rolling-upgrade-issues","title":"Rolling upgrade issues","text":"<p>If you want to perform a typical rolling upgrade instead, there are a few potential issues caused by the introduction of <code>mongoose_c2s</code>. When a node is stopped, upgraded and started again, it reconnects to the cluster. When a stanza is routed between users connected to different nodes of the cluster, an internal message is sent between the nodes. In version 6.1.0 that message has a different format, and routing a stanza between nodes with versions 6.0.0 and 6.1.0 would fail, resulting in a warning message for each stanza. This means that after upgrading the first node you might get a huge amount of warning messages on all nodes, causing a performance drop. What is more, the sender's node would still assume that the recipient is online, and some actions (e.g. responding with the <code>service-unavailable</code> error) would be omitted.</p> <p>Changing the log level</p> <p>You can set the log level to <code>error</code> during the upgrade to silence the excess warnings. Before the upgrade, set the log level on all nodes: <pre><code>mongooseimctl server setLoglevel --level ERROR\n</code></pre> Before starting the upgraded node, set the <code>loglevel</code> option to <code>error</code> in the configuration file. After the whole upgrade procedure, use <code>mongooseimctl</code> to change the log level back to the previous value (<code>warning</code> by default). Change the values in the configuration files as well to make the setting permanent.</p>"},{"location":"migrations/6.1.0_6.2.0/","title":"6.1.0 to 6.2.0","text":""},{"location":"migrations/6.1.0_6.2.0/#internal-databases","title":"Internal databases","text":"<p>So far MongooseIM has been using the internal Mnesia database to replicate the in-memory data between cluster nodes. Now there is an option to use CETS instead. Mnesia is still used by default, so you don't need to change your configuration file. If you want to switch to CETS, see the tutorial and the reference for <code>internal_databases</code>.</p>"},{"location":"migrations/6.1.0_6.2.0/#database-migration","title":"Database migration","text":"<p>There is a new table <code>discovery_nodes</code> in the database, which is used by CETS for dynamic discovery of cluster nodes. See the migrations for Postgres, MySQL and MSSQL in the <code>priv/migrations</code> directory. Although the new table is only needed by CETS, we recommend applying the migration anyway to keep the database in sync with the latest schema.</p>"},{"location":"migrations/6.1.0_6.2.0/#validation-of-tls-options","title":"Validation of TLS options","text":"<p>Erlang/OTP 26 has more strict checking of the TLS options, as described in release highlights. MongooseIM follows the same rules now, preventing runtime crashes if TLS is misconfigured.</p> <p>By default <code>verify_mode</code> is set to <code>\"peer\"</code> for each <code>tls</code> section in the configuration, and this requires <code>cacertfile</code> - otherwise the server will refuse to start. This was already documented, but not enforced. The option <code>\"selfsigned_peer\"</code> also requires <code>cacertfile</code> now.</p> <p>This change affects the following configuration sections:</p> <ul> <li>Listeners. Currently it only affects <code>http</code> and <code>c2s</code> with <code>tls.module</code> set to <code>\"just_tls\"</code>, but we recommend fixing it for all listeners already, because in future releases all listeners would have this validation.</li> <li>Outgoing connections.</li> </ul> <p>For each of the affected sections, if there is any <code>tls</code> option present, make sure that either <code>tls.cacertfile</code> is provided or <code>tls.verify_mode</code> is set to <code>\"none\"</code>.</p>"},{"location":"migrations/6.1.0_6.2.0/#transition-to-new-cli-commands","title":"Transition to New CLI Commands","text":"<p>Legacy CLI commands previously marked as deprecated have now been removed. The users are encouraged to explore the new GraphQL-based CLI. It is recommended to transition to the new CLI commands prior to the next system upgrade. The configuration options <code>general.mongooseimctl_access_commands</code> and <code>services.service_admin_extra</code> related to the legacy CLI were also removed. You need to remove them from your configuration file unless you have already done so.</p>"},{"location":"migrations/6.1.0_6.2.0/#removed-support-for-riak","title":"Removed support for Riak","text":"<p>The deprecated and obsolete Riak database is not supported anymore, and you cannot configure it in the <code>outgoing_pools</code> section.</p>"},{"location":"migrations/6.2.0_x.x.x/","title":"6.2.0 to 6.x.x","text":""},{"location":"migrations/6.2.0_x.x.x/#database-migration","title":"Database migration","text":"<p>There is a new column in the <code>mam_message</code> table in the database, which is used to support including or excluding groupchat results in a user archive. See the migrations for Postgres, MySQL and MSSQL in the <code>priv/migrations</code> directory. Please be aware that the filtering process will only be effective for new messages and will not apply to those messages that have already been stored in the database.</p>"},{"location":"migrations/6.2.0_x.x.x/#presences","title":"Presences","text":"<p><code>mod_presences</code> was internally refactored to modernise and improve the performance of the code, but as a side-effect, code for XEP-0018 was removed. Note that this XEP was not advertised and as a matter of fact was deprecated already in 2003, so if your client was depending on it, it is high time to update.</p>"},{"location":"migrations/6.2.0_x.x.x/#roster","title":"Roster","text":"<p><code>mod_roster</code> was internally refactored to modernise and improve the performance of the code, but as a side-effect, some database migrations need to be carried. See the migrations for Postgres, MySQL and MSSQL in the <code>priv/migrations</code> directory.</p>"},{"location":"migrations/6.2.0_x.x.x/#outgoing-pools","title":"Outgoing pools","text":"<p>The outgoing connections option <code>host</code> is now named <code>host_type</code>, see outgoing pools for more information.</p> <p>The option <code>single_host</code> for the scope has been deprecated, in favour of configuring the specified pools within the <code>host_config</code> section.</p>"},{"location":"migrations/jid-from-mam-muc-script/","title":"MAM MUC migration helper","text":""},{"location":"migrations/jid-from-mam-muc-script/#the-purpose-of-sender-jid-from-mam-messageescript","title":"The purpose of sender-jid-from-mam-message.escript","text":"<p>This script may be used as a part of migration from MongooseIM 3.3.0 (or older). It is able to extract a JID of a groupchat message sender from an XML payload. This piece of information is essential for GDPR commands (retrieve data and remove user) to work properly, as without it the operations on MAM MUC data in DB would be extremely inefficient.</p> <p>Please consult \"3.3.0 to...\" migration guide for details. DB-specific sections describe where the payloads are stored and what you should do with the extracted JID.</p>"},{"location":"migrations/jid-from-mam-muc-script/#requirements","title":"Requirements","text":"<p>This script may be executed in every *nix environment which has OTP 19.0 (or newer) installed and <code>escript</code> executable is in <code>PATH</code>.</p> <p>It doesn't depend on any MongooseIM code or library, so it may be used as a standalone file.</p>"},{"location":"migrations/jid-from-mam-muc-script/#how-to-use","title":"How to use?","text":"<p><code>sender-jid-from-mam-message.escript (eterm | xml)</code></p> <p>The only parameter required by the script is the input format.</p> <p>You should use <code>eterm</code> if (in MongooseIM config file):</p> <ul> <li>You haven't set <code>db_message_format</code> option for MAM at all.</li> <li><code>db_message_format</code> is set to <code>mam_message_compressed_eterm</code> or <code>mam_message_eterm</code></li> </ul> <p>You should use the <code>xml</code> option if:</p> <ul> <li><code>db_message_format</code> is set to <code>mam_message_xml</code>.</li> </ul> <p>Once started, the script will run in an infinite loop (until killed or interrupted), expecting a stream of inputs. For every provided payload, a JID will be returned immediately. All communication with the script is done via <code>stdio</code>.</p>"},{"location":"migrations/jid-from-mam-muc-script/#input-format","title":"Input format","text":"<p>For both <code>eterm</code> and <code>xml</code> mode, the script expects an input in a very similar format. The high-level overview is:</p> <pre><code>LENGTH\\nPAYLOAD\n</code></pre> <ul> <li><code>LENGTH</code> is the <code>PAYLOAD</code> length in bytes; if the data retrieved from a DBMS is a Unicode string, <code>LENGTH</code> is equal to the number of bytes used to encode this string</li> <li><code>PAYLOAD</code> is a sequence of bytes; if a DBMS returns binary data encoded as hex, then it has to be decoded to raw bytes</li> <li><code>LENGTH</code> and <code>PAYLOAD</code> are separated with a newline character (ASCII code 10 / 0x0a)</li> </ul>"},{"location":"migrations/jid-from-mam-muc-script/#output-format","title":"Output format","text":"<p>The script output format is very similar to the input:</p> <pre><code>LENGTH\\nJID\n</code></pre> <ul> <li><code>LENGTH</code> is the number of bytes in a <code>JID</code></li> <li><code>JID</code> is a sequence of bytes, which encodes a Unicode string</li> <li><code>LENGTH</code> and <code>PAYLOAD</code> are separated with a newline character (ASCII code 10 / 0x0a)</li> </ul> <p>In case of an error (that is not a critical error, like I/O failure), script will print <code>-N\\n</code> (where <code>N</code> is an error code) and will continue to work. Technically it's <code>-N</code> for <code>LENGTH</code>, followed by a newline character and no <code>PAYLOAD</code> part (or 0-length <code>PAYLOAD</code> if you like). The following error codes are supported: * <code>-1\\n</code> - Unknown error. Something went wrong with the JID extraction (most likely malformed input). * <code>-2\\n</code> - Invalid message type. The message / stanza has been decoded successfully, but it's not a groupchat message.</p>"},{"location":"migrations/jid-from-mam-muc-script/#examples","title":"Examples","text":"<p><code>tools/migration</code> folder contains two files: <code>sender-jid-from-mam-message.example.eterm</code> and <code>sender-jid-from-mam-message.example.xml</code>. They are input samples for the script and may be used as a reference for the script usage.</p> <p>You can test them by running:</p> <ul> <li><code>tools/migration/sender-jid-from-mam-message.escript eterm &lt; sender-jid-from-mam-message.example.eterm &gt; out</code></li> <li><code>tools/migration/sender-jid-from-mam-message.escript xml &lt; sender-jid-from-mam-message.example.xml &gt; out</code></li> </ul> <p>In both cases the <code>out</code> file should have the following content:</p> <pre><code>37\ng\u017ceg\u017c\u00f3\u0142ka@brz\u0119czyszczykiewicz.pl\n</code></pre>"},{"location":"migrations/jid-from-mam-muc-script/#debug","title":"Debug","text":"<p>If an environment variable <code>DEBUG</code> is set to <code>1</code>, the script will store error messages in a <code>/tmp/script-debug</code> file.</p>"},{"location":"modules/mod_adhoc/","title":"mod_adhoc","text":""},{"location":"modules/mod_adhoc/#module-description","title":"Module Description","text":"<p>This module implements XEP-0050: Ad-Hoc Commands. It allows XMPP entities to remotely execute various commands using forms.</p>"},{"location":"modules/mod_adhoc/#options","title":"Options","text":""},{"location":"modules/mod_adhoc/#modulesmod_adhociqdisctype","title":"<code>modules.mod_adhoc.iqdisc.type</code>","text":"<ul> <li>Syntax: string, one of <code>\"one_queue\"</code>, <code>\"no_queue\"</code>, <code>\"queues\"</code>, <code>\"parallel\"</code></li> <li>Default: <code>\"one_queue\"</code></li> </ul> <p>Strategy to handle incoming stanzas. For details, please refer to IQ processing policies.</p>"},{"location":"modules/mod_adhoc/#modulesmod_adhocreport_commands_node","title":"<code>modules.mod_adhoc.report_commands_node</code>","text":"<ul> <li>Syntax: boolean</li> <li>Default: <code>false</code></li> <li>Example: <code>report_commands_node = true</code></li> </ul> <p>Determines whether the Ad-Hoc Commands should be announced upon Service Discovery.</p>"},{"location":"modules/mod_adhoc/#example-configuration","title":"Example configuration","text":"<pre><code>[modules.mod_adhoc]\n  report_commands_node = true\n</code></pre>"},{"location":"modules/mod_amp/","title":"mod_amp","text":""},{"location":"modules/mod_amp/#module-description","title":"Module Description","text":"<p>This module enables support for a subset of the functionality described under XEP-0079: Advanced Message Processing. It currently does not provide features related to timed delivery, i.e the <code>expire-at</code> condition.</p> <p>The <code>error</code> and <code>notify</code> actions are supported, while <code>alert</code> and <code>drop</code> are not. See more below, under XEP Support.</p>"},{"location":"modules/mod_amp/#options","title":"Options","text":"<p>None.</p>"},{"location":"modules/mod_amp/#example-configuration","title":"Example Configuration","text":"<pre><code>[modules.mod_amp]\n</code></pre>"},{"location":"modules/mod_amp/#xep-support","title":"XEP Support","text":"<p>What follows is a short description of which parts of the XEP-0079 specification mod_amp supports.</p> <p>2.1.1 Service Discovery</p> <ul> <li>Both the service discovery information response (Ex.1, 2) and the     request/response for individual actions and conditions (Ex.3, 4) are     supported.</li> </ul> <p>2.1.2 Specifying Semantics</p> <ul> <li>\"Per-hop\" rule semantics are not supported, i.e. ignored.</li> </ul> <p>2.2 Server Processing</p> <ul> <li>2.2.1 Validating Semantics: Performed as in the XEP. The first message to   fail validation determines the error message.</li> <li>2.2.2 supported to spec.</li> <li>2.2.3 supported to spec.</li> <li>2.2.4 supported for actions: <code>error</code> and <code>notify</code>.</li> <li>2.2.5 supported for events: <code>error</code> and <code>notify</code>.</li> </ul> <p>3.3 Defined Conditions</p> <ul> <li> <p>3.3.1 deliver: supported for values: <code>direct</code>, <code>stored</code>, and <code>none</code>. The <code>stored</code> condition works with <code>mod_mam</code> and <code>mod_offline</code>.</p> <p>Note</p> <p>If both <code>mod_mam</code> and <code>mod_offline</code> are enabled, some delivery conditions may not work correctly.</p> </li> <li> <p>3.3.2 expire-at: not supported</p> </li> <li>3.3.3 match-resource: supported</li> </ul> <p>3.4 Defined Actions</p> <ul> <li>3.4.1 alert: not supported</li> <li>3.4.2 drop: not supported</li> <li>3.4.3 error: supported</li> <li>3.4.4 notify: supported. Notifications for the <code>stored</code> and <code>direct</code> conditions are sent as soon as the message has been stored or sent to the recipient.</li> </ul> <p>6. Error Handling</p> <ul> <li>6.2.1 Unsupported Action: supported</li> <li>6.2.2 Unsupported Condition: supported</li> <li>6.2.3 Not Acceptable: supported</li> <li>6.2.4 Service Unavailable is not supported, as it pertains to \"per-hop\" rule processing</li> <li>6.2.5 Undefined Condition: supported</li> </ul> <p>8. Stream Feature</p> <ul> <li>supported</li> </ul> <p>9. Security Considerations</p> <ul> <li>Currently, the security measures described in this section have not been implemented. It follows that <code>mod_amp</code>, in its current state, should only be enabled for servers/domains where user presence leaks are not a threat, i.e services where all users can see each other's presence by default.</li> </ul>"},{"location":"modules/mod_amp/#modifications","title":"Modifications","text":"<p>The following behaviour differs from or extends the guidelines provided in the XEP.</p> <ul> <li>The action for the <code>deliver</code> condition with value <code>stored</code> is deferred until the message is stored by <code>mod_mam</code> or <code>mod_offline</code>.</li> <li>The action for the <code>deliver</code> condition with value <code>direct</code> is deferred until the message is sent to the recipient's socket.</li> </ul>"},{"location":"modules/mod_amp/#server-processing-details","title":"Server Processing Details","text":"<p>When a message with AMP rules is being processed by the server, several system events may occur. For a given event, the rules are processed and each of them can get the matched or undecided status or, if the conditions are not met, it gets no status. If any rules get the matched status, the action for the first of them is performed. After that, the rule list is filtered so that only the undecided ones are left in the message, as they may be matched later.</p> <p>The following system events are defined:</p> <ul> <li>initial check - always occurs first, when the message enters the system.</li> <li>mod_mam failed - <code>mod_mam</code> is enabled but fails to store the message.</li> <li>mod_offline failed - the recipient is offline and <code>mod_offline</code> is enabled but fails to store the message.</li> <li>archived - either <code>mod_mam</code> or <code>mod_offline</code> has successfully stored the message.</li> <li>delivery failed - the message was about to be delivered, but it could not be sent.</li> <li>delivered - the message has been sent to the recipient. Mutually exclusive with delivery failed.</li> </ul> <p>Rule status is determined for each system event in the following way:</p> <ul> <li> <p>initial check</p> <ul> <li>If the recipient is online, rules for the <code>direct</code> and <code>none</code> values of the <code>deliver</code> condition become undecided, except rules for the <code>direct</code> value with action <code>error</code> or <code>drop</code>, which become matched. If <code>mod_mam</code> is enabled, rules for the <code>stored</code> value of the <code>deliver</code> condition become undecided.<ul> <li>If the recipient has a session for the target resource, rules for the <code>exact</code> and <code>any</code> values of the <code>match-resource</code> condition become matched.</li> <li>Otherwise, rules for the <code>other</code> and <code>any</code> values of the <code>match-resource</code> condition become matched.</li> </ul> </li> <li>If the recipient is offline:<ul> <li>If <code>mod_mam</code> or <code>mod_offline</code> is enabled, rules for the <code>stored</code> and <code>none</code> values of the <code>deliver</code> conditions become undecided, except rules for the <code>stored</code> value with action <code>error</code> or <code>drop</code>, which become matched.</li> <li>If both <code>mod_mam</code> and <code>mod_offline</code> are disabled, rules for the <code>none</code> delivery condition become matched.</li> </ul> </li> </ul> </li> <li> <p>mod_mam failed</p> <ul> <li>If the recipient is online, rules for <code>direct</code> and <code>none</code> values of the <code>deliver</code> condition become undecided.</li> <li>If the recipient is offline, rules for the <code>none</code> value of the <code>deliver</code> condition become matched.</li> </ul> </li> <li> <p>mod_offline failed</p> <ul> <li>Rules for the <code>none</code> value of the <code>deliver</code> condition become matched.</li> </ul> </li> <li> <p>archived</p> <ul> <li>If the recipient is online, rules for <code>direct</code> and <code>stored</code> values of the <code>deliver</code> condition become undecided.</li> <li>If the recipient is offline, rules for the <code>stored</code> value of the <code>deliver</code> condition become matched.</li> </ul> </li> <li> <p>delivery failed</p> <ul> <li>Rules for the <code>none</code> and <code>stored</code> value of the <code>deliver</code> condition become matched.</li> </ul> </li> <li> <p>delivered</p> <ul> <li>Rules for the <code>direct</code> value of the <code>deliver</code> condition become matched.</li> </ul> </li> </ul>"},{"location":"modules/mod_auth_token/","title":"mod_auth_token","text":""},{"location":"modules/mod_auth_token/#module-description","title":"Module Description","text":"<p>This module implements handling of tokens in an OAuth-like authentication scheme.  It provides services necessary to:</p> <ul> <li>deserialize/serialize binary tokens received and issued by the server,</li> <li>validate incoming binary tokens, i.e.:<ul> <li>check integrity using Message Authentication Codes (MAC) with server-side stored user keys,</li> <li>check validity against the configured validity duration times,</li> <li>check revocation status,</li> </ul> </li> <li>handle token requests from logged in users.</li> </ul> <p>The module itself does not implement protocol related details - these are implemented in <code>cyrsasl.erl</code>. Generation of keys necessary to sign binary tokens is delegated to module <code>mod_keystore.erl</code>.</p>"},{"location":"modules/mod_auth_token/#options","title":"Options","text":""},{"location":"modules/mod_auth_token/#modulesmod_auth_tokenbackend","title":"<code>modules.mod_auth_token.backend</code>","text":"<ul> <li>Syntax: non-empty string</li> <li>Default: <code>\"rdbms\"</code></li> <li>Example: <code>backend = \"rdbms\"</code></li> </ul> <p>Token storage backend. Currently only <code>\"rdbms\"</code> is supported.</p>"},{"location":"modules/mod_auth_token/#modulesmod_auth_tokeniqdisctype","title":"<code>modules.mod_auth_token.iqdisc.type</code>","text":"<ul> <li>Syntax: string, one of <code>\"one_queue\"</code>, <code>\"no_queue\"</code>, <code>\"queues\"</code>, <code>\"parallel\"</code></li> <li>Default: <code>\"no_queue\"</code></li> </ul> <p>Strategy to handle incoming IQ stanzas. For details, please refer to IQ processing policies.</p>"},{"location":"modules/mod_auth_token/#modulesmod_auth_tokenvalidity_period","title":"<code>modules.mod_auth_token.validity_period</code>","text":"<ul> <li>Syntax: TOML table. Each key is either <code>access</code> or <code>refresh</code>. Each value is a nested TOML table with the following mandatory keys: <code>value</code> (non-negative integer) and <code>unit</code> (<code>\"days\"</code>, <code>\"hours\"</code>, <code>\"minutes\"</code> or <code>\"seconds\"</code>).</li> <li>Default: <code>{access = {value = 1, unit = \"hours\"}, refresh = {value = 25, unit = \"days\"}}</code></li> <li>Example: <code>validity_period.access = {value = 30, unit = \"minutes\"}</code></li> </ul> <p>Validity periods of access and refresh tokens can be defined independently - specifying one of them does not change the default value for the other one. Validity period configuration for provision tokens happens outside the module since the server does not generate provision tokens - it only validates them.</p>"},{"location":"modules/mod_auth_token/#required-keys","title":"Required keys","text":"<p>To read more about the keys MongooseIM makes use of, please refer to mod_keystore documentation.</p>"},{"location":"modules/mod_auth_token/#token-types","title":"Token types","text":"<p>Three token types are supported:</p> <ul> <li> <p>access tokens: These are short lived tokens which grants aren't tracked by the server (i.e. there's no need to store anything in a database).   Access tokens can be used as a payload for the X-OAUTH authentication mechanism and grant access to the system.   Access tokens can't be revoked.   An access token is valid only until its expiry date is reached.</p> </li> <li> <p>refresh tokens: These are longer lived tokens which are tracked by the server and therefore require persistent storage in a relational database.   Refresh tokens can be used as a payload for the X-OAUTH authentication mechanism and to grant access to the system.   Also they can result in a new set of tokens being returned upon successful authentication.   They can be revoked - if a refresh token hasn't been revoked, it is valid until it has expired.   On revocation, it immediately becomes invalid.   As the server stores information about granted tokens, it can also persistently mark them as revoked.</p> </li> <li> <p>provision tokens: These tokens are generated by a service external to the server.     They grant the owner a permission to create an account.   A provision token may contain information which the server can use to provision the VCard for the newly created account.   Using a provision token to create an account (and inject VCard data) is done similarly to other token types, i.e. by passing it as payload for the X-OAUTH mechanism.   The XMPP server has no way of tracking and revoking provision tokens, as they come from an outside source.</p> </li> </ul>"},{"location":"modules/mod_auth_token/#token-serialization-format","title":"Token serialization format","text":"<p>All tokens (access, refresh, provision) are to be exchanged as Base64 encoded binary data. Serialization format of the token before encoding with Base64 is dependent on its type:</p> <pre><code>'access' \\0 &lt;BARE_JID&gt; \\0 &lt;EXPIRES_AT&gt; \\0 &lt;MAC&gt;\n\n'refresh' \\0 &lt;BARE_JID&gt; \\0 &lt;EXPIRES_AT&gt; \\0 &lt;SEQUENCE_NO&gt; \\0 &lt;MAC&gt;\n\n'provision' \\0 &lt;BARE_JID&gt; \\0 &lt;EXPIRES_AT&gt; \\0 &lt;VCARD&gt; \\0 &lt;MAC&gt;\n</code></pre> <p>For example (these tokens are randomly generated, hence field values don't make much sense - line breaks are inserted only for the sake of formatting,<code>&lt;vCard/&gt;</code> inner XML is snipped):</p> <pre><code>'access' \\0 Q8@localhost \\0 64875466454\n    \\0 0acd0a66d06934791d046060cf9f1ad3c2abb3274cc7e7d7b2bc7e2ac4453ed774b6c6813b40ebec2bbc3774d59d4087\n\n'refresh' \\0 qp@localhost \\0 64875466457 \\0 6\n    \\0 8f57cb019cd6dc6e7779be165b9558611baf71ee4a40d03e77b78b069f482f96c9d23b1ac1ef69f64c1a1db3d36a96ad\n\n'provision' \\0 Xmi4@localhost \\0 64875466458 \\0 &lt;vCard&gt;...&lt;/vCard&gt;\n    \\0 86cd344c98b345390c1961e12cd4005659b4b0b3c7ec475bde9acc9d47eec27e8ddc67003696af582747fb52e578a715\n</code></pre>"},{"location":"modules/mod_auth_token/#requesting-access-or-refresh-tokens-when-logged-in","title":"Requesting access or refresh tokens when logged in","text":"<pre><code>&lt;iq type='get' to='john@localhost' id='123'&gt;\n    &lt;query xmlns='erlang-solutions.com:xmpp:token-auth:0'/&gt;\n&lt;/iq&gt;\n</code></pre> <p>To request access and refresh tokens for the first time a client should send an IQ stanza after they have successfully authenticated for the first time using some other method.</p>"},{"location":"modules/mod_auth_token/#token-response-format","title":"Token response format","text":"<p>Requested tokens are being returned by the server wrapped in IQ stanza with the following fields:</p> <ul> <li><code>id</code>: value taken from the request IQ stanza</li> <li><code>type</code>: result</li> <li><code>from</code>: bare user JID</li> <li><code>to</code>: full user JID</li> </ul> <p>Example response (encoded tokens have been truncated in this example):</p> <pre><code>&lt;iq  id='123' type='result' from='john@localhost' to='john@localhost/res1'&gt;\n    &lt;items xmlns='erlang-solutions.com:xmpp:token-auth:0'&gt;\n        &lt;access_token&gt;cmVmcmVzaAGQ1Mzk1MmZlYzhkYjhlOTQzM2UxMw==&lt;/access_token&gt;\n        &lt;refresh_token&gt;cmVmcmVzaAGQ1Mzk1MmZlYzhkYjhlOTQzM2UxMw==&lt;/refresh_token&gt;\n    &lt;/items&gt;\n&lt;/iq&gt;\n</code></pre> <p>Once a client has obtained a token, they may start authenticating using the <code>X-OAUTH</code> SASL mechanism when reaching the authentication phase of an XMPP connection initiation.</p>"},{"location":"modules/mod_auth_token/#login-with-access-or-refresh-token","title":"Login with access or refresh token","text":"<p>In order to log into the XMPP server using a previously requested token, a client should send the following stanza:</p> <pre><code>&lt;auth xmlns=\"urn:ietf:params:xml:ns:xmpp-sasl\" mechanism=\"X-OAUTH\"&gt;\ncmVmcmVzaAGQ1Mzk1MmZlYzhkYjhlOTQzM2UxMw== \n&lt;/auth&gt;\n</code></pre> <p>The Base64 encoded content is a token obtained prior to authentication. Authentication will succeed unless the used tokens are expired, revoked, or the keys required for MAC verification could not be found by the server.</p> <p>When using a refresh token to authenticate with the server, the server will respond with a new access token:</p> <pre><code>&lt;success xmlns=\"urn:ietf:params:xml:ns:xmpp-sasl\"&gt;\ncmVmcmVzaAGQ1Mzk1MmZlYzhkYjhlOTQzM2UxMw==\n&lt;/success&gt;\n</code></pre> <p>The above response is to be expected unless the refresh token used is expired or there were some problems processing the key on the server side.</p>"},{"location":"modules/mod_auth_token/#token-revocation-using-command-line-tool","title":"Token revocation using command line tool","text":"<p>Refresh tokens issued by the server can be used to:</p> <ul> <li>log in a user: as an authentication valet,</li> <li>request a new access token with refreshed expiry date.</li> </ul> <p>An administrator may revoke a refresh token:</p> <pre><code>mongooseimctl token revokeToken --user owner@xmpphost\n</code></pre> <p>A client can no longer use a revoked token either for authentication or requesting new access tokens. After a client's token has been revoked, in order to obtain a new refresh token a client has to log in using some other method.</p> <p>Caveat: as of now, the user's session is not terminated automatically on token revocation. Therefore, the user might request a new set of tokens for as long as the session is active, even though their previous token was just revoked (possibly due to a breach / token leak). Moreover, an access token still kept on a compromised device can be used to establish a new session for as long as it's valid - access tokens can't be revoked. To alleviate rerequesting tokens by the user, an operator can use <code>mod_admin</code> extension allowing to terminate the user's connection. Access token validity can't be sidestepped right now.</p>"},{"location":"modules/mod_auth_token/#example-configuration","title":"Example configuration","text":"<pre><code>[modules.mod_auth_token]\n  validity_period.access = {value = 13, unit = \"minutes\"}\n  validity_period.refresh = {value = 13, unit = \"days\"}\n</code></pre>"},{"location":"modules/mod_bind2/","title":"mod_bind2","text":""},{"location":"modules/mod_bind2/#module-description","title":"Module Description","text":"<p>Implements XEP-0386: Bind 2.</p>"},{"location":"modules/mod_blocking/","title":"mod_blocking","text":""},{"location":"modules/mod_blocking/#module-description","title":"Module Description","text":"<p>This module implements XEP-0191: Blocking command. The extension allows blocking the whole communication with a user (or a group of users) with a single command.  The protocol is much simpler than privacy lists.</p>"},{"location":"modules/mod_blocking/#options","title":"Options","text":"<p>None.</p>"},{"location":"modules/mod_blocking/#example-configuration","title":"Example Configuration","text":"<pre><code>[modules.mod_blocking]\n</code></pre> <p>The module is not configurable because internally it is an interface to privacy lists, so settings like storage backend apply to it automatically.</p> <p>Issuing a blocking command creates a privacy list named \"blocking\" (if it didn't exist), adds to it items being blocked and sets this list as the default. Unblocking contacts removes them from \"blocking\" privacy list.</p> <p>If the user has other online resources which use privacy lists it may result in a different behaviour per resource; this is normal, and provided for in XEP.</p> <p>Similar to privacy lists, a blocked contact sees the user as offline no matter what their real status is.</p> <p>If the contact being blocked is subscribed to the user's presence, they receive an \"unavailable\" presence; when unblocked, they receive the current status of the user.</p>"},{"location":"modules/mod_bosh/","title":"mod_bosh","text":""},{"location":"modules/mod_bosh/#module-description","title":"Module Description","text":"<p>This module implements XEP-0206: XMPP Over BOSH (using XEP-0124: Bidirectional-streams Over Synchronous HTTP (BOSH)),  allowing clients to connect to MongooseIM over regular HTTP long-lived connections.</p> <p>If you want to use BOSH, you must enable it both in the <code>listen</code> section of  <code>mongooseim.toml</code> (Listener Modules)  and as a module.</p>"},{"location":"modules/mod_bosh/#options","title":"Options","text":""},{"location":"modules/mod_bosh/#modulesmod_boshbackend","title":"<code>modules.mod_bosh.backend</code>","text":"<ul> <li>Syntax: string: <code>\"mnesia\"</code> or <code>\"cets\"</code></li> <li>Default: <code>\"mnesia\"</code></li> <li>Example: <code>backend = \"mnesia\"</code></li> </ul> <p>Backend to use for storing BOSH connections.</p> <p>Warning</p> <p>The corresponding internal database has to be enabled.</p>"},{"location":"modules/mod_bosh/#modulesmod_boshinactivity","title":"<code>modules.mod_bosh.inactivity</code>","text":"<ul> <li>Syntax: positive integer or the string <code>\"infinity\"</code></li> <li>Default: <code>30</code></li> <li>Example: <code>inactivity = 30</code></li> </ul> <p>Maximum allowed inactivity time (in seconds) for a BOSH connection. Please note that a long-polling request is not considered to be an inactivity.</p>"},{"location":"modules/mod_bosh/#modulesmod_boshmax_wait","title":"<code>modules.mod_bosh.max_wait</code>","text":"<ul> <li>Syntax: positive integer or the string <code>\"infinity\"</code></li> <li>Default: <code>\"infinity\"</code></li> <li>Example: <code>max_wait = 30</code></li> </ul> <p>This is the longest time (in seconds) that the connection manager will wait before responding to any request during the session.</p>"},{"location":"modules/mod_bosh/#modulesmod_boshserver_acks","title":"<code>modules.mod_bosh.server_acks</code>","text":"<ul> <li>Syntax: boolean</li> <li>Default: <code>false</code></li> <li>Example: <code>server_acks = true</code></li> </ul> <p>Enables/disables acks sent by server.</p>"},{"location":"modules/mod_bosh/#modulesmod_boshmax_pause","title":"<code>modules.mod_bosh.max_pause</code>","text":"<ul> <li>Syntax: positive integer</li> <li>Default: <code>120</code></li> <li>Example: <code>max_pause = 30</code></li> </ul> <p>Maximum allowed pause in seconds (e.g. to switch between pages and then resume connection) to request by client-side.</p>"},{"location":"modules/mod_bosh/#example-configuration","title":"Example Configuration","text":"<p>In the listener section: <pre><code>[[listen.http]]\n  port = 5280\n  transport.num_acceptors = 10\n  transport.max_connections = 1024\n\n  [[listen.http.handlers.mod_bosh]]\n    host = \"_\"\n    path = \"/http-bind\"\n</code></pre></p> <p>In the module section:</p> <pre><code>[modules.mod_bosh]\n  inactivity = 20\n  max_wait = \"infinity\"\n  server_acks = true\n  max_pause = 120\n</code></pre>"},{"location":"modules/mod_cache_users/","title":"mod_cache_users","text":""},{"location":"modules/mod_cache_users/#module-description","title":"Module Description","text":"<p><code>mod_cache_users</code> is a module that caches whether a user exists, and possibly stores metadata assigned to them. This is useful for example to decide if a message should be stored in MAM or Inbox \u2014 for example, the receiver might not exist, so no message should be stored in his archive nor his inbox.</p> <p>This cache uses segmented cache under the hood, for more details, read the library documentation.</p>"},{"location":"modules/mod_cache_users/#options","title":"Options","text":""},{"location":"modules/mod_cache_users/#modulesmod_cache_usersstrategy","title":"<code>modules.mod_cache_users.strategy</code>","text":"<ul> <li>Syntax: string, one of <code>fifo</code> or <code>lru</code></li> <li>Default: <code>fifo</code></li> <li>Example: <code>strategy = \"lru\"</code></li> </ul> <p>Eviction strategy for the cache. FIFO is simply a queue, that ensures records will eventually be evicted and require reloading; LRU ensures queried records keep moving to the front of the queue, possibly keeping them alive forever.</p>"},{"location":"modules/mod_cache_users/#modulesmod_cache_userstime_to_live","title":"<code>modules.mod_cache_users.time_to_live</code>","text":"<ul> <li>Syntax: integer, in minutes, or the string <code>\"infinity\"</code></li> <li>Default: <code>8 * 60</code> (8h)</li> <li>Example: <code>time_to_live = 480</code></li> </ul> <p>Time between rotations, that is, the time a single table will live. A record that is inserted in the first table will live as long as this ttl multiplied by the number of tables.</p>"},{"location":"modules/mod_cache_users/#modulesmod_cache_usersnumber_of_segments","title":"<code>modules.mod_cache_users.number_of_segments</code>","text":"<ul> <li>Syntax: integer</li> <li>Default: <code>3</code></li> <li>Example: <code>number_of_segments = 3</code></li> </ul> <p>Number of segments the cache has. The more segments there are, the more fine-grained the cache can be, but the slower queries will be: query the cache checks the tables in order until a match is found.</p>"},{"location":"modules/mod_cache_users/#example-configuration","title":"Example configuration","text":"<pre><code>[modules.mod_cache_users]\n  strategy = \"lru\"\n  time_to_live = 60\n  number_of_segments = 1\n</code></pre>"},{"location":"modules/mod_caps/","title":"mod_caps","text":""},{"location":"modules/mod_caps/#module-description","title":"Module description","text":"<p>This module provides a presence-based mechanism for exchanging information about entity capabilities as defined in XEP-0115: Entity Capabilities. Additionally, it filters out PEP messages that the recipient declared (in announced caps) being not capable of handling. It is not this module's responsibility to intercept and answer disco requests routed between clients.</p>"},{"location":"modules/mod_caps/#options","title":"Options","text":"<p>This module expects two optional arguments that apply to cache tab:</p>"},{"location":"modules/mod_caps/#modulesmod_capscache_size","title":"<code>modules.mod_caps.cache_size</code>","text":"<ul> <li>Syntax: positive integer</li> <li>Default: <code>1000</code></li> <li>Example: <code>cache_size = 2000</code></li> </ul> <p>The size of a cache_tab (the amount of entries) holding the information about capabilities of each user. </p>"},{"location":"modules/mod_caps/#modulesmod_capscache_life_time","title":"<code>modules.mod_caps.cache_life_time</code>","text":"<ul> <li>Syntax: positive integer</li> <li>Default: <code>86_400</code> (24 hours)</li> <li>Example: <code>cache_life_time = 10_000</code></li> </ul> <p>Time (in seconds) after which entries will be removed.</p>"},{"location":"modules/mod_caps/#modulesmod_capsbackend","title":"<code>modules.mod_caps.backend</code>","text":"<ul> <li>Syntax: string, one of <code>\"mnesia\"</code>, <code>\"rdbms\"</code>.</li> <li>Default: \"mnesia\"</li> <li>Example: <code>backend = \"mnesia\"</code></li> </ul>"},{"location":"modules/mod_caps/#example-configuration","title":"Example Configuration","text":"<pre><code>[modules.mod_caps]\n  cache_size = 2000\n  cache_life_time = 10_000\n</code></pre>"},{"location":"modules/mod_carboncopy/","title":"mod_carboncopy","text":""},{"location":"modules/mod_carboncopy/#module-description","title":"Module Description","text":""},{"location":"modules/mod_carboncopy/#discovering-support","title":"Discovering Support","text":"<p>The server uses a disco query to inform if carbons are enabled.</p>"},{"location":"modules/mod_carboncopy/#enabling-and-disabling-carbons-from-the-client","title":"Enabling and disabling Carbons from the client","text":"<p>Carbons are not enabled by default.  Every client app has to enable carbons to get messages sent to other clients of the user.  Carbons are enabled and disabled with an iq stanza with a child element -  <code>&lt;enable xmlns='urn:xmpp:carbons:2'/&gt;</code> or <code>&lt;disable xmlns='urn:xmpp:carbons:2'/&gt;</code>.</p>"},{"location":"modules/mod_carboncopy/#receiving-messages-to-a-bare-jid","title":"Receiving messages to a bare JID","text":"<p>Each message to a bare JID is forked and sent to all carbon enabled resources of the recipient, and not just to the highest priority resource.  Sending multiple copies to same resource is avoided.</p>"},{"location":"modules/mod_carboncopy/#receiving-messages-to-full-jid","title":"Receiving messages to full JID","text":"<p>Each directed message to a full JID is also forwarded to all carbon enabled resources of the recipient.  The message is wrapped in the <code>&lt;forwarded xmlns='urn:xmpp:forward:0'&gt;&lt;/forwarded&gt;</code> tag and directed towards each carbon enabled resource.</p>"},{"location":"modules/mod_carboncopy/#sending-messages","title":"Sending Messages","text":"<p>Just as when receiving messages to a full JID, each sent message is forwarded to all carbon enabled resources of recipient. The message is wrapped in the <code>&lt;forwarded xmlns='urn:xmpp:forward:0'&gt;&lt;/forwarded&gt;</code> tag and is directed towards each carbon enabled resource.</p>"},{"location":"modules/mod_carboncopy/#private-messages","title":"Private Messages","text":"<p>Private messages are tagged <code>&lt;private/&gt;</code> and are not forwarded to any carbon enabled resource of the sender and recipient if the <code>to</code> attribute contains a full JID.  However, if the message is sent to a bare JID, it is forked to all highest priority resources.  This is not done through <code>mod_carboncopy</code> but is an expected outcome.</p>"},{"location":"modules/mod_carboncopy/#multiple-enabledisable-requests","title":"Multiple enable/disable requests","text":"<p>Multiple enable/disable requests are not treated as an error even if they come from the same resource.</p>"},{"location":"modules/mod_carboncopy/#behavior-with-other-modules","title":"Behavior with other modules","text":"<ul> <li>mod_offline: Offline messages are delivered as they are.     Since, only one resource can connect at a time and there will be a finite time delay between login from two resources, <code>mod_carboncopy</code> has no role to play and only one resource can receive offline messages.     Other resources can retrieve old messages from the archive.</li> <li>mod_mam: <code>mod_mam</code> covers only direct messages from one user to another.    All the forked messages for a message sent with a bare JID are ignored by <code>mod_mam</code>.    Similarly, all the carbon messages are also ignored by <code>mod_mam</code>.</li> </ul>"},{"location":"modules/mod_carboncopy/#retrieving-archive-from-multiple-resources","title":"Retrieving archive from multiple resources","text":"<p>A resource can retrieve archives of messages sent to a specific resource of a friend which will not contain any carbon messages.  It will only contain messages directed towards that resource or messages sent with a bare jid when that resource was at the highest priority. A request to <code>mod_mam</code> with a bare JID of the chosen user will retrieve all messages to them from any resource.  There are no instances of copies of same messages being sent by <code>mod_mam</code>.  This is because <code>mod_mam</code> does not archive carbon messages.</p>"},{"location":"modules/mod_carboncopy/#testing-with-a-client","title":"Testing with a client","text":"<p>The module and its behavior have been tested with <code>mod_offline</code> and <code>mod_mam</code> using a desktop client made in Java using the Smack library.  The standard Smack library for carbons is able to unpack and read the carbon messages.  Also, the standard library supports checking for carbon support by the server using disco and sending enable and disable requests for carbon messages. A client needs to synchronize with <code>mod_offline</code> and <code>mod_mam</code>.  Once a client is online and enables carbons, it will not receive all the messages.  <code>mod_mam</code> does not capture any carbon messages so it does not send any duplicates during any archive request.  Only the simple chat messages are archived and they can be accessed by using the bare JID of the user for whom the archive is requested. For an Erlang-based test suite, please see this.</p>"},{"location":"modules/mod_carboncopy/#options","title":"Options","text":""},{"location":"modules/mod_carboncopy/#modulesmod_carboncopyiqdisctype","title":"<code>modules.mod_carboncopy.iqdisc.type</code>","text":"<ul> <li>Syntax: string, one of <code>\"one_queue\"</code>, <code>\"no_queue\"</code>, <code>\"queues\"</code>, <code>\"parallel\"</code></li> <li>Default: <code>no_queue</code></li> </ul> <p>Strategy to handle incoming stanzas. For details, please refer to IQ processing policies.</p>"},{"location":"modules/mod_carboncopy/#example-configuration","title":"Example Configuration","text":"<pre><code>[modules.mod_carboncopy]\n  iqdisc.type = \"no_queue\"\n</code></pre>"},{"location":"modules/mod_csi/","title":"mod_csi","text":""},{"location":"modules/mod_csi/#module-description","title":"Module Description","text":"<p>Enables XEP-0352: Client State Indication functionality.</p> <p>The XEP doesn't require any specific server behaviour in response to CSI stanzas, there are only some suggestions. The implementation in MongooseIM will simply buffer all packets (up to a configured limit) when the session is \"inactive\" and will flush the buffer when it becomes \"active\" again.</p>"},{"location":"modules/mod_csi/#options","title":"Options","text":""},{"location":"modules/mod_csi/#modulesmod_csibuffer_max","title":"<code>modules.mod_csi.buffer_max</code>","text":"<ul> <li>Syntax: non-negative integer or the string <code>\"infinity\"</code></li> <li>Default: <code>20</code></li> <li>Example: <code>buffer_max = 40</code></li> </ul> <p>Buffer size for messages queued when session was <code>inactive</code>.</p>"},{"location":"modules/mod_csi/#example-configuration","title":"Example Configuration","text":"<pre><code>[modules.mod_csi]\n  buffer_max = 40\n</code></pre>"},{"location":"modules/mod_csi/#metrics","title":"Metrics","text":"<p>If you'd like to learn more about metrics in MongooseIM, please visit MongooseIM metrics page.</p> Name Type Description (when it gets incremented) <code>[Host, modCSIInactive]</code> spiral A client becomes inactive. <code>[Host, modCSIActive]</code> spiral A client becomes active."},{"location":"modules/mod_disco/","title":"mod_disco","text":""},{"location":"modules/mod_disco/#module-description","title":"Module Description","text":"<p>Implements XEP-0030: Service Discovery. The module itself provides only the essential disco interface, the actual capabilities announced by Service Discovery are gathered via executing a fold-type hook.</p>"},{"location":"modules/mod_disco/#options","title":"Options","text":""},{"location":"modules/mod_disco/#modulesmod_discoiqdisctype","title":"<code>modules.mod_disco.iqdisc.type</code>","text":"<ul> <li>Syntax: string, one of <code>\"one_queue\"</code>, <code>\"no_queue\"</code>, <code>\"queues\"</code>, <code>\"parallel\"</code></li> <li>Default: <code>\"one_queue\"</code></li> </ul> <p>Strategy to handle incoming stanzas. For details, please refer to IQ processing policies.</p>"},{"location":"modules/mod_disco/#modulesmod_discoextra_domains","title":"<code>modules.mod_disco.extra_domains</code>","text":"<ul> <li>Syntax: array of strings, valid domain names</li> <li>Default: no extra domains</li> <li>Example: <code>extra_domains = [\"custom_domain\"]</code></li> </ul> <p>Adds domains that are not registered with other means to a local item announcement (response to <code>http://jabber.org/protocol/disco#items</code> IQ get). Please note that <code>mod_disco</code> doesn't verify these domains, so if no handlers are registered later for them, a client will receive a <code>service-unavailable</code> error for every stanza sent to one of these hosts.</p>"},{"location":"modules/mod_disco/#modulesmod_discoserver_info","title":"<code>modules.mod_disco.server_info</code>","text":"<ul> <li>Syntax: array of tables described below</li> <li>Default: no additional server info</li> <li>Example: <pre><code>server_info = [\n                {name = \"abuse-address\", urls = [\"admin@example.com\"]}\n              ]\n</code></pre> Adds extra disco information to all or chosen modules. New fields will be added in a manner compliant with XEP-0157: Contact Addresses for XMPP Services.</li> </ul> <p>Keys and their values for each entry:</p> <ul> <li><code>name</code> - required, a non-empty string with the name of the field</li> <li><code>urls</code> - required, an array of valid addresses</li> <li><code>modules</code> - optional, an array of module names for which the additional server information is to be returned. By default the server information is returned for all modules.</li> </ul>"},{"location":"modules/mod_disco/#modulesmod_discousers_can_see_hidden_services","title":"<code>modules.mod_disco.users_can_see_hidden_services</code>","text":"<ul> <li>Syntax: boolean</li> <li>Default: <code>true</code></li> <li>Example: <code>users_can_see_hidden_services = false</code></li> </ul> <p>MongooseIM node with this option set to <code>false</code> will exclude \"hidden components\" from disco results sent to clients (identified by bare or full JID). Other entities, with empty username part in their JIDs (e.g. <code>component.example.com</code>), will still receive full disco results.</p>"},{"location":"modules/mod_disco/#example-configuration","title":"Example Configuration","text":"<pre><code>[modules.mod_disco]\n  iqdisc.type = \"one_queue\"\n  extra_domains = [\"some_domain\", \"another_domain\"]\n  server_info = [\n    {name = \"abuse-address\", urls = [\"admin@example.com\"]},\n    {name = \"friendly-spirits\", urls = [\"spirit1@localhost\", \"spirit2@localhost\"], modules = [\"mod_muc\", \"mod_disco\"]}\n  ]\n  users_can_see_hidden_services = true\n</code></pre>"},{"location":"modules/mod_domain_isolation/","title":"mod_domain_isolation","text":""},{"location":"modules/mod_domain_isolation/#module-description","title":"Module Description","text":"<p>This module limits message passing between domains. When it is enabled, users won't be able to contact each other if they are registered in different domains.</p>"},{"location":"modules/mod_domain_isolation/#options","title":"Options","text":"<p>This module has no configuration. Putting the following entry in the config file is enough.</p>"},{"location":"modules/mod_domain_isolation/#example-configuration","title":"Example configuration","text":"<pre><code>[modules.mod_domain_isolation]\n</code></pre>"},{"location":"modules/mod_event_pusher/","title":"mod_event_pusher","text":""},{"location":"modules/mod_event_pusher/#module-description","title":"Module Description","text":"<p>This module is a generic interface for event-pushing backends. It defines a single callback, <code>push_event/2</code> that forwards the event to all registered backends. Each backend decides how and if to handle the event in its <code>push_event/2</code> implementation.</p> <p>Currently supported backends include http, push, rabbit and sns. Refer to their specific documentation to learn more about their functions and configuration options.</p>"},{"location":"modules/mod_event_pusher/#how-it-works","title":"How it works","text":"<p>The events are standardized as records that can be found in the <code>mod_event_pusher_events.hrl</code> file. Common events like user presence changes (offline and online), chat and groupchat messages (incoming and outgoing) are already handled in the <code>mod_event_pusher_hook_translator</code> module, which is a proxy between various hooks and the <code>push_event/2</code> handler.</p> <p>Warning</p> <p>This module does not support dynamic domains.</p>"},{"location":"modules/mod_event_pusher/#configuration","title":"Configuration","text":"<p>Each backend is configured in a corresponding subsection. The example below enables all backends. The <code>[modules.mod_event_pusher]</code> section itself is omitted - this is allowed in TOML, because the presence of a subsection implies that the corresponding parent section is also present.</p> <p>Note</p> <p>Some backends require configuring connection pools in the <code>outgoing_pools</code> section. See the detailed documentation for each backend.</p> <pre><code>[modules.mod_event_pusher.sns]\n  presence_updates_topic = \"user_presence_updated\"\n  pm_messages_topic = \"user_message_sent\"\n  muc_messages_topic = \"user_messagegroup_sent\"\n  sns_host = \"eu-west-1.amazonaws.com\"\n  region = \"eu-west-1\"\n  access_key_id = \"AKIAIOSFODNN7EXAMPLE\"\n  secret_access_key = \"wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\"\n  account_id = \"123456789012\"\n\n[modules.mod_event_pusher.push]\n  wpool.workers = 200\n\n[modules.mod_event_pusher.http]\n  handlers = [{path = \"/notifications\"}]\n\n[modules.mod_event_pusher.rabbit]\n</code></pre>"},{"location":"modules/mod_event_pusher_http/","title":"HTTP backend","text":""},{"location":"modules/mod_event_pusher_http/#module-description","title":"Module description","text":"<p>This module is a backend of mod_event_pusher that enables forwarding certain events (messages, presence, etc.) via HTTP to external services such as push (by mobile, email or SMS), big data, or analytics services.</p>"},{"location":"modules/mod_event_pusher_http/#how-it-works","title":"How it works","text":"<p>The module hooks on all packets sent by connected users. When the hook is triggered, the module:</p> <ul> <li>runs a callback module's <code>should_make_req/6</code> function to see if a notification should be sent</li> <li>runs a callback module's <code>prepare_headers/7</code> to get http headers to be used</li> <li>runs a callback module's <code>prepare_body/7</code></li> <li>sends a POST request composed of <code>{Host::binary(), Sender::binary(), Receiver::binary(), Message::binary()}</code> to the http notification server</li> </ul> <p>You can configure multiple handlers e.g. for sending various types of messages to different HTTP servers.</p>"},{"location":"modules/mod_event_pusher_http/#prerequisites","title":"Prerequisites","text":"<p>This module uses a connection pool created by <code>mongoose_http_client</code>. It must be defined in the <code>outgoing_pools</code> settings.</p>"},{"location":"modules/mod_event_pusher_http/#options","title":"Options","text":""},{"location":"modules/mod_event_pusher_http/#modulesmod_event_pusherhttphandlers","title":"<code>modules.mod_event_pusher.http.handlers</code>","text":"<ul> <li>Syntax: array of TOML tables with the keys described below</li> <li>Default: empty list</li> </ul> <p>A list of handler definitions. All handlers are applied for each event.</p>"},{"location":"modules/mod_event_pusher_http/#modulesmod_event_pusherhttphandlerspool_name","title":"<code>modules.mod_event_pusher.http.handlers.pool_name</code>","text":"<ul> <li>Syntax: non-empty string</li> <li>Default: <code>\"http_pool\"</code></li> <li>Example: <code>pool_name = \"http_pool\"</code></li> </ul> <p>Name of the pool to use to connect to the HTTP server (as defined in <code>outgoing_pools</code>).</p>"},{"location":"modules/mod_event_pusher_http/#modulesmod_event_pusherhttphandlerspath","title":"<code>modules.mod_event_pusher.http.handlers.path</code>","text":"<ul> <li>Syntax: string</li> <li>Default: <code>\"\"</code></li> <li>Example: <code>path = \"/notifications\"</code></li> </ul> <p>Path part of an URL to which a request should be sent (will be appended to the pool's prefix path).</p>"},{"location":"modules/mod_event_pusher_http/#modulesmod_event_pusherhttphandlerscallback_module","title":"<code>modules.mod_event_pusher.http.handlers.callback_module</code>","text":"<ul> <li>Syntax: string</li> <li>Default: <code>\"mod_event_pusher_http_defaults\"</code></li> <li>Example: <code>callback_module = \"mod_event_pusher_http_notifications\"</code></li> </ul> <p>Name of a module which should be used to check whether a notification should be sent. The default callback module, <code>mod_event_pusher_http_defaults</code>, sends notifications for all non-empty chat messages. You can use this module as a starting point for developing a custom one.</p>"},{"location":"modules/mod_event_pusher_http/#example-configuration","title":"Example configuration","text":"<pre><code>[outgoing_pools.http.http_pool]\n  scope = \"global\"\n  workers = 50\n\n  [outgoing_pools.http.http_pool.connection]\n    host = \"http://localhost:8000\"\n    path_prefix = \"/webservice\"\n    request_timeout = 2000\n\n[modules.mod_event_pusher.http]\n  handlers = [{pool_name = \"http_pool\", path = \"/notifications\"}]\n</code></pre> <p>Notifications will be POSTed to <code>http://localhost:8000/webservice/notifications</code>. TOML also allows to specify the handler in its own subsection.</p> <pre><code>[[modules.mod_event_pusher.http.handlers]]\n  pool_name = \"http_pool\"\n  path = \"/notifications\"\n</code></pre> <p>This alternative syntax is useful for specifying multiple handlers with options:</p> <pre><code>[[modules.mod_event_pusher.http.handlers]]\n  pool_name = \"http_pool\"\n  path = \"/notifications\"\n  callback_module = \"mod_event_pusher_http_notifications\"\n\n[[modules.mod_event_pusher.http.handlers]]\n  pool_name = \"http_pool\"\n  path = \"/alerts\"\n  callback_module = \"mod_event_pusher_http_alerts\"\n</code></pre> <p>Here, some notifications will be POSTed to <code>http://localhost:8000/webservice/notifications</code> and some to <code>http://localhost:8000/webservice/alerts</code>, depending on implementation of <code>should_make_req/6</code> in the two callback modules.</p>"},{"location":"modules/mod_event_pusher_http/#default-payload-format","title":"Default payload format","text":"<p>The default HTTP event pusher sends a POST request with Content-Type <code>application/x-www-form-urlencoded</code>. The form has the following fields:</p> <ul> <li><code>author</code>: name of the user who authored the message</li> <li><code>server</code>: name of the server from where the message originates</li> <li><code>receiver</code>: name of the user who the message is for</li> <li><code>message</code>: content of <code>&lt;body&gt;</code> element of the message</li> </ul> <p>The contents of the author, server and receiver fields are processed by <code>stringprep</code>. As a result, these values are all lower case.</p>"},{"location":"modules/mod_event_pusher_http/#example","title":"Example","text":"<p>Below is an example of what the body of an HTTP POST request can look like: <pre><code>\"author=alice&amp;server=localhost&amp;receiver=bob&amp;message=Hi, Bob!\"\n</code></pre></p>"},{"location":"modules/mod_event_pusher_http/#metrics","title":"Metrics","text":"<p>If you'd like to learn more about metrics in MongooseIM, please visit MongooseIM metrics page.</p> Name Type Description (when it gets incremented) <code>[Host, mod_event_pusher_http, sent]</code> spiral An HTTP notification is sent successfully. <code>[Host, mod_event_pusher_http, failed]</code> spiral An HTTP notification failed. <code>[Host, mod_event_pusher_http, response_time]</code> histogram Does not include timings of failed requests."},{"location":"modules/mod_event_pusher_push/","title":"Push backend","text":""},{"location":"modules/mod_event_pusher_push/#module-description","title":"Module Description","text":"<p>This module is a backend for mod_event_pusher that implements XEP-0357: Push Notifications. It provides push notification data to the service that delivers actual notifications to a client device.</p> <p>We've prepared a detailed tutorial for a proper push notifications setup on both client and server side.</p> <p>Please make sure that clients provide all form fields required by the specified <code>PubSub</code> node. Some publish errors may result in disabling push notifications for the specific device until it attempts to enable them again.</p> <p>This module is very easy to enable, just paste the following to your MongooseIM configuration file:</p> <pre><code>[modules.mod_event_pusher]\n  push.wpool.workers = 100\n</code></pre> <p>And that's basically it. You have just enabled the push notification support with 100 asynchronous workers that will handle all push notification related work.</p>"},{"location":"modules/mod_event_pusher_push/#options","title":"Options","text":""},{"location":"modules/mod_event_pusher_push/#modulesmod_event_pusherpushiqdisctype","title":"<code>modules.mod_event_pusher.push.iqdisc.type</code>","text":"<ul> <li>Syntax: string, one of <code>\"one_queue\"</code>, <code>\"no_queue\"</code>, <code>\"queues\"</code>, <code>\"parallel\"</code></li> <li>Default: <code>\"one_queue\"</code></li> </ul> <p>Strategy to handle incoming stanzas. For details, please refer to IQ processing policies.</p>"},{"location":"modules/mod_event_pusher_push/#modulesmod_event_pusherpushbackend","title":"<code>modules.mod_event_pusher.push.backend</code>","text":"<ul> <li>Syntax: string, one of <code>\"mnesia\"</code>, <code>\"rdbms\"</code></li> <li>Default: <code>\"mnesia\"</code></li> <li>Example: <code>backend = \"rdbms\"</code></li> </ul> <p>Backend to use for storing the registrations.</p>"},{"location":"modules/mod_event_pusher_push/#modulesmod_event_pusherpushwpool","title":"<code>modules.mod_event_pusher.push.wpool</code>","text":"<ul> <li>Syntax: TOML table with worker pool options</li> <li>Default: see description</li> <li>Example: <code>wpool.workers = 200</code></li> </ul> <p>Pool options that will be passed to the <code>worker_pool</code> library that handles all the requests. The options allowed here are the same as for the outgoing connection pools. The only difference is that the default <code>strategy</code> is <code>\"available_worker\"</code>.</p>"},{"location":"modules/mod_event_pusher_push/#modulesmod_event_pusherpushplugin_module","title":"<code>modules.mod_event_pusher.push.plugin_module</code>","text":"<ul> <li>Syntax: non-empty string</li> <li>Default: <code>\"mod_event_pusher_push_plugin_defaults\"</code></li> <li>Example: <code>plugin_module = \"mod_event_pusher_push_plugin_defaults\"</code></li> </ul> <p>The module implementing <code>mod_event_pusher_push_plugin</code> behaviour, used for dynamic configuration of push notifications. See the relevant section for more details.</p>"},{"location":"modules/mod_event_pusher_push/#modulesmod_event_pusherpushvirtual_pubsub_hosts","title":"<code>modules.mod_event_pusher.push.virtual_pubsub_hosts</code>","text":"<ul> <li>Syntax: array of strings</li> <li>Default: <code>[]</code></li> <li>Example: <code>virtual_pubsub_hosts = [\"host1\", \"host2\"]</code></li> </ul> <p>The list of \"simulated\" Publish-Subscribe domains. You may use the <code>@HOST@</code> pattern in the domain name. It will automatically be replaced by a respective XMPP domain (e.g. <code>localhost</code>). See the relevant section for more details.</p>"},{"location":"modules/mod_event_pusher_push/#virtual-pubsub-hosts","title":"Virtual PubSub hosts","text":"<p>If a notification is published to one of the configured domains, the internal push notification hook is executed in MongooseIM instead of the XEP-0357 typical behaviour. If an existing PubSub domain is added to this list, it will be shadowed in the push notifications context. To ensure complete shadowing of all the PubSub subdomains you must use the <code>@HOST@</code> pattern, otherwise only the subdomain of the user is shadowed. It enables easy migration from PubSub-full deployments to PubSub-less variants.</p>"},{"location":"modules/mod_event_pusher_push/#migration-from-xep-0357-to-virtual-hosts","title":"Migration from XEP-0357 to virtual hosts","text":"<p>This is an example of how you can migrate the existing setup to the new model. PubSub service still exists, just for the case of a user attempting to create a node. However, its domain is overridden for the purpose of sending push notifications. Please note the value of <code>virtual_pubsub_hosts</code> option. <code>\"pubsub.@HOST@\"</code> is the default domain for <code>mod_pubsub</code>.</p> <pre><code>[modules.mod_pubsub]\n  plugins = [\"push\"] # mandatory minimal config\n\n[modules.mod_event_pusher.push]\n  backend = \"mnesia\" # optional\n  wpool.workers = 200 # optional\n  plugin_module = \"mod_event_pusher_push_plugin_defaults\" # optional\n  virtual_pubsub_hosts = [\"pubsub.@HOST@\"]\n</code></pre>"},{"location":"modules/mod_event_pusher_push/#advantages","title":"Advantages","text":"<ul> <li>Versatility: PubSub-less and PubSub-full mechanisms can be configured with different domains and   therefore give fine-grained control over the push notification handling</li> <li>Takes advantage of the PubSub-less efficiency when told to do so</li> <li>Fully compliant with XEP-0357: Push Notifications and therefore with most 3rd party client libraries</li> <li>Ideal for migrations to PubSub-less deployments.</li> </ul>"},{"location":"modules/mod_event_pusher_push/#drawbacks","title":"Drawbacks","text":"<ul> <li>More complex configuration on the server side</li> <li>Pays the PubSub performance penalty when the PubSub path is taken</li> </ul>"},{"location":"modules/mod_event_pusher_push/#plugin-module","title":"Plugin module","text":"<p>You can also control the format of the \"sender\" of the push notification (which ultimately becomes the title of push notification) and filter which messages will trigger the notification. In order to achieve that, you need to create a plugin module that implements the <code>mod_event_pusher_push_plugin</code> behaviour and enable this plugin in the <code>plugin_module</code> section as above.</p> <p>A plugin module handles the dynamic configuration of push notifications.  It contains the filtering and custom logic for notifying about messages.</p> <p>Two plugin implementations are provided. They offer different behaviour considering unacknowledged messages when using XEP-0198: Stream Management:</p> <ul> <li><code>mod_event_pusher_push_plugin_defaults</code>, which implements an older behaviour. It does not notify   the user of unacknowledged messages immediately after detecting a lost connection to the user.</li> <li><code>mod_event_pusher_push_plugin_enhanced</code>, which pushes notifications as soon as the server detects   that the client has disconnected and waits for stream resumption (by an <code>unack_msg_event</code> event   generated by the <code>unacknowledged_message</code> hook). This immediate notification prevents the unneeded   suspension of the client's application, if there are no unacknowledged messages yet. This allows   to create more power efficient mobile applications.</li> </ul> <p>In order for the enhanced plugin to work, each device (an entity that may receive push notifications) should be uniquely identified. The only correct way to identify a device from the XMPP standpoint is to use the data provided with the enable stanza. Because of that, each device should (re)enable the push notifications at the beginning of each and every connection.</p>"},{"location":"modules/mod_event_pusher_push/#custom-plugins","title":"Custom plugins","text":"<p>A custom module implementing the optional callbacks of <code>mod_event_pusher_push_plugin</code> may be used as a plugin to change the default behaviour. In the case of not implemented callbacks the defaults are used instead.</p>"},{"location":"modules/mod_event_pusher_rabbit/","title":"RabbitMQ backend","text":""},{"location":"modules/mod_event_pusher_rabbit/#current-status","title":"Current status","text":"<p>This module is still in an experimental phase.</p>"},{"location":"modules/mod_event_pusher_rabbit/#module-description","title":"Module Description","text":"<p>This module is a backend of mod_event_pusher that enables support for the RabbitMQ integration. Currently there are 5 available notifications:</p> <ul> <li>user presence changed - Carries the user id (full jid by default) and a boolean field corresponding to the current user online status.</li> <li>private message sent/received - Carries the user ids (both sender and receiver) along with the message body.</li> <li>group message sent/received - Carries the user id and the room id (full jids by default) along with the message body.</li> </ul> <p>All these notifications are sent as JSON strings to RabbitMQ exchanges. Type of exchanges can be chosen as desired. Each type of the notifications is sent to its dedicated exchange. There are three exchanges created on startup of the module, for presences, private messages and group chat messages related events.</p> <p>Messages are published to a RabbitMQ server with routing key being set to a user bare jid (<code>user@domain</code>) and configurable topic e.g <code>alice@localhost.private_message_sent</code>.</p> <p>The module requires <code>rabbit</code> pool of AMQP connections to be configured in order to make the module work. It's well advised to read through Advanced configuration/Outgoing connections section before enabling the module.</p>"},{"location":"modules/mod_event_pusher_rabbit/#presence-exchange-options","title":"Presence exchange options","text":""},{"location":"modules/mod_event_pusher_rabbit/#modulesmod_event_pusherrabbitpresence_exchangename","title":"<code>modules.mod_event_pusher.rabbit.presence_exchange.name</code>","text":"<ul> <li>Syntax: non-empty string</li> <li>Default: <code>\"presence\"</code></li> <li>Example: <code>name = \"custom_presence_name\"</code></li> </ul> <p>Defines RabbitMQ presence exchange name.</p>"},{"location":"modules/mod_event_pusher_rabbit/#modulesmod_event_pusherrabbitpresence_exchangetype","title":"<code>modules.mod_event_pusher.rabbit.presence_exchange.type</code>","text":"<ul> <li>Syntax: non-empty string</li> <li>Default: <code>\"topic\"</code></li> <li>Example: <code>type = \"custom_presence_topic\"</code></li> </ul> <p>Defines RabbitMQ presence exchange type.</p>"},{"location":"modules/mod_event_pusher_rabbit/#chat-message-options","title":"Chat message options","text":""},{"location":"modules/mod_event_pusher_rabbit/#modulesmod_event_pusherrabbitchat_msg_exchangename","title":"<code>modules.mod_event_pusher.rabbit.chat_msg_exchange.name</code>","text":"<ul> <li>Syntax: non-empty string</li> <li>Default: <code>\"chat_msg\"</code></li> <li>Example: <code>name = \"custom_msg_name\"</code></li> </ul> <p>Defines RabbitMQ chat message exchange name.</p>"},{"location":"modules/mod_event_pusher_rabbit/#modulesmod_event_pusherrabbitchat_msg_exchangetype","title":"<code>modules.mod_event_pusher.rabbit.chat_msg_exchange.type</code>","text":"<ul> <li>Syntax: non-empty string</li> <li>Default: <code>\"topic\"</code></li> <li>Example: <code>type = \"custom_msg_topic\"</code></li> </ul> <p>Defines RabbitMQ chat message exchange type.</p>"},{"location":"modules/mod_event_pusher_rabbit/#modulesmod_event_pusherrabbitchat_msg_exchangesent_topic","title":"<code>modules.mod_event_pusher.rabbit.chat_msg_exchange.sent_topic</code>","text":"<ul> <li>Syntax: non-empty string</li> <li>Default: <code>\"chat_msg_sent\"</code></li> <li>Example: <code>sent_topic = \"custom_sent_topic\"</code></li> </ul> <p>Defines RabbitMQ chat message sent topic name.</p>"},{"location":"modules/mod_event_pusher_rabbit/#modulesmod_event_pusherrabbitchat_msg_exchangerecv_topic","title":"<code>modules.mod_event_pusher.rabbit.chat_msg_exchange.recv_topic</code>","text":"<ul> <li>Syntax: non-empty string</li> <li>Default: <code>\"chat_msg_recv\"</code></li> <li>Example: <code>recv_topic = \"custom_recv_topic\"</code></li> </ul> <p>Defines RabbitMQ chat message received topic name.</p>"},{"location":"modules/mod_event_pusher_rabbit/#group-chat-message-options","title":"Group chat message options","text":""},{"location":"modules/mod_event_pusher_rabbit/#modulesmod_event_pusherrabbitgroupchat_msg_exchangename","title":"<code>modules.mod_event_pusher.rabbit.groupchat_msg_exchange.name</code>","text":"<ul> <li>Syntax: non-empty string</li> <li>Default: <code>\"groupchat_msg\"</code></li> <li>Example: <code>name = \"custom_group_msg_name\"</code></li> </ul> <p>Defines RabbitMQ group chat message exchange name.</p>"},{"location":"modules/mod_event_pusher_rabbit/#modulesmod_event_pusherrabbitgroupchat_msg_exchangetype","title":"<code>modules.mod_event_pusher.rabbit.groupchat_msg_exchange.type</code>","text":"<ul> <li>Syntax: non-empty string</li> <li>Default: <code>\"topic\"</code></li> <li>Example: <code>type = \"custom_group_msg_topic\"</code></li> </ul> <p>Defines RabbitMQ group chat message exchange type.</p>"},{"location":"modules/mod_event_pusher_rabbit/#modulesmod_event_pusherrabbitgroupchat_msg_exchangesent_topic","title":"<code>modules.mod_event_pusher.rabbit.groupchat_msg_exchange.sent_topic</code>","text":"<ul> <li>Syntax: non-empty string</li> <li>Default: <code>\"groupchat_msg_sent\"</code></li> <li>Example: <code>sent_topic = \"custom_group_sent_topic\"</code></li> </ul> <p>Defines RabbitMQ group chat message sent topic name.</p>"},{"location":"modules/mod_event_pusher_rabbit/#modulesmod_event_pusherrabbitgroupchat_msg_exchangerecv_topic","title":"<code>modules.mod_event_pusher.rabbit.groupchat_msg_exchange.recv_topic</code>","text":"<ul> <li>Syntax: non-empty string</li> <li>Default: <code>\"groupchat_msg_recv\"</code></li> <li>Example: <code>recv_topic = \"custom_group_recv_topic\"</code></li> </ul> <p>Defines RabbitMQ group chat message received topic name.</p>"},{"location":"modules/mod_event_pusher_rabbit/#example-configuration","title":"Example configuration","text":"<pre><code>[modules.mod_event_pusher.rabbit]\n  presence_exchange.name =\"presence\"\n  presence_exchange.type = \"topic\"\n  chat_msg_exchange.name = \"chat_msg\"\n  chat_msg_exchange.sent_topic = \"chat_msg_sent\"\n  chat_msg_exchange.recv_topic = \"chat_msg_recv\"\n  groupchat_msg_exchange.name = \"groupchat_msg\"\n  groupchat_msg_exchange.sent_topic = \"groupchat_msg_sent\"\n  groupchat_msg_exchange.recv_topic = \"groupchat_msg_recv\"\n</code></pre>"},{"location":"modules/mod_event_pusher_rabbit/#json-schema-examples","title":"JSON Schema examples","text":"<p>The different kinds of notifications deliver slightly different messages. The messages are delivered in a JSON format.</p>"},{"location":"modules/mod_event_pusher_rabbit/#presence-updates","title":"Presence updates","text":"<p>The JSON format for an online presence update notification is: <pre><code>{\n    \"user_id\": \"alice@localhost/res1\",\n    \"present\": true\n}\n</code></pre></p> <p>For offline presence updates, the <code>present</code> boolean value is set to false:</p> <pre><code>{\n    \"user_id\": \"alice@localhost/res1\",\n    \"present\": false\n}\n</code></pre>"},{"location":"modules/mod_event_pusher_rabbit/#sentreceived-messages","title":"Sent/received messages","text":"<p>The JSON format for a private message notification is:</p> <pre><code>{\n    \"to_user_id\": \"bob@localhost/res1\",\n    \"message\": \"Hello, Bob\",\n    \"from_user_id\": \"alice@localhost/res1\"\n}\n</code></pre> <p>The notification is similar for group messages. For example for \"sent\" events:</p> <pre><code>{\n    \"to_user_id\": \"muc_publish@muc.localhost\",\n    \"message\": \"Hi, Everyone!\",\n    \"from_user_id\": \"bob@localhost/res1\"\n}\n</code></pre> <p>and for \"received\" events:</p> <pre><code>{\n    \"to_user_id\": \"bob@localhost/res1\",\n    \"message\": \"Hi, Everyone!\",\n    \"from_user_id\": \"muc_publish@muc.localhost/alice\"\n}\n</code></pre>"},{"location":"modules/mod_event_pusher_rabbit/#metrics","title":"Metrics","text":"<p>The module provides some metrics related to RabbitMQ connections and messages as well. Provided metrics:</p> name type description (when it gets incremented/decremented) [<code>Host</code>, <code>connections_active</code>] spiral A connection to a RabbitMQ server is opened(+1)/closed(-1). [<code>Host</code>, <code>connections_opened</code>] spiral A connection to a RabbitMQ server is opened. [<code>Host</code>, <code>connections_closed</code>] spiral A connection to a RabbitMQ server is closed. [<code>Host</code>, <code>connection_failed</code> ] spiral A try to open a connection to a RabbitMQ server failed. [<code>Host</code>, <code>messages_published</code>] spiral A message to a RabbitMQ server is published. [<code>Host</code>, <code>messages_failed</code>] spiral A message to a RabbitMQ server is rejected. [<code>Host</code>, <code>messages_timeout</code>] spiral A message to a RabbitMQ server timed out (weren't confirmed by the server). [<code>Host</code>, <code>message_publish_time</code>] histogram Amount of time it takes to publish a message to a RabbitMQ server and receive a confirmation. It's measured only for successful messages. [<code>Host</code>, <code>message_payload_size</code>] histogram Size of a message (in bytes) that was published to a RabbitMQ server (including message properties). It's measured only for successful messages. <p>All the above metrics have a prefix which looks as follows: <code>&lt;xmpp_host&gt;.backends.mod_event_pusher_rabbit.&lt;metric_name&gt;</code>. For example a proper metric name would look like: <code>localhost.backends.mod_event_pusher_rabbit.connections_active</code></p>"},{"location":"modules/mod_event_pusher_rabbit/#guarantees","title":"Guarantees","text":"<p>There are no guarantees. The current implementation uses \"best effort\" approach which means that we don't care if a message is delivered to a RabbitMQ server. If <code>publisher confirms</code> are enabled and a message couldn't be delivered to the server for some reason (the server sent negative acknowledgment/didn't sent it at all or there was a channel exception) the module just updates appropriate metrics and prints some log messages. Notice that there might be situations when a message silently gets lost.</p>"},{"location":"modules/mod_event_pusher_rabbit/#type-of-exchanges","title":"Type of exchanges","text":"<p>By default all the exchanges used are of type <code>topic</code>. Using topic exchanges gives a lot of flexibility when binding queues to such an exchange by using <code>#</code> and <code>*</code> in binding keys. But flexibility comes at the cost of performance - imagine a scenario where there are thousands of users and AMQP consumers use binding keys for particular users which look like <code>user_N@host.#</code>. In such case RabbitMQ has to go through all the users in order to find out where a message should be sent to. This operations is proved to be costly. In a load test with 100k users a delay caused by this operation was substantial (about an order of magnitude higher than compared to a load test with 60k users).</p> <p>If performance is a top priority go for <code>direct</code> exchanges. Using this type of exchanges is proved to work efficiently with 100k users. Keep in mind it gives up flexibility over performance.</p>"},{"location":"modules/mod_event_pusher_rabbit/#publisher-confirms","title":"Publisher confirms","text":"<p>By default publisher confirmations are disabled. However, one-to-one confirmations can be enabled (see RabbitMQ connection setup section). When a worker sends a message to a RabbitMQ server it waits for a confirmation from the server before it starts to process next message. This approach allows to introduce backpressure on a RabbitMQ server connection cause the server can reject/not confirm messages when it's overloaded. On the other hand it can cause performance degradation.</p>"},{"location":"modules/mod_event_pusher_rabbit/#worker-selection-strategy","title":"Worker selection strategy","text":"<p>The module uses <code>mongoose_wpool</code> for managing worker processes  and <code>best_worker</code> strategy, for choosing a worker, is in use by default. Different strategies imply different behaviors of the system.</p>"},{"location":"modules/mod_event_pusher_rabbit/#event-messages-queuing","title":"Event messages queuing","text":"<p>When <code>available_worker</code> strategy is in use all the event messages are queued in single worker pool manager process state. When different strategy is set e.g <code>best_worker</code> those messages are placed in worker processes inboxes. Worker selection strategy can be set in <code>rabbit</code> pool configuration.</p>"},{"location":"modules/mod_event_pusher_rabbit/#event-messages-ordering","title":"Event messages ordering","text":"<p>None of worker selection strategies ensures that user events will be delivered to a RabbitMQ server properly ordered in time.</p>"},{"location":"modules/mod_event_pusher_sns/","title":"SNS backend","text":""},{"location":"modules/mod_event_pusher_sns/#module-description","title":"Module Description","text":"<p>This module is a backend of mod_event_pusher that enables support for the Amazon SNS service. Currently there are 3 available notifications:</p> <ul> <li>user presence changed - Carries the user id (bare jid by default) and a boolean field corresponding to the current user online status.</li> <li>private message sent - Carries the user ids (both sender and receiver) along with the message body.</li> <li>group message sent - Carries the user id and the room id (bare jids by default) along with the message body.</li> </ul> <p>All these notifications are sent as a JSON string to Amazon SNS along with custom MessageAttributes (see http://docs.aws.amazon.com/sns/latest/api/API_Publish.html). MessageAttributes can be specified via a plugin module (more details in Options section).</p> <p>Full topics for notifications (ARN as defined in Amazon Resource Names) are constructed as <code>arn:aws:sns:{region}:{account_id}:{topic}</code> where <code>{region}</code> and <code>{account_id}</code> are substituted with corresponding values from configuration options. <code>{topic}</code> is pulled from configuration option <code>presence_updates_topic</code>, <code>pm_messages_topic</code> or <code>muc_messages_topic</code> based on the notification type.</p>"},{"location":"modules/mod_event_pusher_sns/#options","title":"Options","text":""},{"location":"modules/mod_event_pusher_sns/#modulesmod_event_pushersnspresence_updates_topic","title":"<code>modules.mod_event_pusher.sns.presence_updates_topic</code>","text":"<ul> <li>Syntax: string</li> <li>Default: no default is given</li> <li>Example: <code>presence_updates_topic = \"user_presence_updated\"</code></li> </ul> <p>Defines Amazon SNS Topic for presence change notifications. Remove this option to disable these notifications.</p>"},{"location":"modules/mod_event_pusher_sns/#modulesmod_event_pushersnspm_messages_topic","title":"<code>modules.mod_event_pusher.sns.pm_messages_topic</code>","text":"<ul> <li>Syntax: string</li> <li>Default: no default is given</li> <li>Example: <code>pm_messages_topic = \"user_message_sent\"</code></li> </ul> <p>Defines Amazon SNS Topic for private message notifications. Remove this option to disable these notifications.</p>"},{"location":"modules/mod_event_pusher_sns/#modulesmod_event_pushersnsmuc_messages_topic","title":"<code>modules.mod_event_pusher.sns.muc_messages_topic</code>","text":"<ul> <li>Syntax: string</li> <li>Default: no default is given</li> <li>Example: <code>muc_messages_topic = \"user_messagegroup_sent\"</code></li> </ul> <p>Defines Amazon SNS Topic for group message notifications. Remove this option to disable these notifications.</p>"},{"location":"modules/mod_event_pusher_sns/#modulesmod_event_pushersnsplugin_module","title":"<code>modules.mod_event_pusher.sns.plugin_module</code>","text":"<ul> <li>Syntax: string</li> <li>Default: <code>\"mod_event_pusher_sns_defaults\"</code></li> <li>Example: <code>plugin_module = \"mod_event_pusher_sns_defaults\"</code></li> </ul> <p>Sets a callback module used for creating user's GUID used in notifications (from user's JID) and for defining custom attributes attached to a published SNS message.</p>"},{"location":"modules/mod_event_pusher_sns/#modulesmod_event_pushersnssns_host","title":"<code>modules.mod_event_pusher.sns.sns_host</code>","text":"<ul> <li>Syntax: string</li> <li>Default: none, this option is mandatory</li> <li>Example: <code>sns_host = \"sns.eu-west-1.amazonaws.com\"</code></li> </ul> <p>URL to the Amazon SNS service. The URL may be in virtual host form, and for AWS needs to point at a specific regional endpoint. The scheme, port and path specified in the URL will be used to publish notifications via HTTP POST method.</p>"},{"location":"modules/mod_event_pusher_sns/#modulesmod_event_pushersnsregion","title":"<code>modules.mod_event_pusher.sns.region</code>","text":"<ul> <li>Syntax: string</li> <li>Default: none, this option is mandatory</li> <li>Example: <code>region = \"eu-west-1\"</code></li> </ul> <p>The AWS region to use for requests.</p>"},{"location":"modules/mod_event_pusher_sns/#modulesmod_event_pushersnsaccess_key_id","title":"<code>modules.mod_event_pusher.sns.access_key_id</code>","text":"<ul> <li>Syntax: string</li> <li>Default: none, this option is mandatory</li> <li>Example: <code>access_key_id = \"AKIAIOSFODNN7EXAMPLE\"</code></li> </ul> <p>ID of the access key to use for authorization.</p>"},{"location":"modules/mod_event_pusher_sns/#modulesmod_event_pushersnssecret_access_key","title":"<code>modules.mod_event_pusher.sns.secret_access_key</code>","text":"<ul> <li>Syntax: string</li> <li>Default: none, this option is mandatory</li> <li>Example: <code>secret_access_key = \"wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\"</code></li> </ul> <p>Secret access key to use for authorization.</p>"},{"location":"modules/mod_event_pusher_sns/#modulesmod_event_pushersnsaccount_id","title":"<code>modules.mod_event_pusher.sns.account_id</code>","text":"<ul> <li>Syntax: string</li> <li>Default: none, this option is mandatory</li> <li>Example: <code>account_id = \"123456789012\"</code></li> </ul> <p>12 digit number as defined in AWS Account Identifiers to use for creating TopicArn for publishing notifications.</p>"},{"location":"modules/mod_event_pusher_sns/#modulesmod_event_pushersnspool_size","title":"<code>modules.mod_event_pusher.sns.pool_size</code>","text":"<ul> <li>Syntax: positive integer</li> <li>Default: <code>100</code></li> <li>Example: <code>pool_size = 100</code></li> </ul> <p>Worker pool size for publishing notifications</p>"},{"location":"modules/mod_event_pusher_sns/#modulesmod_event_pushersnspublish_retry_count","title":"<code>modules.mod_event_pusher.sns.publish_retry_count</code>","text":"<ul> <li>Syntax: non-negative integer</li> <li>Default: <code>2</code></li> <li>Example: <code>publish_retry_count = 2</code></li> </ul> <p>Retry count in case of a publish error.</p>"},{"location":"modules/mod_event_pusher_sns/#modulesmod_event_pushersnspublish_retry_time_ms","title":"<code>modules.mod_event_pusher.sns.publish_retry_time_ms</code>","text":"<ul> <li>Syntax: non-negative integer</li> <li>Default: <code>50</code></li> <li>Example: <code>publish_retry_time_ms = 50</code></li> </ul> <p>Base exponential backoff time (in ms) for publish errors.</p>"},{"location":"modules/mod_event_pusher_sns/#example-configuration","title":"Example configuration","text":"<pre><code>[modules.mod_event_pusher.sns]\n  presence_updates_topic = \"user_presence_updated\"\n  pm_messages_topic = \"user_message_sent\"\n  muc_messages_topic = \"user_messagegroup_sent\"\n  sns_host = \"sns.eu-west-1.amazonaws.com\"\n  region = \"eu-west-1\"\n  access_key_id = \"AKIAIOSFODNN7EXAMPLE\"\n  secret_access_key = \"wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\"\n  account_id = \"123456789012\"\n</code></pre>"},{"location":"modules/mod_event_pusher_sns/#json-schema-examples","title":"JSON Schema examples","text":"<p>The different kinds of notifications deliver slightly different messages. The messages are delivered in a JSON format.</p>"},{"location":"modules/mod_event_pusher_sns/#presence-updates","title":"Presence updates","text":"<p>The JSON format for an online presence update notification is: <pre><code>{\n    \"user_id\": \"alice@localhost\",\n    \"present\": true\n}\n</code></pre></p> <p>For offline presence updates, the <code>present</code> boolean value is set to false:</p> <pre><code>{\n    \"user_id\": \"alice@localhost\",\n    \"present\": false\n}\n</code></pre>"},{"location":"modules/mod_event_pusher_sns/#sent-messages","title":"Sent messages","text":"<p>The JSON format for a private message notification is: <pre><code>{\n    \"to_user_id\": \"bob@localhost\",\n    \"message\": \"Hello, Bob\",\n    \"from_user_id\": \"alice@localhost\"\n}\n</code></pre></p> <p>The notification is similar for group messages except that the <code>to_user_id</code> is the recipient room JID. For example:</p> <pre><code>{\n    \"to_user_id\": \"muc_publish@muc.localhost\",\n    \"message\": \"Hi, Everyone!\",\n    \"from_user_id\": \"bob@localhost\"\n}\n</code></pre>"},{"location":"modules/mod_extdisco/","title":"mod_extdisco","text":""},{"location":"modules/mod_extdisco/#module-description","title":"Module Description","text":"<p>Implements XEP-0215: External Service Discovery for discovering information about services external to the XMPP network. The main use-case is to help discover STUN/TURN servers to allow for negotiating media exchanges.</p>"},{"location":"modules/mod_extdisco/#options","title":"Options","text":""},{"location":"modules/mod_extdisco/#modulesmod_extdiscoiqdisctype","title":"<code>modules.mod_extdisco.iqdisc.type</code>","text":"<ul> <li>Syntax: string, one of <code>\"one_queue\"</code>, <code>\"no_queue\"</code>, <code>\"queues\"</code>, <code>\"parallel\"</code></li> <li>Default: <code>\"no_queue\"</code></li> </ul> <p>Strategy to handle incoming IQ stanzas. For details, please refer to IQ processing policies.</p>"},{"location":"modules/mod_extdisco/#modulesmod_extdiscoservice","title":"<code>modules.mod_extdisco.service</code>","text":"<ul> <li>Syntax: TOML array with one table for each advertised service - see below for details.</li> <li>Default: <code>[]</code> - no services advertised</li> </ul>"},{"location":"modules/mod_extdisco/#service-options","title":"Service options","text":"<p>Each advertised service is specified as a TOML table containing the following options listed below.</p>"},{"location":"modules/mod_extdisco/#modulesmod_extdiscoservicetype","title":"<code>modules.mod_extdisco.service.type</code>","text":"<ul> <li>Syntax: string</li> <li>Default: none, this option is required</li> <li>Example: <code>type = \"stun\"</code></li> </ul> <p>Service type, common values are <code>\"stun\"</code>, <code>\"turn\"</code>, <code>\"ftp\"</code>.</p>"},{"location":"modules/mod_extdisco/#modulesmod_extdiscoservicehost","title":"<code>modules.mod_extdisco.service.host</code>","text":"<ul> <li>Syntax: string</li> <li>Default: none, this option is required</li> <li>Example: <code>host = \"192.168.0.2\"</code></li> </ul> <p>Hostname or an IP address where the service is hosted.</p>"},{"location":"modules/mod_extdisco/#modulesmod_extdiscoserviceport","title":"<code>modules.mod_extdisco.service.port</code>","text":"<ul> <li>Syntax: integer, between 0 and 65535, non-inclusive</li> <li>Default: none, this option is recommended</li> <li>Example: <code>port = 3478</code></li> </ul> <p>The communications port to be used at the host.</p>"},{"location":"modules/mod_extdisco/#modulesmod_extdiscoservicetransport","title":"<code>modules.mod_extdisco.service.transport</code>","text":"<ul> <li>Syntax: string, one of <code>\"udp\"</code>, <code>\"tcp\"</code></li> <li>Default: none, this option is optional</li> <li>Example: <code>transport = \"udp\"</code></li> </ul> <p>The underlying transport protocol to be used when communicating with the service.</p>"},{"location":"modules/mod_extdisco/#modulesmod_extdiscoserviceusername","title":"<code>modules.mod_extdisco.service.username</code>","text":"<ul> <li>Syntax: string</li> <li>Default: none, this option is optional</li> <li>Example: <code>username = \"username\"</code></li> </ul> <p>A service-generated username for use at the service.</p>"},{"location":"modules/mod_extdisco/#modulesmod_extdiscoservicepassword","title":"<code>modules.mod_extdisco.service.password</code>","text":"<ul> <li>Syntax: string</li> <li>Default: none, this option is optional</li> <li>Example: <code>password = \"password\"</code></li> </ul> <p>A service-generated password for use at the service.</p>"},{"location":"modules/mod_extdisco/#example-configuration","title":"Example Configuration","text":"<pre><code>[modules.mod_extdisco]\n\n  [[modules.mod_extdisco.service]]\n    type = \"stun\"\n    host = \"127.0.0.1\"\n    port = 3478\n    transport = \"udp\"\n    username = \"username\"\n    password = \"password\"\n\n  [[modules.mod_extdisco.service]]\n    type = \"stun\"\n    host = \"stun.host.com\"\n    port = 3478\n    transport = \"tcp\"\n    username = \"username2\"\n    password = \"password2\"\n\n  [[modules.mod_extdisco.service]]\n    type = \"turn\"\n    host = \"turn.host.com\"\n</code></pre>"},{"location":"modules/mod_global_distrib/","title":"mod_global_distrib","text":""},{"location":"modules/mod_global_distrib/#module-description","title":"Module Description","text":"<p>This module enables global distribution of a single XMPP domain. With <code>mod_global_distrib</code>, multiple distinct MongooseIM clusters can share a single domain name and route messages to the specific datacenter where the recipient is available.</p> <p>Warning</p> <p>This module does not support dynamic domains.</p>"},{"location":"modules/mod_global_distrib/#how-it-works","title":"How it works","text":"<p>There are multiple subsystems that cooperate to enable global distribution:</p>"},{"location":"modules/mod_global_distrib/#metadata-sharing","title":"Metadata sharing","text":"<p>Sharing of metadata is done by leveraging a database with cross-datacenter replication. Currently, only Redis is supported, with Dynomite layer for replication. The most important metadata stored in the database is a session/routing table. The table stores mappings between currently logged users' JIDs and datacenters on which they are logged in. Because access to the session table is very frequent, its entries are additionally cached on each node.</p> <p>To preserve consistency between database instances, all data is stored with a set expiration time and is periodically refreshed. Each node of each cluster is responsible for refreshing its own data. Thus, in an event of a netsplit, datacenters' information about unreachable datacenters' users will expire, as those users are now unreachable; but once the connection is reestablished, the data will be replicated again as datacenters refresh their entries. Additionally, to prevent edge cases where an incoming message is received and replied to before the datacenter learns about the sender's host, an incoming message also carries information about its origin which may be used to temporarily update the local routing table.</p>"},{"location":"modules/mod_global_distrib/#redis-entries","title":"Redis entries","text":"<p>Following structures are stored in Redis:</p> <ul> <li>JID mappings are stored as normal key-value entries, where user's JID (full and bare) is the key, and the value is the local hostname where the user is logged in. Example: <code>\"user1@example.com/res\" -&gt; \"dc2.example.com\"</code>.</li> <li>Domains of components and services registered on the globally distributed host are stored in per-node set structures where the key is <code>&lt;local_host&gt;#&lt;node_name&gt;#{domains}</code>, and the values are the domain names. Example: <code>\"dc1.example.com#mongoose1@dc1.example.com#{domains}\" -&gt; {\"muc1.example.com\", \"muc2.example.com\"}</code>.</li> <li>Domains of non-hidden components and services (see the <code>XMPP Components</code> documentation) are stored in per-node set structures where the key is <code>&lt;local_host&gt;#&lt;node_name&gt;#{public_domains}</code>, and the values are the domain names.</li> <li>Declared endpoints available on a node are similarly stored in a per-node set structure where the key is <code>&lt;local_host&gt;#&lt;node_name&gt;#{endpoints}</code> and the values represent the TCP endpoints of the node. Example: <code>\"dc1.example.com#mongoose1@dc1.example.com#{endpoints}\" -&gt; {\"172.16.2.14#8231\", \"2001:0db8:85a3:0000:0000:8a2e:0370:7334#8882\"}</code>.</li> <li>Nodes that comprise a host are stored in a set structure with key <code>&lt;local_host&gt;#{nodes}</code> and values being the names of the nodes. Example: <code>\"dc2.example.com#{nodes}\" -&gt; {\"node1@dc2.example.com\", \"node3@dc2.example.com\"}</code>.</li> <li>Hosts are stored in a set with key <code>hosts</code> and values being the individual local XMPP domains. Example: <code>\"hosts\" -&gt; {\"dc1.example.com\", \"dc2.example.com\"}</code>.</li> </ul>"},{"location":"modules/mod_global_distrib/#message-routing","title":"Message routing","text":"<p><code>mod_global_distrib</code> establishes its own listeners and dedicated TCP/TLS connections for message routing. Each node listens on preconfigured endpoints, where each node in a datacenter can have any number of endpoints, including none. The endpoints are shared between all datacenters. If a node becomes unavailable, its endpoint entries in the database will expire and will be read once the node comes back online.</p> <p>Connections between nodes in distinct datacenters are opened on the first request and then maintained as long as the destination endpoint is present in Redis. When a node needs to connect to a remote cluster, specified number of connections are opened to every endpoint reported by that datacenter. Global distribution features automatic rebalancing feature that will \"disable\" connections when their respective endpoints disappear from Redis. A new pool of connections is created each time a new endpoint is recognised. Whenever a node receives a message that is determined (by consulting the session table) to be destined for another datacenter, the routing procedure in the current datacenter is interrupted, the message is transported to the other datacenter via the dedicated connections, and the routing procedure is restarted there by a dedicated (but potentially short lived) worker process bound to the sender's JID (or subdomain if the sender's JIDs does not belong to the globally distributed domain). Client's process binds itself to a connection to a remote datacenter on first use, and henceforth always uses this connection to route messages directed to this datacenter. This - along with the dedicated worker process on the receiver's side - ensures that simple cross-datacenter messages between two entities are delivered in their sending order.</p> <p>It may happen that a message is rerouted through multiple datacenters (e.g. if the user has reconnected to a different datacenter while the message was already in flight). Messages are given a TTL parameter by the source datacenter so that they cannot be rerouted indefinitely. The TTL is decreased on each reroute. Note that in the edge case of multi-datacenter routing, the messages may be received out-of-order at the destination datacenter.</p>"},{"location":"modules/mod_global_distrib/#bounce","title":"Bounce","text":"<p>Consider the following edge case: user U1 logged into datacenter DC2 and then quickly reconnected to datacenter DC3. Because session table has not yet been replicated, DC2 does not see U1 in the session table, while a different datacenter DC1 still sees U1 logged into DC2. When U2 logged into DC1 and sent a message to U1, it will now be rerouted to DC2 even though the user is now available at DC3.</p> <p></p> <p>Bounce mechanism solves this and similar edge cases by storing messages for which there is no known routing in the current datacenter. The stored messages are then assigned a bounce-TTL value and periodically - with backoff - are attempted to be routed again. In the example above, the message from U2 would be temporarily stored at DC2 and rerouted successfully once DC2 learns (via replication) that U1 is available at DC3.</p> <p>Note</p> <p>Bounce mechanism, similarly to multi-datacenter routing, may result in out-of-order messages being received at the destination datacenter.</p>"},{"location":"modules/mod_global_distrib/#metrics","title":"Metrics","text":"<p>Global distribution modules expose several per-datacenter metrics that can be used to monitor health of the system. All metrics begin with global.mod_global_distrib prefix:</p> <ul> <li><code>outgoing.messages.&lt;host&gt;</code>: number of cross-datacenter messages sent by this cluster to a given host.</li> <li><code>incoming.messages.&lt;host&gt;</code>: number of cross-datacenter messages received by this cluster from a given host.</li> <li><code>incoming.transfer_time.&lt;host&gt;</code> [us]: time elapsed between sending and receiving the message over the network from a given host.   The duration is calculated using wall clock times on sender and receiver node.</li> <li><code>outgoing.queue_time.&lt;host&gt;</code> [us]: time elapsed while message waits in a queue of a sender's connection to a given host.   High value of this metric may be remedied by increasing the number of connections to other hosts.</li> <li><code>incoming.queue_time</code> [us]: time elapsed while message waits in routing worker's queue.   This value is not reported per-host as routing workers are bound to the sender's JID.</li> <li><code>incoming.established</code>: incremented when a new connection is established from another cluster.   At this point the origin domain of the cluster is not known, so this metric is common for all of them.</li> <li><code>incoming.first_packet.&lt;host&gt;</code>: incremented when a receiver process gets the first packet from a remote cluster and learns its local domain.</li> <li><code>incoming.closed.&lt;host&gt;</code>: incremented when an incoming connection gets closed.</li> <li><code>incoming.errored.&lt;host&gt;</code>: incremented when an incoming connection gets closed with an error.</li> <li><code>outgoing.established.&lt;host&gt;</code>: incremented when an outgoing connection is established.</li> <li><code>outgoing.closed.&lt;host&gt;</code>: incremented when an outgoing connection gets closed.</li> <li><code>outgoing.errored.&lt;host&gt;</code>: incremented when an outgoing connection gets closed with an error.</li> <li><code>mapping_fetch_time</code> [us]: time spent on fetching an entry from the session table, cached or otherwise.</li> <li><code>mapping_fetches</code>: number of fetches of session table entries, cached or otherwise.</li> <li><code>mapping_cache_misses</code>: number of fetches of session table entries that hit the database.</li> <li><code>delivered_with_ttl</code>: A histogram of packets' TTL values recorded when the global routing layer decides to route them locally (but not due to TTL = 0).</li> <li><code>stop_ttl_zero</code>: A number of packets that weren't processed by global routing due to TTL=0.</li> <li><code>bounce_queue_size</code>: a number of messages enqueued for rerouting (the value of this metric is individual per MongooseIM node!).</li> </ul>"},{"location":"modules/mod_global_distrib/#notes","title":"Notes","text":"<ul> <li>You should only start <code>mod_global_distrib</code> by configuring it under <code>modules</code> option in <code>mongooseim.toml</code>. Do not add it as host-specific module via <code>host_config</code>.</li> <li>Do not use <code>mod_offline</code> on domains given via <code>global_host</code> or <code>local_host</code> options, as it will decrease messaging robustness; the users logged in other datacenters will not be registered as available by <code>mod_offline</code>, and so the messages will not be flushed.</li> </ul>"},{"location":"modules/mod_global_distrib/#options","title":"Options","text":""},{"location":"modules/mod_global_distrib/#modulesmod_global_distribglobal_host","title":"<code>modules.mod_global_distrib.global_host</code>","text":"<ul> <li>Syntax: string</li> <li>Default: none, this option is mandatory</li> <li>Example: <code>global_host = \"example.com\"</code></li> </ul> <p>The XMPP domain that will be shared between datacenters.</p> <p>Note</p> <p>This needs to be one of the domains given in <code>general.hosts</code> option in <code>mongooseim.toml</code>.</p>"},{"location":"modules/mod_global_distrib/#modulesmod_global_distriblocal_host","title":"<code>modules.mod_global_distrib.local_host</code>","text":"<ul> <li>Syntax: string</li> <li>Default: none, this option is mandatory</li> <li>Example: <code>local_host = \"datacenter1.example.com\"</code></li> </ul> <p>XMPP domain that maps uniquely to the local datacenter; it will be used for inter-center routing.</p> <p>Note</p> <p>This needs to be one of the domains given in <code>general.hosts</code> option in <code>mongooseim.toml</code>.</p>"},{"location":"modules/mod_global_distrib/#modulesmod_global_distribmessage_ttl","title":"<code>modules.mod_global_distrib.message_ttl</code>","text":"<ul> <li>Syntax: non-negative integer</li> <li>Default: <code>4</code></li> <li>Example: <code>message_ttl = 5</code></li> </ul> <p>Number of times a message can be rerouted between datacenters.</p>"},{"location":"modules/mod_global_distrib/#modulesmod_global_distribhosts_refresh_interval","title":"<code>modules.mod_global_distrib.hosts_refresh_interval</code>","text":"<ul> <li>Syntax: non-negative integer, value given in milliseconds</li> <li>Default: <code>3000</code></li> <li>Example: <code>hosts_refresh_interval = 3000</code></li> </ul> <p>The interval telling how often Redis should be asked if new hosts appeared.</p>"},{"location":"modules/mod_global_distrib/#connections-options","title":"Connections' options","text":""},{"location":"modules/mod_global_distrib/#modulesmod_global_distribconnectionsendpoints","title":"<code>modules.mod_global_distrib.connections.endpoints</code>","text":"<ul> <li>Syntax: Array of TOML tables with the following keys: <code>host</code> and <code>port</code>, and the following values: {host = <code>string</code>, port = <code>non_negative_integer</code>}</li> <li>Default: <code>[{host = \"LocalHost\", port = 5555}]</code></li> <li>Example: <code>endpoints = [{host = \"172.16.0.2\", port = 5555}]</code></li> </ul> <p>A list of endpoints on which the server will listen for connections. <code>host</code> can be given as a hostname, in which case it will be resolved to an IP address on module start. The endpoint list will be shared with other datacenters via the replicated backend.</p>"},{"location":"modules/mod_global_distrib/#modulesmod_global_distribconnectionsadvertised_endpoints","title":"<code>modules.mod_global_distrib.connections.advertised_endpoints</code>","text":"<ul> <li>Syntax: Array of TOML tables with the following keys: <code>host</code> and <code>port</code>, and the following values: {host = <code>string</code>, port = <code>non_negative_integer</code>}</li> <li>Default: not set, the value of <code>endpoints</code> is used (without resolution).</li> <li>Example: <code>advertised_endpoints = [{host = \"172.16.0.2\", port = 5555}]</code></li> </ul> <p>A list of endpoints which will be advertised in Redis and therefore used to establish connection with this node by other nodes. The host may be either IP or domain, just like in case of endpoints. The difference is, the domain name won't be resolved but inserted directly to the mappings backend instead.</p>"},{"location":"modules/mod_global_distrib/#modulesmod_global_distribconnectionsconnections_per_endpoint","title":"<code>modules.mod_global_distrib.connections.connections_per_endpoint</code>","text":"<ul> <li>Syntax: non-negative integer</li> <li>Default: <code>1</code></li> <li>Example: <code>connections_per_endpoint = 30</code></li> </ul> <p>Number of outgoing connections that will be established from the current node to each endpoint assigned to a remote domain.</p>"},{"location":"modules/mod_global_distrib/#modulesmod_global_distribconnectionsendpoint_refresh_interval","title":"<code>modules.mod_global_distrib.connections.endpoint_refresh_interval</code>","text":"<ul> <li>Syntax: positive integer, value given in seconds</li> <li>Default: <code>60</code></li> <li>Example: <code>endpoint_refresh_interval = 30</code></li> </ul> <p>An interval between remote endpoint list refresh (and connection rebalancing). A separate timer is maintained for every remote domain.</p>"},{"location":"modules/mod_global_distrib/#modulesmod_global_distribconnectionsendpoint_refresh_interval_when_empty","title":"<code>modules.mod_global_distrib.connections.endpoint_refresh_interval_when_empty</code>","text":"<ul> <li>Syntax: positive integer, value given in seconds</li> <li>Default: <code>3</code></li> <li>Example: <code>endpoint_refresh_interval_when_empty = 3</code></li> </ul> <p>Endpoint refresh interval, when array of endpoints is empty.</p>"},{"location":"modules/mod_global_distrib/#modulesmod_global_distribconnectionsdisabled_gc_interval","title":"<code>modules.mod_global_distrib.connections.disabled_gc_interval</code>","text":"<ul> <li>Syntax: positive integer, value given in seconds</li> <li>Default: <code>60</code></li> <li>Example: <code>disabled_gc_interval = 60</code></li> </ul> <p>An interval between disabled endpoints \"garbage collection\". It means that disabled endpoints are periodically verified and if Global Distribution detects that connections is no longer alive, the connection pool is closed completely.</p>"},{"location":"modules/mod_global_distrib/#tls-options","title":"TLS options","text":"<p>Note</p> <p>By default <code>tls</code> is disabled and all data will be sent via standard TCP connections.</p> <p>To enable TLS support, the <code>cacertfile</code> and <code>certfile</code> options have to be present. These options will be passed to the <code>fast_tls</code> driver.</p>"},{"location":"modules/mod_global_distrib/#modulesmod_global_distribconnectionstlscertfile","title":"<code>modules.mod_global_distrib.connections.tls.certfile</code>","text":"<ul> <li>Syntax: string, path in the file system</li> <li>Default: none, this options is mandatory to enable TLS support</li> <li>Example: <code>certfile = \"priv/dc1.pem\"</code></li> </ul>"},{"location":"modules/mod_global_distrib/#modulesmod_global_distribconnectionstlscacertfile","title":"<code>modules.mod_global_distrib.connections.tls.cacertfile</code>","text":"<ul> <li>Syntax: string, path in the file system</li> <li>Default: none, this options is mandatory to enable TLS support</li> <li>Example: <code>cacertfile = \"priv/ca.pem\"</code></li> </ul>"},{"location":"modules/mod_global_distrib/#modulesmod_global_distribconnectionstlsciphers","title":"<code>modules.mod_global_distrib.connections.tls.ciphers</code>","text":"<ul> <li>Syntax: string</li> <li>Default: <code>\"TLSv1.2:TLSv1.3\"</code></li> <li>Example: <code>ciphers = \"ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384\"</code></li> </ul> <p>Cipher suites to use with StartTLS or TLS. Please refer to the OpenSSL documentation for the cipher string format.</p>"},{"location":"modules/mod_global_distrib/#modulesmod_global_distribconnectionstlsdhfile","title":"<code>modules.mod_global_distrib.connections.tls.dhfile</code>","text":"<ul> <li>Syntax: string, path in the file system</li> <li>Default: not set</li> <li>Example: <code>dhfile = \"dh.pem\"</code></li> </ul>"},{"location":"modules/mod_global_distrib/#redis-session-storage-options","title":"Redis session storage options","text":""},{"location":"modules/mod_global_distrib/#modulesmod_global_distribredispool","title":"<code>modules.mod_global_distrib.redis.pool</code>","text":"<ul> <li>Syntax: string</li> <li>Default: <code>\"global_distrib\"</code></li> <li>Example: <code>pool = \"global_distrib\"</code></li> </ul> <p>Name of the redis pool defined in outgoing pools.</p>"},{"location":"modules/mod_global_distrib/#modulesmod_global_distribredisexpire_after","title":"<code>modules.mod_global_distrib.redis.expire_after</code>","text":"<ul> <li>Syntax: positive integer</li> <li>Default: <code>120</code></li> <li>Example: <code>expire_after = 120</code></li> </ul> <p>Number of seconds after which a session entry written by this cluster will expire.</p>"},{"location":"modules/mod_global_distrib/#modulesmod_global_distribredisrefresh_after","title":"<code>modules.mod_global_distrib.redis.refresh_after</code>","text":"<ul> <li>Syntax: non-negative integer</li> <li>Default: <code>60</code></li> <li>Example: <code>refresh_after = 60</code></li> </ul> <p>Number of seconds after which session's expiration timer will be refreshed.</p>"},{"location":"modules/mod_global_distrib/#database-cache-options","title":"Database cache options","text":"<p>Options for caching database lookups, by default no options are passed.</p>"},{"location":"modules/mod_global_distrib/#modulesmod_global_distribcachecache_missed","title":"<code>modules.mod_global_distrib.cache.cache_missed</code>","text":"<ul> <li>Syntax: boolean</li> <li>Default: <code>true</code></li> <li>Example: <code>cache_missed = true</code></li> </ul> <p>Determines whether an internal session cache should cache lookup failures. When <code>false</code>, only successful database lookups will result in the value being cached. Changing this option has great negative impact on performance.</p>"},{"location":"modules/mod_global_distrib/#modulesmod_global_distribcachedomain_lifetime_seconds","title":"<code>modules.mod_global_distrib.cache.domain_lifetime_seconds</code>","text":"<ul> <li>Syntax: non-negative integer, value given in seconds</li> <li>Default: <code>600</code></li> <li>Example: <code>domain_lifetime_seconds = 600</code></li> </ul> <p>How long should subdomain mappings be cached (e.g. <code>muc.example.com -&gt; datacenter1.test</code>).</p>"},{"location":"modules/mod_global_distrib/#modulesmod_global_distribcachejid_lifetime_seconds","title":"<code>modules.mod_global_distrib.cache.jid_lifetime_seconds</code>","text":"<ul> <li>Syntax: non-negative integer, value given in seconds</li> <li>Default: <code>5</code></li> <li>Example: <code>jid_lifetime_seconds = 5</code></li> </ul> <p>How long should full and bare JID mappings be cached (e.g. <code>user1@example.com/res1 -&gt; datacenter1.test</code>).</p>"},{"location":"modules/mod_global_distrib/#modulesmod_global_distribcachemax_jids","title":"<code>modules.mod_global_distrib.cache.max_jids</code>","text":"<ul> <li>Syntax: non-negative integer</li> <li>Default: <code>10000</code></li> <li>Example: <code>max_jids = 10000</code></li> </ul> <p>The maximum number of JID entries that can be stored in cache at any point in time.</p>"},{"location":"modules/mod_global_distrib/#message-bouncing-options","title":"Message bouncing options","text":""},{"location":"modules/mod_global_distrib/#modulesmod_global_distribbounceenabled","title":"<code>modules.mod_global_distrib.bounce.enabled</code>","text":"<ul> <li>Syntax: boolean</li> <li>Default: <code>true</code></li> <li>Example: <code>enabled = false</code></li> </ul> <p>Whether message bouncing should be enabled or not. Setting this option to <code>false</code> makes other <code>bounce</code> options have no effect.</p>"},{"location":"modules/mod_global_distrib/#modulesmod_global_distribbounceresend_after_ms","title":"<code>modules.mod_global_distrib.bounce.resend_after_ms</code>","text":"<ul> <li>Syntax: non-negative integer</li> <li>Default: <code>200</code></li> <li>Example: <code>resend_after_ms = 200</code></li> </ul> <p>Time after which message will be resent in case of delivery error.</p>"},{"location":"modules/mod_global_distrib/#modulesmod_global_distribbouncemax_retries","title":"<code>modules.mod_global_distrib.bounce.max_retries</code>","text":"<ul> <li>Syntax: non-negative integer</li> <li>Default: <code>4</code></li> <li>Example: <code>max_retries = 4</code></li> </ul> <p>Number of times message delivery will be retried in case of errors.</p>"},{"location":"modules/mod_global_distrib/#global-distribution-and-service-discovery","title":"Global Distribution and Service Discovery","text":"<p><code>mod_global_distrib</code> extension relies on <code>mod_disco</code>'s option <code>users_can_see_hidden_services</code>, when provided. If it is not configured, the default value is <code>true</code>. <code>mod_disco</code> does not have to be enabled for <code>mod_global_distrib</code> to work, as this parameter is used only for processing Disco requests by Global Distribution.</p>"},{"location":"modules/mod_global_distrib/#example-configuration","title":"Example configuration","text":""},{"location":"modules/mod_global_distrib/#configuring-mod_global_distrib","title":"Configuring mod_global_distrib","text":"<pre><code>[modules.mod_global_distrib]\n  global_host = \"example.com\"\n  local_host = \"datacenter1.example.com\"\n  connections.endpoints = [{host = \"172.16.0.2\", port = 5555}]\n  connections.advertised_endpoints = [{host = \"172.16.0.2\", port = 5555}]\n  connections.tls.certfile = \"priv/dc1.pem\"\n  connections.tls.cacertfile = \"priv/ca.pem\"\n  connections.connections_per_endpoint = 30\n  cache.domain_lifetime_seconds = 60\n  bounce.resend_after_ms = 300\n  bounce.max_retries = 3\n  redis.pool = \"global_distrib\"\n</code></pre>"},{"location":"modules/mod_global_distrib/#configuring-dynomite","title":"Configuring Dynomite","text":"<p>For more information about Dynomite configuration, consult Dynomite wiki.</p> <pre><code>dyn_o_mite:\n  datacenter: dc1\n  rack: rack1\n  dyn_listen: 172.16.0.3:8101\n  dyn_seeds:\n  - 124.12.4.4:8101:rack1:dc2:1383429731\n  listen: 172.16.0.3:8102\n  servers:\n  - 172.16.0.4:6379:1\n  tokens: '138342973'\n  secure_server_option: datacenter\n  pem_key_file: dynomite.pem\n  data_store: 0\n  stats_listen: 0.0.0.0:22221\n</code></pre> <pre><code>dyn_o_mite:\n  datacenter: dc2\n  rack: rack1\n  dyn_listen: 124.12.4.4:8101\n  dyn_seeds:\n  - 172.16.0.3:8101:rack1:dc1:1383429731\n  listen: 124.12.4.4:8102\n  servers:\n  - 124.12.4.5:6379:1\n  tokens: '138342973'\n  secure_server_option: datacenter\n  pem_key_file: dynomite.pem\n  data_store: 0\n  stats_listen: 0.0.0.0:22221\n</code></pre>"},{"location":"modules/mod_http_upload/","title":"mod_http_upload","text":""},{"location":"modules/mod_http_upload/#module-description","title":"Module Description","text":"<p>This module implements XEP-0363: HTTP File Upload, version 0.3.0+.  It enables a service that on user request creates an upload \"slot\".  A slot is a pair of URLs, one of which can be used with a <code>PUT</code> method to upload a user's file, the other with a <code>GET</code> method to retrieve such file.</p> <p>Currently, the module supports only the S3 backend using AWS Signature Version 4.</p>"},{"location":"modules/mod_http_upload/#options","title":"Options","text":""},{"location":"modules/mod_http_upload/#modulesmod_http_uploadiqdisctype","title":"<code>modules.mod_http_upload.iqdisc.type</code>","text":"<ul> <li>Syntax: string, one of <code>\"one_queue\"</code>, <code>\"no_queue\"</code>, <code>\"queues\"</code>, <code>\"parallel\"</code></li> <li>Default: <code>\"one_queue\"</code></li> </ul> <p>Strategy to handle incoming stanzas. For details, please refer to IQ processing policies.</p>"},{"location":"modules/mod_http_upload/#modulesmod_http_uploadhost","title":"<code>modules.mod_http_upload.host</code>","text":"<ul> <li>Syntax: string</li> <li>Default: <code>\"upload.@HOST@\"</code></li> <li>Example: <code>host = \"upload.@HOST@\"</code></li> </ul> <p>Subdomain for the upload service to reside under. <code>@HOST@</code> is replaced with each served domain.</p>"},{"location":"modules/mod_http_upload/#modulesmod_http_uploadbackend","title":"<code>modules.mod_http_upload.backend</code>","text":"<ul> <li>Syntax: non-empty string</li> <li>Default: <code>\"s3\"</code></li> <li>Example: <code>backend = \"s3\"</code></li> </ul> <p>Backend to use for generating slots. Currently only <code>\"s3\"</code> can be used.</p>"},{"location":"modules/mod_http_upload/#modulesmod_http_uploadexpiration_time","title":"<code>modules.mod_http_upload.expiration_time</code>","text":"<ul> <li>Syntax: positive integer</li> <li>Default: <code>60</code></li> <li>Example: <code>expiration_time = 120</code></li> </ul> <p>Duration (in seconds) after which the generated <code>PUT</code> URL will become invalid.</p>"},{"location":"modules/mod_http_upload/#modulesmod_http_uploadtoken_bytes","title":"<code>modules.mod_http_upload.token_bytes</code>","text":"<ul> <li>Syntax: positive integer</li> <li>Default: <code>32</code></li> <li>Example: <code>token_bytes = 32</code></li> </ul> <p>Number of random bytes of a token that will be used in a generated URL.  The text representation of the token will be twice as long as the number of bytes, e.g. for the default value the token in the URL will be 64 characters long.</p>"},{"location":"modules/mod_http_upload/#modulesmod_http_uploadmax_file_size","title":"<code>modules.mod_http_upload.max_file_size</code>","text":"<ul> <li>Syntax: positive integer</li> <li>Default: not set - no size limit</li> <li>Example: <code>max_file_size = 10485760</code></li> </ul> <p>Maximum file size (in bytes) accepted by the module.</p>"},{"location":"modules/mod_http_upload/#modulesmod_http_uploads3","title":"<code>modules.mod_http_upload.s3</code>","text":"<ul> <li>Syntax: Array of TOML tables. See description.</li> <li>Default: see description</li> <li>Example: see description</li> </ul> <p>Options specific to S3 backend.</p> <p>Note</p> <p>This section is mandatory.</p>"},{"location":"modules/mod_http_upload/#s3-backend-options","title":"S3 backend options","text":""},{"location":"modules/mod_http_upload/#s3bucket_url","title":"<code>s3.bucket_url</code>","text":"<ul> <li>Syntax: non-empty string</li> <li>Default: none, this option is mandatory</li> <li>Example: <code>s3.bucket_url = \"https://s3-eu-west-1.amazonaws.com/mybucket\"</code></li> </ul> <p>A complete URL pointing at the used bucket. The URL may be in virtual host form, and for AWS it needs to point to a specific regional endpoint for the bucket. The scheme, port and path specified in the URL will be used to create <code>PUT</code> URLs for slots, e.g. specifying a value of <code>\"https://s3-eu-west-1.amazonaws.com/mybucket/custom/prefix\"</code> will result in <code>PUT</code> URLs of form <code>\"https://s3-eu-west-1.amazonaws.com/mybucket/custom/prefix/&lt;RANDOM_TOKEN&gt;/&lt;FILENAME&gt;?&lt;AUTHENTICATION_PARAMETERS&gt;\"</code>.</p>"},{"location":"modules/mod_http_upload/#s3add_acl","title":"<code>s3.add_acl</code>","text":"<ul> <li>Syntax: boolean</li> <li>Default: <code>false</code></li> <li>Example: <code>s3.add_acl = true</code></li> </ul> <p>If <code>true</code>, adds <code>x-amz-acl: public-read</code> header to the PUT URL. This allows users to read the uploaded files even if the bucket is private. The same header must be added to the PUT request.</p>"},{"location":"modules/mod_http_upload/#s3region","title":"<code>s3.region</code>","text":"<ul> <li>Syntax: string</li> <li>Default: <code>\"\"</code>, this option is mandatory</li> <li>Example: <code>s3.region = \"https://s3-eu-west-1.amazonaws.com/mybucket\"</code></li> </ul> <p>The AWS region to use for requests.</p>"},{"location":"modules/mod_http_upload/#s3access_key_id","title":"<code>s3.access_key_id</code>","text":"<ul> <li>Syntax: string</li> <li>Default: <code>\"\"</code>, this option is mandatory</li> <li>Example: <code>s3.access_key_id = \"AKIAIOSFODNN7EXAMPLE\"</code></li> </ul> <p>ID of the access key to use for authorization.</p>"},{"location":"modules/mod_http_upload/#s3secret_access_key","title":"<code>s3.secret_access_key</code>","text":"<ul> <li>Syntax: string</li> <li>Default: <code>\"\"</code>, this option is mandatory</li> <li>Example: <code>s3.secret_access_key = \"wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\"</code></li> </ul> <p>Secret access key to use for authorization.</p>"},{"location":"modules/mod_http_upload/#example-configuration","title":"Example configuration","text":"<pre><code>[modules.mod_http_upload]\n  host = \"upload.@HOST@\"\n  backend = \"s3\"\n  expiration_time = 120\n  s3.bucket_url = \"https://s3-eu-west-1.amazonaws.com/mybucket\"\n  s3.region = \"eu-west-1\"\n  s3.add_acl = true     \n  s3.access_key_id = \"AKIAIOSFODNN7EXAMPLE\"\n  s3.secret_access_key = \"wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\"\n</code></pre>"},{"location":"modules/mod_http_upload/#testing-s3-configuration","title":"Testing S3 configuration","text":"<p>Since there is no direct connection between MongooseIM and an S3 bucket, it is not possible to verify the provided S3 credentials during startup. However, the testing can be done manually. MongooseIM provides a dedicated <code>mongooseimctl httpUpload getUrl</code> command for the manual URLs generation. It requires the following arguments:</p> <ul> <li>domain - XMPP host name.</li> <li>filename - Name of the file.</li> <li>size - Size of the file in bytes (positive integer).</li> <li>contentType - Content-Type.</li> <li>timeout - Duration (in seconds, positive integer) after which the generated <code>PUT</code> URL will become invalid. This argument shadows the expiration_time configuration.</li> </ul> <p>The generated URLs can be used to upload/download a file using the <code>curl</code> utility:</p> <pre><code># Create some text file\necho qwerty &gt; tmp.txt\n\n# Get the size of the file\nfilesize=\"$(wc -c tmp.txt | awk '{print $1}')\"\n\n# Set the content type\ncontent_type=\"text/plain\"\n\n# Generate upload/download URLs\nurls=\"$(./mongooseimctl httpUpload getUrl --domain localhost --filename test.txt --size \"$filesize\" --contentType \"$content_type\" --timeout 600)\"\nput_url=\"$(echo \"$urls\" | awk '/PutURL:/ {print $2}')\"\nget_url=\"$(echo \"$urls\" | awk '/GetURL:/ {print $2}')\"\n\n# Try to upload a file. Note that if 'add_acl' option is\n# enabled, then you must also add 'x-amz-acl' header:\n#    -H \"x-amz-acl: public-read\"\ncurl -v -T \"./tmp.txt\" -H \"Content-Type: $content_type\" \"$put_url\"\n\n# Try to download a file\ncurl -i \"$get_url\"\n</code></pre>"},{"location":"modules/mod_http_upload/#using-s3-backend-with-minio","title":"Using S3 backend with min.io","text":"<p>min.io doesn't support ObjectACL, so enabling <code>add_acl</code> makes no sense. The bucket policies must be used instead, it is enough to set the bucket policy to <code>download</code>.</p> <p>Please note that there is no error if you keep <code>add_acl</code> enabled. min.io just ignores the <code>x-amz-acl</code> header. This might be useful to simplify the migration from S3 to min.io</p>"},{"location":"modules/mod_http_upload/#metrics","title":"Metrics","text":"<p>If you'd like to learn more about metrics in MongooseIM, please visit MongooseIM metrics page.</p> Backend action Description (when it gets incremented) <code>create_slot</code> An upload slot is allocated."},{"location":"modules/mod_inbox/","title":"mod_inbox","text":""},{"location":"modules/mod_inbox/#module-description","title":"Module Description","text":"<p><code>Inbox</code> is an experimental feature implemented as a few separate modules. It is described in detail as our Open XMPP Extension. To use it, enable mod_inbox in the config file.</p>"},{"location":"modules/mod_inbox/#options","title":"Options","text":""},{"location":"modules/mod_inbox/#modulesmod_inboxbackend","title":"<code>modules.mod_inbox.backend</code>","text":"<ul> <li>Syntax: string, one of <code>\"rdbms\"</code>, <code>\"rdbms_async\"</code></li> <li>Default: <code>\"rdbms\"</code></li> <li>Example: <code>backend = \"rdbms_async\"</code></li> </ul> <p>Only RDBMS storage is supported, but <code>rdbms</code> means flushes to DB are synchronous with each message, while <code>rdbms_async</code> is instead asynchronous.</p> <p>Regular <code>rdbms</code> has worse performance characteristics, but it has better consistency properties, as events aren't lost nor reordered. <code>rdbms_async</code> processes events asynchronously and potentially unloading a lot of aggregation from the DB. Like the case of the asynchronous workers for MAM, it is the preferred method, with the risk messages being lost on an ungraceful shutdown.</p>"},{"location":"modules/mod_inbox/#modulesmod_inboxasync_writerpool_size","title":"<code>modules.mod_inbox.async_writer.pool_size</code>","text":"<ul> <li>Syntax: non-negative integer</li> <li>Default: <code>2 * erlang:system_info(schedulers_online)</code></li> <li>Example: <code>modules.mod_inbox.async_writer.pool_size = 32</code></li> </ul> <p>Number of workers in the pool. More than the number of available schedulers is recommended, to minimise lock contention on the message queues, and more than the number of DB workers, to fully utilise the DB capacity. How much more than these two parameters is then a good fine-tuning for specific deployments.</p>"},{"location":"modules/mod_inbox/#modulesmod_inboxboxes","title":"<code>modules.mod_inbox.boxes</code>","text":"<ul> <li>Syntax: array of strings.</li> <li>Default: <code>[]</code></li> <li>Example: <code>[\"classified\", \"spam\"]</code></li> </ul> <p>A list of supported inbox boxes by the server. This can be used by clients to classify their inbox entries in any way that fits the end-user. The strings provided here will be used verbatim in the IQ query as described in Inbox \u2013 Filtering and Ordering.</p> <p>Note</p> <p><code>inbox</code>, <code>archive</code>, and <code>bin</code> are reserved box names and are always enabled, therefore they don't need to \u2013and must not\u2013 be specified in this section. <code>all</code> has a special meaning in the box query and therefore is also not allowed as a box name.</p> <p>If the asynchronous backend is configured, automatic removals become moves to the <code>bin</code> box, also called \"Trash bin\". This is to ensure eventual consistency. Then the bin can be emptied, either on a user request, with the <code>mongooseimctl inbox</code> command, through the GraphQL API, or through the REST API.</p>"},{"location":"modules/mod_inbox/#modulesmod_inboxbin_ttl","title":"<code>modules.mod_inbox.bin_ttl</code>","text":"<ul> <li>Syntax: non-negative integer, expressed in days.</li> <li>Default: <code>30</code></li> <li>Example: <code>modules.mod_inbox.bin_ttl = 7</code></li> </ul> <p>How old entries in the bin can be before the automatic bin cleaner collects them. A value of <code>7</code> would mean that entries that have been in the bin for more than 7 days will be cleaned on the next bin collection.</p>"},{"location":"modules/mod_inbox/#modulesmod_inboxbin_clean_after","title":"<code>modules.mod_inbox.bin_clean_after</code>","text":"<ul> <li>Syntax: non-negative integer, expressed in hours</li> <li>Default: <code>1</code></li> <li>Example: <code>modules.mod_inbox.bin_clean_after = 24</code></li> </ul> <p>How often the automatic garbage collection runs over the bin.</p>"},{"location":"modules/mod_inbox/#modulesmod_inboxdelete_domain_limit","title":"<code>modules.mod_inbox.delete_domain_limit</code>","text":"<ul> <li>Syntax: non-negative integer or the string <code>\"infinity\"</code></li> <li>Default: <code>\"infinity\"</code></li> <li>Example: <code>modules.mod_inbox.delete_domain_limit = 10000</code></li> </ul> <p>Domain deletion can be an expensive operation, as it requires to delete potentially many thousands of records from the DB. By default, the delete operation deletes everything in a transaction, but it might be desired, to handle timeouts and table locks more gracefully, to delete the records in batches. This limit establishes the size of the batch.</p> <p>Note</p> <p>Not supported by MSSQL.</p>"},{"location":"modules/mod_inbox/#modulesmod_inboxreset_markers","title":"<code>modules.mod_inbox.reset_markers</code>","text":"<ul> <li>Syntax: array of strings, out of <code>\"displayed\"</code>, <code>\"received\"</code>, <code>\"acknowledged\"</code></li> <li>Default: <code>[\"displayed\"]</code></li> <li>Example: <code>reset_markers = [\"received\"]</code></li> </ul> <p>List of chat markers that when sent, will reset the unread message counter for a conversation. This works when Chat Markers are enabled on the client side. Setting as empty list (not recommended) means that no chat marker can decrease the counter value.</p>"},{"location":"modules/mod_inbox/#modulesmod_inboxgroupchat","title":"<code>modules.mod_inbox.groupchat</code>","text":"<ul> <li>Syntax: array of strings</li> <li>Default: <code>[\"muclight\"]</code></li> <li>Example: <code>groupchat = [\"muclight\"]</code></li> </ul> <p>The list indicating which groupchats will be included in inbox. Possible values are <code>muclight</code> Multi-User Chat Light or <code>muc</code> Multi-User Chat.</p>"},{"location":"modules/mod_inbox/#modulesmod_inboxaff_changes","title":"<code>modules.mod_inbox.aff_changes</code>","text":"<ul> <li>Syntax: boolean</li> <li>Default: <code>true</code></li> <li>Example: <code>aff_changes = true</code></li> </ul> <p>Use this option when <code>muclight</code> is enabled. Indicates if MUC Light affiliation change messages should be included in the conversation inbox. Only changes that affect the user directly will be stored in their inbox.</p>"},{"location":"modules/mod_inbox/#modulesmod_inboxremove_on_kicked","title":"<code>modules.mod_inbox.remove_on_kicked</code>","text":"<ul> <li>Syntax: boolean</li> <li>Default: <code>true</code></li> <li>Example: <code>remove_on_kicked = true</code></li> </ul> <p>Use this option when <code>muclight</code> is enabled. If true, the inbox conversation is removed for a user when they are removed from the groupchat.</p>"},{"location":"modules/mod_inbox/#modulesmod_inboxiqdisctype","title":"<code>modules.mod_inbox.iqdisc.type</code>","text":"<ul> <li>Syntax: string, one of <code>\"one_queue\"</code>, <code>\"no_queue\"</code>, <code>\"queues\"</code>, <code>\"parallel\"</code></li> <li>Default: <code>\"no_queue\"</code></li> </ul> <p>Strategy to handle incoming stanzas. For details, please refer to IQ processing policies.</p>"},{"location":"modules/mod_inbox/#modulesmod_inboxmax_result_limit","title":"<code>modules.mod_inbox.max_result_limit</code>","text":"<ul> <li>Syntax: the string <code>\"infinity\"</code> or a positive integer</li> <li>Default: <code>\"infinity\"</code></li> <li>Example: <code>modules.mod_inbox.max_result_limit = 100</code></li> </ul> <p>This option sets the maximum size of returned results when quering inbox. It works in the same manner as setting a limit in iq stanza. The special value <code>infinity</code> means no limit.</p>"},{"location":"modules/mod_inbox/#note-about-supported-rdbms","title":"Note about supported RDBMS","text":"<p><code>mod_inbox</code> executes upsert queries, which have different syntax in every supported RDBMS. Inbox currently supports the following DBs:</p> <ul> <li>MySQL via native driver</li> <li>PgSQL via native driver</li> <li>MSSQL via ODBC driver</li> </ul>"},{"location":"modules/mod_inbox/#legacy-muc-support","title":"Legacy MUC support","text":"<p>Inbox comes with support for the legacy MUC as well. It stores all groupchat messages sent to room in each sender's and recipient's inboxes and private messages. Currently it is not possible to configure it to store system messages like subject  or affiliation change.</p>"},{"location":"modules/mod_inbox/#example-configuration","title":"Example configuration","text":"<pre><code>[modules.mod_inbox]\n  backend = \"rdbms_async\"\n  reset_markers = [\"displayed\"]\n  aff_changes = true\n  remove_on_kicked = true\n  groupchat = [\"muclight\"]\n</code></pre>"},{"location":"modules/mod_jingle_sip/","title":"mod_jingle_sip","text":""},{"location":"modules/mod_jingle_sip/#module-description","title":"Module Description","text":"<p>This module enables Jingle to SIP and SIP to Jingle translation. When this module is enabled, MongooseIM will intercept any Jingle IQ set stanza with action:</p> <ul> <li>session-initiate</li> <li>session-terminate</li> <li>session-accept</li> <li>transport-info</li> </ul> <p>and translate it to SIP messages with appropriate SDP content based on the details in the Jingle stanza.</p> <p>The translation back from SIP to Jingle is done for the following SIP requests:</p> <ul> <li><code>INVITE</code></li> <li><code>re-INVITE</code> - <code>INVITE</code> message sent for an accepted session</li> <li><code>CANCEL</code></li> <li><code>BYE</code></li> <li><code>INFO</code></li> </ul> <p>and following responses to the INVITE request:</p> <ul> <li><code>200</code> when the call invite was accepted</li> <li><code>180</code> and <code>183</code> to indicate that the invitation was sent to the device</li> <li><code>486</code> when the call's recipient rejects it</li> <li>from <code>400</code> to <code>600</code> - other error codes indicating session termination</li> </ul>"},{"location":"modules/mod_jingle_sip/#jingle-to-sip-translation","title":"Jingle to SIP translation","text":"<p>The table below summarises the bilateral translation for standard Jingle and SIP messages:</p> Jingle action SIP message comment <code>session-initiate</code> <code>INVITE</code> request <code>session-accept</code> <code>200 OK</code> response <code>session-terminate</code> with reason <code>success</code> <code>BYE</code> request Only for accepted session <code>session-terminate</code> with reason <code>decline</code> <code>CANCEL</code> request When sent by call's initiator <code>session-terminate</code> with reason <code>decline</code> <code>486 Busy Here</code> response When sent by the invite user <code>transport-info</code> <code>INFO</code> request"},{"location":"modules/mod_jingle_sip/#ringing-notification","title":"Ringing notification","text":"<p>Both Jingle and SIP have the <code>ringing</code> notification. It's generated as a response code <code>180 Ringing</code> by a SIP entity when the INVITE is sent to the device. In SIP world a <code>183 Session Progress</code> response code is also generated in some cases. Both <code>180</code> and <code>183</code> codes are translated as <code>session-info</code> Jingle stanza with <code>ringing</code> sub element. MongooseIM generates only <code>180 Ringing</code> response code the <code>INVITE</code> request, if the recipient's online. If the recipient is online, MongooseIM generates the <code>180 Ringing</code> response code to the <code>INVITE</code> request.</p>"},{"location":"modules/mod_jingle_sip/#recipient-unavailable","title":"Recipient unavailable","text":"<p>When MongooseIM receives a SIP <code>INVITE</code> request addressed to an offline user, it replies with a <code>480 Temporarily Unavailable</code> code. The same code is expected from the SIP Proxy when MongooseIM sends the <code>INVITE</code> request.</p>"},{"location":"modules/mod_jingle_sip/#other-error-codes","title":"Other error codes","text":"<p>When an error response to the <code>INVITE</code> request is from the range <code>400</code> to <code>699</code> but not <code>486</code>, MongooseIM will send a Jingle <code>session-terminate</code> stanza to the call's initiator. The stanza has reason <code>general-error</code> with the SIP error code in the <code>sip-error</code> sub element.</p>"},{"location":"modules/mod_jingle_sip/#non-standard-jingle-stanzas-used-by-jinglejs","title":"Non-standard Jingle stanzas used by jingle.js","text":"<p>The following non-standard Jingle stanzas were integrated with Jingle.js:</p> <ul> <li><code>source-remove</code></li> <li><code>source-add</code></li> <li><code>source-update</code></li> </ul> <p>When MongooseIM observes the above Jingle stanzas, it will translate them to a SIP in-dialog <code>INVITE</code> request. In the SDP content of the request, there will be a custom attribute <code>a=jingle-action</code>. The value of the custom attribute is one of the three presented above.</p> <p>Similarly, when MongooseIM gets a SIP in-dialog <code>INVITE</code> request, it will check if there is a custom attribute and use it as the <code>action</code> attribute of the Jingle stanza sent to the user. If there is no such attribute, the action will be set to regular Jingle <code>transport-info</code>.</p>"},{"location":"modules/mod_jingle_sip/#non-standard-jingle-existing-session-initiate-stanza","title":"Non-standard Jingle existing-session-initiate stanza","text":"<p>MongooseIM allows a user to ask for an unanswered <code>session-initiate</code> request. This may be useful in web applications when there is a need to handle the call in a new browser window.</p> <p>In order to get the <code>session-initiate</code>, which was not answered yet, the user can send a <code>get</code> Jingle stanza to self with action set to <code>existing-session-initiate</code>. As a result, MongooseIM will resend the original <code>session-initiate</code> request to the device which sent the query.</p>"},{"location":"modules/mod_jingle_sip/#prerequisites","title":"Prerequisites","text":"<p>By default, MongooseIM is built without SIP support. In order to build the server with SIP support, please use <code>tools/configure</code> script before the release generation. You may either pick only certain drivers (with SIP included) or simply use <code>with-all</code> option. Examples:</p> <pre><code>tools/configure with-mysql with-jingle-sip\ntools/configure with-all without-odbc\ntools/configure with-all\n</code></pre> <p>MongooseIM packages are built with Jingle/SIP support.</p> <p>Warning</p> <p>This module does not support dynamic domains.</p>"},{"location":"modules/mod_jingle_sip/#options","title":"Options","text":""},{"location":"modules/mod_jingle_sip/#modulesmod_jingle_sipbackend","title":"<code>modules.mod_jingle_sip.backend</code>","text":"<ul> <li>Syntax: string: <code>\"mnesia\"</code> or <code>\"cets\"</code></li> <li>Default: <code>\"mnesia\"</code></li> <li>Example: <code>backend = \"cets\"</code></li> </ul> <p>Backend for in-memory data for this module.</p> <p>Warning</p> <p>The corresponding internal database has to be enabled.</p>"},{"location":"modules/mod_jingle_sip/#modulesmod_jingle_sipproxy_host","title":"<code>modules.mod_jingle_sip.proxy_host</code>","text":"<ul> <li>Syntax: string</li> <li>Default: <code>\"localhost\"</code></li> <li>Example: <code>proxy_host = \"localhost\"</code></li> </ul> <p>The name or IP address of the SIP Proxy to which MongooseIM will send SIP messages.</p>"},{"location":"modules/mod_jingle_sip/#modulesmod_jingle_sipproxy_port","title":"<code>modules.mod_jingle_sip.proxy_port</code>","text":"<ul> <li>Syntax: non-negative integer</li> <li>Default: <code>5060</code></li> <li>Example: <code>proxy_port = 5060</code></li> </ul> <p>The port of the SIP Proxy.</p>"},{"location":"modules/mod_jingle_sip/#modulesmod_jingle_siplisten_port","title":"<code>modules.mod_jingle_sip.listen_port</code>","text":"<ul> <li>Syntax: non-negative integer</li> <li>Default: <code>5600</code></li> <li>Example: <code>listen_port = 5600</code></li> </ul> <p>The port on which MongooseIM will listen for incoming SIP messages.</p>"},{"location":"modules/mod_jingle_sip/#modulesmod_jingle_siplocal_host","title":"<code>modules.mod_jingle_sip.local_host</code>","text":"<ul> <li>Syntax: string</li> <li>Default: <code>\"localhost\"</code></li> <li>Example: <code>local_host = \"localhost\"</code></li> </ul> <p>The value used to create SIP URIs (including VIA headers).</p>"},{"location":"modules/mod_jingle_sip/#modulesmod_jingle_sipsdp_origin","title":"<code>modules.mod_jingle_sip.sdp_origin</code>","text":"<ul> <li>Syntax: string</li> <li>Default: <code>\"127.0.0.1\"</code></li> <li>Example: <code>sdp_origin = \"127.0.0.1\"</code></li> </ul> <p>The value of the <code>c=</code> SDP attribute.</p>"},{"location":"modules/mod_jingle_sip/#modulesmod_jingle_siptransport","title":"<code>modules.mod_jingle_sip.transport</code>","text":"<ul> <li>Syntax: string</li> <li>Default: <code>\"udp\"</code></li> <li>Example: <code>transport = \"tcp\"</code></li> </ul> <p>The SIP transport parameter used when calling the proxy.</p>"},{"location":"modules/mod_jingle_sip/#modulesmod_jingle_sipusername_to_phone","title":"<code>modules.mod_jingle_sip.username_to_phone</code>","text":"<ul> <li>Syntax: Array of TOML tables with the following keys: <code>username</code> and <code>phone</code>, and string values</li> <li>Default: <code>[]</code></li> <li>Example: <code>username_to_phone = [{username = \"2000006168\", phone = \"+919177074440\"}]</code></li> </ul> <p>Allows mapping JIDs to phone numbers and vice versa.</p> <p>The simplest configuration is the following:</p> <pre><code>[modules.mod_jingle_sip]\n</code></pre> <p>With this configuration MongooseIM will try sending SIP messages to a SIP proxy listening on localhost and port 5600.</p>"},{"location":"modules/mod_jingle_sip/#use-cases-covered-by-tests","title":"Use cases covered by tests","text":"<p>Currently to test the functionality we use a SIP Proxy mock written in Erlang. The following scenarios are covered by our tests in <code>big_tests/tests/jingle_SUITE.erl</code></p> <p>All the sequence diagrams where generated with textart.io/sequence. The source code is embedded in the markdown file below every diagram inside a comment <code>&lt;!--- ---&gt;</code></p>"},{"location":"modules/mod_jingle_sip/#1-establishing-a-session-with-another-xmpp-user","title":"1. Establishing a session with another XMPP user","text":"<p>With the mod_jingle_sip enabled, all Jingle IQ set stanzas listed above are intercepted, translated to SIP packets and sent to a SIP Proxy. This means that the current implementation will also translate stanzas addressed to a user in the same domain. This allows the SIP entity to control how the call between XMPP users is established. Below there are sequence diagrams showing the communication between XMPP users, MongooseIM and SIP Proxy as in our tests. It's possible that the SIP Proxy or other SIP entity decides that the call needs to be forked and delivered to the user's phone number instead of generating a corresponding call back to MongooseIM.</p>"},{"location":"modules/mod_jingle_sip/#11-signaling-session-initiate-to-other-xmpp-user-via-sip-proxy","title":"1.1 Signaling session-initiate to other XMPP user via SIP Proxy","text":"<pre><code>+-------+                       +-------------+       +-----------+                   +-------+\n| UserA |                       | MongooseIM  |       | SIPProxy  |                   | UserB |\n+-------+                       +-------------+       +-----------+                   +-------+\n    |                                  |                    |                             |\n    | session-initiate to UserB        |                    |                             |\n    |---------------------------------&gt;|                    |                             |\n    | -------------------------\\       |                    |                             |\n    |-| Jingle stanza          |       |                    |                             |\n    | | action:session-initate |       |                    |                             |\n    | | sid: 123               |       |                    |                             |\n    | |------------------------|       | SIP INVITE         |                             |\n    |                                  |-------------------&gt;|                             |\n    |                                  | -------------\\     |                             |\n    |                                  |-| from:UserA |     |                             |\n    |                                  | | to:UserB   |     |                             |\n    |                                  | | sid: 123   |     |                             |\n    |                                  | |------------|     | create new call             |\n    |                                  |                    |----------------             |\n    |                                  |                    |               |             |\n    |                                  |                    |&lt;---------------             |\n    |                                  |                    | ------------------------\\   |\n    |                                  |                    |-| SDP content can be    |   |\n    |                                  |                    | | changed for instance  |   |\n    |                                  |                    | | to inject a transport |   |\n    |                                  |         SIP INVITE | | canidate              |   |\n    |                                  |&lt;-------------------| |-----------------------|   |\n    |                                  |     -------------\\ |                             |\n    |                                  |     | from:UserA |-|                             |\n    |                                  |     | to:UserB   | |                             |\n    |            --------------------\\ |     | sid:456    | |                             |\n    |            | yes, new SID: 456 |-|     |------------| |                             |\n    |            |-------------------| |                    |                             |\n    |                                  |                    |                             |\n    |                                  | session-initiate to UserB                        |\n    |                                  |-------------------------------------------------&gt;|\n    |                                  |                    |                             |\n</code></pre>"},{"location":"modules/mod_jingle_sip/#12-signaling-session-accept-to-other-xmpp-user-via-sip-proxy","title":"1.2 Signaling session-accept to other XMPP user via SIP Proxy","text":"<p>When the other user accepts the call invite sent by the first, the following sequence is executed. This is a continuation of the previous example</p> <pre><code>+-------+                       +-------------+        +-----------+                   +-------+\n| UserA |                       | MongooseIM  |        | SIPProxy  |                   | UserB |\n+-------+                       +-------------+        +-----------+                   +-------+\n    |                                  |                     |                             |\n    |                                  |                     |     session-accpet to UserA |\n    |                                  |&lt;--------------------------------------------------|\n    |                                  |                     |   ------------------------\\ |\n    |                                  |                     |   | Jingle stanza         |-|\n    |                                  |                     |   | action:session-accept | |\n    |                                  |                     |   | sid: 456              | |\n    |                                  | 200 OK              |   |-----------------------| |\n    |                                  |--------------------&gt;|                             |\n    |                                  | --------------\\     |                             |\n    |                                  |-| from: UserA |     |                             |\n    |                                  | | to: UserB   |     |                             |\n    |                                  | | sid: 456    |     |                             |\n    |                                  | |-------------|     | find corresponding call     |\n    |                                  |                     |------------------------     |\n    |                                  |                     |                       |     |\n    |                                  |                     |&lt;-----------------------     |\n    |                                  |                     |                             |\n    |                                  |              200 OK |                             |\n    |                                  |&lt;--------------------|                             |\n    |                                  |     --------------\\ |                             |\n    |                                  |     | from: UserA |-|                             |\n    |                                  |     | to: UserB   | |                             |\n    |                                  |     | sid: 123    | |                             |\n    |        session-accept from UserB |     |-------------| |                             |\n    |&lt;---------------------------------|                     |                             |\n    |                                  |                     |                             |\n</code></pre>"},{"location":"modules/mod_jingle_sip/#13-terminating-a-call","title":"1.3 Terminating a call","text":"<p>Any Jingle session (accepted or not) can be terminated by sending a Jingle stanza with action <code>session-terminate</code> and a reason. In the SIP world it's more complex. See the following examples for more information.</p>"},{"location":"modules/mod_jingle_sip/#131-terminating-an-accepted-call","title":"1.3.1 Terminating an accepted call","text":"<p>The easiest scenario is when the call was accepted as in 1.2. In this case one of the users sends a <code>session-terminate</code> Jingle action with a reason <code>success</code>. This is translated to a SIP <code>BYE</code> request with <code>to</code> and <code>from</code> headers set appropriately - <code>from</code> is the user who wants to terminate the call and <code>to</code> is the user on the other end of the session. The <code>BYE</code> request is sent to the SIP Proxy and then to the other user in a similar way to session acceptance.</p>"},{"location":"modules/mod_jingle_sip/#132-terminating-an-unanswered-call-by-initiator","title":"1.3.2 Terminating an unanswered call by initiator","text":"<p>To terminate the call before it's accepted, the initiator sends a Jingle <code>session-terminate</code> stanza with a reason <code>decline</code>. Then MongooseIM translates this to a SIP <code>CANCEL</code> request which is sent to the SIP Proxy.</p>"},{"location":"modules/mod_jingle_sip/#133-rejecting-the-call","title":"1.3.3 Rejecting the call","text":"<p>When the invitee wants to terminate the call, on the XMPP level this is also a Jingle <code>session-terminate</code> stanza with a reason <code>decline</code>. MongooseIM translates this to SIP <code>486 Busy Here</code> Response (because this is a response to the invite request).</p>"},{"location":"modules/mod_jingle_sip/#2-establishing-a-session-with-a-sip-user","title":"2. Establishing a session with a SIP user","text":"<p>Establishing a session with a SIP user (or a SIP entity) works the same as in the previous section. The only difference is that the SIP Proxy will not call MongooseIM back (as it may happen for call to other XMPP user). Instead the SIP message sent by MongooseIM to SIP Proxy will be delivered directly to the SIP user's device.</p>"},{"location":"modules/mod_keystore/","title":"mod_keystore","text":""},{"location":"modules/mod_keystore/#module-description","title":"Module Description","text":"<p><code>mod_keystore</code> serves as storage for crypto keys - it doesn't implement any XMPP-level protocol. The module can store transient RAM-only keys generated on module startup, stored in memory only, distributed to all cluster members and existing for only as long as the cluster is alive, as well as predefined and pre-shared keys which can be read from a file.</p> <p>RAM-only keys provide better security since they are never written to persistent storage, at the cost of loss in case of a cluster-global failure or restart.</p> <p>As of now <code>mod_auth_token</code> is the only module dependent on <code>mod_keystore</code>.</p> <p>It's crucial to understand the distinction between single-tenant and multi-tenant hosting scenarios. In a multi-tenant server <code>mod_keystore</code> must be configured separately for each virtual XMPP domain to avoid sharing keys between domains!</p>"},{"location":"modules/mod_keystore/#options","title":"Options","text":""},{"location":"modules/mod_keystore/#modulesmod_keystoreram_key_size","title":"<code>modules.mod_keystore.ram_key_size</code>","text":"<ul> <li>Syntax: non-negative integer</li> <li>Default: <code>2048</code></li> <li>Example: <code>ram_key_size = 10000</code></li> </ul> <p>Size to use when generating RAM-only keys (designated by type <code>ram</code>).</p>"},{"location":"modules/mod_keystore/#modulesmod_keystorekeys","title":"<code>modules.mod_keystore.keys</code>","text":"<ul> <li>Syntax: Array of TOML tables with the following keys: <code>\"name\"</code>, <code>\"type\"</code>, <code>\"path\"</code>, and following values: {name = <code>string</code>, type = <code>values: \"file\", \"ram\"</code>, path = <code>string</code>}.</li> <li>Default: <code>[]</code></li> <li>Example: <code>modules.mod_keystore.keys = [{name = \"access_psk\", type = \"file\", path = \"priv/access_psk\"}]</code></li> </ul> <p>Names, types, and optional filepaths of the keys.</p>"},{"location":"modules/mod_keystore/#api","title":"API","text":"<p>The module public API is hook-based:</p> <pre><code>mongoose_hooks:get_key(Domain, [], KeyName).\n</code></pre> <p>An example of usage can be found in mod_auth_token:get_key_for_user/2.</p>"},{"location":"modules/mod_keystore/#example-configuration","title":"Example Configuration","text":"<p>Simple configuration - single tenant (i.e. server hosting just one XMPP domain):</p> <pre><code>[modules.mod_keystore]\n  keys = [{name = \"access_secret\", type = \"ram\"},\n          {name = \"access_psk\", type = \"file\", path = \"priv/access_psk\"},\n          {name = \"provision_psk\", type = \"file\", path = \"priv/provision_psk\"}]\n</code></pre> <p>Multi-tenant setup (<code>mod_keystore</code> configured differently for each virtual XMPP domain):</p> <pre><code>[[host_config]]\n  host = \"first.com\"\n\n  [host_config.modules.mod_keystore]\n    keys = [{name = \"access_secret\", type = \"ram\"},\n            {name = \"access_psk\", type = \"file\", path = \"priv/first_access_psk\"},\n            {name = \"provision_psk\", type = \"file\", path = \"priv/first_provision_psk\"}]\n\n[[host_config]]\n  host = \"second.com\"\n\n  [host_config.modules.mod_keystore]\n    keys = [{name = \"access_secret\", type = \"ram\"},\n            {name = \"access_psk\", type = \"file\", path = \"priv/second_access_psk\"},\n            {name = \"provision_psk\", type = \"file\", path = \"priv/second_provision_psk\"}]\n</code></pre>"},{"location":"modules/mod_last/","title":"mod_last","text":""},{"location":"modules/mod_last/#module-description","title":"Module Description","text":"<p>Implements XEP-0012: Last Activity.</p> <p>Use with caution, as it was observed that a user disconnect spike might result in overloading the database with \"last activity\" writes.</p>"},{"location":"modules/mod_last/#options","title":"Options","text":""},{"location":"modules/mod_last/#modulesmod_lastiqdisctype","title":"<code>modules.mod_last.iqdisc.type</code>","text":"<ul> <li>Syntax: string, one of <code>\"one_queue\"</code>, <code>\"no_queue\"</code>, <code>\"queues\"</code>, <code>\"parallel\"</code></li> <li>Default: <code>\"one_queue\"</code></li> </ul> <p>Strategy to handle incoming stanzas. For details, please refer to IQ processing policies.</p>"},{"location":"modules/mod_last/#modulesmod_lastbackend","title":"<code>modules.mod_last.backend</code>","text":"<ul> <li>Syntax: string, one of <code>\"mnesia\"</code>, <code>\"rdbms\"</code></li> <li>Default: <code>\"mnesia\"</code></li> <li>Example: <code>backend = \"rdbms\"</code></li> </ul> <p>Storage backend.</p>"},{"location":"modules/mod_last/#example-configuration","title":"Example Configuration","text":"<pre><code>[modules.mod_last]\n  backend = \"rdbms\"\n</code></pre>"},{"location":"modules/mod_last/#metrics","title":"Metrics","text":"<p>If you'd like to learn more about metrics in MongooseIM, please visit MongooseIM metrics page.</p> Backend action Description (when it gets incremented) <code>get_last</code> A timestamp is fetched from DB. <code>set_last_info</code> A timestamp is stored in DB."},{"location":"modules/mod_mam/","title":"mod_mam","text":""},{"location":"modules/mod_mam/#module-description","title":"Module Description","text":"<p>This module implements XEP-0313: Message Archive Management. It enables a service to store all user messages for one-to-one chats as well as group chats (MUC, MultiUser Chat). It uses XEP-0059: Result Set Management for paging. It is a highly customizable module, that requires some skill and knowledge to operate properly and efficiently.</p> <p>MongooseIM is compatible with MAM 0.4-1.1.0.</p> <p>Configure MAM with different storage backends:</p> <ul> <li>RDBMS (databases like MySQL, PostgreSQL, MS SQL Server)</li> <li>Cassandra (NoSQL)</li> <li>ElasticSearch (NoSQL)</li> </ul> <p><code>mod_mam</code> is a meta-module that ensures all relevant <code>mod_mam_*</code> modules are loaded and properly configured.</p>"},{"location":"modules/mod_mam/#message-retraction","title":"Message retraction","text":"<p>This module supports XEP-0424: Message Retraction with RDBMS storage backends. When a retraction message is received, the MAM module finds the message to retract and replaces it with a tombstone.</p> <p>The following criteria are used to find the original message:</p> <ul> <li>The <code>id</code> attribute specified in the <code>apply-to</code> element of the retraction message has to be the same as the <code>id</code> attribute of the <code>origin-id</code> (or <code>stanza-id</code> when configured, see below) element of the original message.</li> <li>Both messages need to originate from the same user.</li> <li>Both messages need to be addressed to the same user.</li> </ul> <p>If more than one message matches the criteria, only the most recent one is retracted. To avoid this case, it is recommended to use a unique identifier (UUID) as the origin ID.</p>"},{"location":"modules/mod_mam/#retraction-on-the-stanza-id","title":"Retraction on the stanza-id","text":"<p>This module also implements an extension to the XEP, where it allows to specify the <code>stanza-id</code> as created by the server's MAM, instead of the <code>origin-id</code> that the original XEP-0424 specifies. It announces this capability under the namespace <code>urn:esl:message-retract-by-stanza-id:0</code>. This is specially useful in groupchats where the <code>stanza-id</code> of a message is shared and known for all participants.</p> <p>In this case, to use such functionality, <pre><code>&lt;apply-to id=\"origin-id-1\" xmlns=\"urn:xmpp:fasten:0\"&gt;\n  &lt;retract xmlns='urn:xmpp:message-retract:0'/&gt;\n&lt;/apply-to&gt;\n</code></pre> turns into <pre><code>&lt;apply-to id=\"stanza-id-1\" xmlns=\"urn:xmpp:fasten:0\"&gt;\n  &lt;retract xmlns='urn:esl:message-retract-by-stanza-id:0'/&gt;\n&lt;/apply-to&gt;\n</code></pre> and likewise, the answer would be tagged by the mentioned <code>esl</code> namespace.</p>"},{"location":"modules/mod_mam/#full-text-search","title":"Full Text Search","text":"<p>This module allows message filtering by their text body (if enabled, see Common backend options). This means that an XMPP client, while requesting messages from the archive may not only specify standard form fields (<code>with</code>, <code>start</code>, <code>end</code>), but also <code>full-text-search</code> (of type <code>text-single</code>). If this happens, the client will receive only messages that contain words specified in the request.</p> <p>The exact behaviour, like whether word ordering matters, may depend on the storage backend in use. For now <code>rdbms</code> backend has very limited support for this feature, while <code>cassandra</code> does not support it at all. <code>elasticsearch</code> backend, on the other hand, should provide you with the best results when it comes to text filtering.</p> <p><code>mod_mam_rdbms_arch</code> returns all messages that contain all search words, order of words does not matter. Messages are sorted by timestamp (not by relevance).</p>"},{"location":"modules/mod_mam/#note-on-full-text-search-with-elasticsearch-backend","title":"Note on full text search with ElasticSearch backend","text":"<p>When using ElasticSearch MAM backend, the value provided in <code>full-text-search</code> form field will be passed to ElasticSearch as Simple Search Query. If you're using our official ElasticSearch mappings from <code>priv/elasticsearch</code> then the query analyzer is set to <code>english</code>. Also note that the default separator for the search query is <code>AND</code> (which roughly means that ElasticSearch will search for messages containing all the terms provided in the query string).</p>"},{"location":"modules/mod_mam/#options","title":"Options","text":""},{"location":"modules/mod_mam/#modulesmod_mambackend","title":"<code>modules.mod_mam.backend</code>","text":"<ul> <li>Syntax: string, one of <code>\"rdbms\"</code>, <code>\"cassandra\"</code> and <code>\"elasticsearch\"</code></li> <li>Default: <code>\"rdbms\"</code></li> <li>Example: <code>backend = \"elasticsearch\"</code></li> </ul> <p>Database backend to use.</p>"},{"location":"modules/mod_mam/#modulesmod_mamno_stanzaid_element","title":"<code>modules.mod_mam.no_stanzaid_element</code>","text":"<ul> <li>Syntax: boolean</li> <li>Default: <code>false</code></li> <li>Example: <code>no_stanzaid_element = true</code></li> </ul> <p>Do not add a <code>&lt;stanza-id/&gt;</code> element from MAM v1.1.0.</p>"},{"location":"modules/mod_mam/#modulesmod_mamis_archivable_message","title":"<code>modules.mod_mam.is_archivable_message</code>","text":"<ul> <li>Syntax: non-empty string</li> <li>Default: <code>\"mod_mam_utils\"</code></li> <li>Example: <code>is_archivable_message = \"mod_mam_utils\"</code></li> </ul> <p>Name of a module implementing <code>is_archivable_message/3</code> callback that determines if the message should be archived.</p>"},{"location":"modules/mod_mam/#modulesmod_mamsend_message","title":"<code>modules.mod_mam.send_message</code>","text":"<ul> <li>Syntax: non-empty string</li> <li>Default: <code>\"mod_mam_utils\"</code></li> <li>Example: <code>send_message = \"mod_mam_utils\"</code></li> </ul> <p>Name of a module implementing <code>send_message/4</code> callback that routes a message during lookup operation. Consult with <code>mod_mam_utils:send_message/4</code> code for more information.</p> <p>Check <code>big_tests/tests/mam_send_message_SUITE_data/mam_send_message_example.erl</code> file in the MongooseIM repository for the usage example.</p>"},{"location":"modules/mod_mam/#modulesmod_mamarchive_chat_markers","title":"<code>modules.mod_mam.archive_chat_markers</code>","text":"<ul> <li>Syntax: boolean</li> <li>Default: <code>false</code></li> <li>Example: <code>archive_chat_markers = true</code></li> </ul> <p>If set to true, XEP-0333 chat markers will be archived. See more details here.</p>"},{"location":"modules/mod_mam/#modulesmod_mammessage_retraction","title":"<code>modules.mod_mam.message_retraction</code>","text":"<ul> <li>Syntax: boolean</li> <li>Default: <code>true</code></li> <li>Example: <code>message_retraction = false</code></li> </ul> <p>Enables XEP-0424: Message Retraction. This functionality is currently implemented only for the <code>rdbms</code> backend. Retraction messages are always archived regardless of this option.</p> <p>backend, no_stanzaid_element, is_archivable_message and message_retraction will be applied to both <code>pm</code> and <code>muc</code> (if they are enabled), unless overridden explicitly (see example below).</p>"},{"location":"modules/mod_mam/#enable-one-to-one-message-archive","title":"Enable one-to-one message archive","text":"<p>Archive for one-to-one messages can be enabled in one of two ways:</p> <ul> <li>Specify <code>[mod_mam.pm]</code> section</li> </ul> <pre><code>[modules.mod_mam]\n[modules.mod_mam.pm] # defining this section enables PM support\n</code></pre> <ul> <li>Define any PM related option</li> </ul> <pre><code>[modules.mod_mam]\n  pm.backend = \"rdbms\" # enables PM support and overrides its backend\n</code></pre>"},{"location":"modules/mod_mam/#disable-one-to-one-message-archive","title":"Disable one-to-one message archive","text":"<p>To disable archive for one-to-one messages please remove PM section or any PM related option from the config file.</p>"},{"location":"modules/mod_mam/#pm-specific-options","title":"PM-specific options","text":""},{"location":"modules/mod_mam/#modulesmod_mampmarchive_groupchats","title":"<code>modules.mod_mam.pm.archive_groupchats</code>","text":"<ul> <li>Syntax: boolean</li> <li>Default: <code>false</code></li> <li>Example: <code>modules.mod_mam.pm.archive_groupchats = true</code></li> </ul> <p>When enabled, MAM will store groupchat messages in recipients' individual archives. USE WITH CAUTION! May increase archive size significantly. Disabling this option for existing installation will neither remove such messages from MAM storage, nor will filter out them from search results. Clients can use <code>include-groupchat</code> filter to filter out groupchat messages while querying the archive.</p> <p>Warning</p> <p>The <code>include-groupchat</code> filter doesn't work for Cassandra backend.</p>"},{"location":"modules/mod_mam/#modulesmod_mampmsame_mam_id_for_peers","title":"<code>modules.mod_mam.pm.same_mam_id_for_peers</code>","text":"<ul> <li>Syntax: boolean</li> <li>Default: <code>false</code></li> <li>Example: <code>modules.mod_mam.pm.same_mam_id_for_peers = true</code></li> </ul> <p>When enabled, MAM will set the same MAM ID for both sender and recipient. This can be useful in combination with retraction on the stanza-id. Note that this might not work with clients across federation, as the recipient might not implement the same retraction, nor the same IDs.</p>"},{"location":"modules/mod_mam/#enable-muc-message-archive","title":"Enable MUC message archive","text":"<p>Archive for MUC messages can be enabled in one of two ways:</p> <ul> <li>Specify <code>[mod_mam.muc]</code> section</li> </ul> <pre><code>[modules.mod_mam]\n[modules.mod_mam.muc] # defining this section enables MUC support\n</code></pre> <ul> <li>Define any MUC related option</li> </ul> <pre><code>[modules.mod_mam]\n  muc.backend = \"rdbms\" # enables MUC support and overrides its backend\n</code></pre>"},{"location":"modules/mod_mam/#disable-muc-message-archive","title":"Disable MUC message archive","text":"<p>To disable archive for MUC messages please remove MUC section or any MUC related option from the config file.</p>"},{"location":"modules/mod_mam/#muc-specific-options","title":"MUC-specific options","text":""},{"location":"modules/mod_mam/#modulesmod_mammuchost","title":"<code>modules.mod_mam.muc.host</code>","text":"<ul> <li>Syntax: string</li> <li>Default: <code>\"conference.@HOST@\"</code></li> <li>Example: <code>modules.mod_mam.muc.host = \"conference.@HOST@\"</code></li> </ul> <p>The MUC host that will be archived if MUC archiving is enabled.</p> <p>Warning</p> <p>If you are using MUC Light, make sure this option is set to the MUC Light domain</p>"},{"location":"modules/mod_mam/#example","title":"Example","text":"<p>The example below presents how to override common option for <code>muc</code> module specifically. Please note that you can override all common options (except <code>cache</code>) in a similar way.</p> <pre><code>[modules.mod_mam]\n  backend = \"rdbms\"\n  async_writer.enabled = true # this option enables async writer for RDBMS backend\n  muc.async_writer.enabled = false # disable async writer for MUC archive only\n</code></pre>"},{"location":"modules/mod_mam/#rdbms-backend-options","title":"RDBMS backend options","text":"<p>These options will only have effect when the <code>rdbms</code> backend is used:</p>"},{"location":"modules/mod_mam/#modulesmod_mamcache_users","title":"<code>modules.mod_mam.cache_users</code>","text":"<ul> <li>Syntax: boolean</li> <li>Default: <code>true</code></li> <li>Example: <code>modules.mod_mam.cache_users = false</code></li> </ul> <p>Enables Archive ID to integer mappings cache.</p> <p>If caching is enabled, by default it will spawn its own segmented cache cache, with defaults as in <code>mod_cache_users</code>. To change these defaults, the same config can be accessed within the <code>cache</code> key. To see details about the meaning of each flag, see <code>mod_cache_users</code>. To reuse the cache already created by <code>mod_cache_users</code>, see the option below.</p> <pre><code>modules.mod_mam.cache.strategy\nmodules.mod_mam.cache.time_to_live\nmodules.mod_mam.cache.number_of_segments\n</code></pre>"},{"location":"modules/mod_mam/#modulesmod_mamcachemodule","title":"<code>modules.mod_mam.cache.module</code>","text":"<ul> <li>Syntax: string, one of <code>\"mod_cache_users\"</code> or <code>\"internal\"</code></li> <li>Default: <code>internal</code></li> <li>Example: <code>modules.mod_mam.cache.module = \"mod_cache_users\"</code></li> </ul> <p>Configures which cache to use, either start an internal instance, or reuse the cache created by <code>mod_cache_users</code>, if such module was enabled. Note that if reuse is desired \u2013 that is, <code>cache.module = \"mod_cache_users\"</code>, other cache configuration parameters will be ignored.</p>"},{"location":"modules/mod_mam/#modulesmod_mamasync_writerenabled","title":"<code>modules.mod_mam.async_writer.enabled</code>","text":"<ul> <li>Syntax: boolean</li> <li>Default: <code>true</code></li> <li>Example: <code>modules.mod_mam.async_writer.enabled = false</code></li> </ul> <p>Enables an asynchronous writer that is faster than the synchronous one but harder to debug. The async writers store batches of messages that will be flush on a timeout (see flush_interval) or when the batch reaches a size (see batch_size), so the results of the lookup operations executed right after message routing may be incomplete until the configured time passes or the queue is full.</p>"},{"location":"modules/mod_mam/#modulesmod_mamasync_writerflush_interval","title":"<code>modules.mod_mam.async_writer.flush_interval</code>","text":"<ul> <li>Syntax: non-negative integer</li> <li>Default: <code>2000</code></li> <li>Example: <code>modules.mod_mam.async_writer.flush_interval = 2000</code></li> </ul> <p>How often (in milliseconds) the buffered messages are flushed to DB.</p>"},{"location":"modules/mod_mam/#modulesmod_mamasync_writerbatch_size","title":"<code>modules.mod_mam.async_writer.batch_size</code>","text":"<ul> <li>Syntax: non-negative integer</li> <li>Default: <code>30</code></li> <li>Example: <code>modules.mod_mam.async_writer.batch_size = 30</code></li> </ul> <p>Max size of the batch for an async writer before the queue is considered full and flushed. If the buffer is full, messages are flushed to a database immediately and the flush timer is reset.</p>"},{"location":"modules/mod_mam/#modulesmod_mamasync_writerpool_size","title":"<code>modules.mod_mam.async_writer.pool_size</code>","text":"<ul> <li>Syntax: non-negative integer</li> <li>Default: <code>4 * erlang:system_info(schedulers_online)</code></li> <li>Example: <code>modules.mod_mam.async_writer.pool_size = 32</code></li> </ul> <p>Number of workers in the pool. More than the number of available schedulers is recommended, to minimise lock contention on the message queues, and more than the number of DB workers, to fully utilise the DB capacity. How much more than these two parameters is then a good fine-tuning for specific deployments.</p>"},{"location":"modules/mod_mam/#common-backend-options","title":"Common backend options","text":""},{"location":"modules/mod_mam/#modulesmod_mamuser_prefs_store","title":"<code>modules.mod_mam.user_prefs_store</code>","text":"<ul> <li>Syntax: one of <code>\"rdbms\"</code>, <code>\"cassandra\"</code>, <code>\"mnesia\"</code></li> <li>Default: not set</li> <li>Example: <code>modules.mod_mam.user_prefs_store = \"rdbms\"</code></li> </ul> <p>Leaving this option unset will prevent users from setting their archiving preferences. It will also increase performance. The possible values are:</p> <ul> <li><code>\"rdbms\"</code> (RDBMS backend only) - User archiving preferences saved in RDBMS. Slow and not recommended, but might be used for simplicity (keeping everything in RDBMS).</li> <li><code>\"cassandra\"</code> (Cassandra backend only) - User archiving preferences are saved in Cassandra.</li> <li><code>\"mnesia\"</code> (recommended) - User archiving preferences saved in Mnesia and accessed without transactions. Recommended in most deployments, could be overloaded with lots of users updating their preferences at once. There's a small risk of an inconsistent (in a rather harmless way) state of the preferences table.</li> </ul>"},{"location":"modules/mod_mam/#modulesmod_mamfull_text_search","title":"<code>modules.mod_mam.full_text_search</code>","text":"<ul> <li>Syntax: boolean</li> <li>Default: <code>true</code></li> <li>Example: <code>modules.mod_mam.full_text_search = false</code></li> </ul> <p>Enables full text search in message archive (see Full Text Search paragraph). Please note that the full text search is currently only implemented for <code>\"rdbms\"</code> backend. Also, full text search works only for messages archived while this option is enabled.</p>"},{"location":"modules/mod_mam/#is_archivable_message3-callback","title":"<code>is_archivable_message/3</code> callback","text":"<p><code>is_archivable_message</code> option has to name a module exporting <code>is_archivable_message/3</code> function conforming to the spec:</p> <pre><code>-spec is_archivable_message(Mod :: module(), Dir :: incoming | outgoing,\n                          Packet :: exml:element()) -&gt; boolean().\n</code></pre> <p>Servers SHOULD NOT archive messages that do not have a <code>&lt;body/&gt;</code> child tag. Servers SHOULD NOT archive delayed messages.</p> <p>By default, all messages that hold meaningful content, rather than state changes such as Chat State Notifications, are archived.</p>"},{"location":"modules/mod_mam/#archiving-chat-markers","title":"Archiving chat markers","text":"<p>Archiving chat markers can be enabled by setting <code>archive_chat_markers</code> option to <code>true</code>. However it only works if <code>is_archivable_message</code> callback module is set to <code>mod_mam_utils</code> or isn't set at all.</p> <p>When performing full text search chat markers are treated as if they had empty message body.</p>"},{"location":"modules/mod_mam/#cassandra-backend","title":"Cassandra backend","text":"<p>Please consult Outgoing connections page to learn how to properly configure Cassandra connection pool. By default, <code>mod_mam</code> Cassandra backend requires <code>global</code> pool with <code>default</code> tag.</p>"},{"location":"modules/mod_mam/#elasticsearch-backend","title":"ElasticSearch backend","text":"<p>First, make sure that your ElasticSearch cluster has expected indexes and mappings in place. Please consult Outgoing connections page to learn how to properly configure ElasticSearch connection pool.</p>"},{"location":"modules/mod_mam/#low-level-options","title":"Low-level options","text":"<p>These options allow for fine-grained control over MAM behaviour.</p>"},{"location":"modules/mod_mam/#modulesmod_mamdefault_result_limit","title":"<code>modules.mod_mam.default_result_limit</code>","text":"<ul> <li>Syntax: non-negative integer</li> <li>Default: <code>50</code></li> <li>Example: <code>modules.mod_mam.default_result_limit = 100</code></li> </ul> <p>This sets the default page size of returned results.</p>"},{"location":"modules/mod_mam/#modulesmod_mammax_result_limit","title":"<code>modules.mod_mam.max_result_limit</code>","text":"<ul> <li>Syntax: non-negative integer</li> <li>Default: <code>50</code></li> <li>Example: <code>modules.mod_mam.max_result_limit = 100</code></li> </ul> <p>This sets the maximum page size of returned results.</p>"},{"location":"modules/mod_mam/#modulesmod_mamenforce_simple_queries","title":"<code>modules.mod_mam.enforce_simple_queries</code>","text":"<ul> <li>Syntax: boolean</li> <li>Default: <code>false</code></li> <li>Example: <code>modules.mod_mam.enforce_simple_queries = true</code></li> </ul> <p>This enforces all mam lookups to be \"simple\", i.e., they skip the RSM count. See Message Archive Management extensions.</p>"},{"location":"modules/mod_mam/#modulesmod_mamdelete_domain_limit","title":"<code>modules.mod_mam.delete_domain_limit</code>","text":"<ul> <li>Syntax: non-negative integer or the string <code>\"infinity\"</code></li> <li>Default: <code>\"infinity\"</code></li> <li>Example: <code>modules.mod_mam.delete_domain_limit = 10000</code></li> </ul> <p>Domain deletion can be an expensive operation, as it requires to delete potentially many thousands of records from the DB. By default, the delete operation deletes everything in a transaction, but it might be desired, to handle timeouts and table locks more gracefully, to delete the records in batches. This limit establishes the size of the batch.</p> <p>Note</p> <p>Not supported by MSSQL.</p>"},{"location":"modules/mod_mam/#modulesmod_mamdb_jid_format","title":"<code>modules.mod_mam.db_jid_format</code>","text":"<ul> <li>Syntax: string, one of <code>\"mam_jid_rfc\"</code>, <code>\"mam_jid_rfc_trust\"</code>, <code>\"mam_jid_mini\"</code> or a module implementing <code>mam_jid</code> behaviour</li> <li>Default: <code>\"mam_jid_rfc\"</code> for MUC archive, <code>\"mam_jid_mini\"</code> for PM archive</li> <li>Example: <code>modules.mod_mam.db_jid_format = \"mam_jid_mini\"</code></li> </ul> <p>Sets the internal MAM jid encoder/decoder module for RDBMS.</p> <p>Warning</p> <p>Archive MUST be empty to change this option</p>"},{"location":"modules/mod_mam/#modulesmod_mamdb_message_format","title":"<code>modules.mod_mam.db_message_format</code>","text":"<ul> <li>Syntax: string, one of <code>\"mam_message_xml\"</code>, <code>\"mam_message_eterm\"</code>, <code>\"mam_message_compressed_eterm\"</code> or a module implementing <code>mam_message</code> behaviour</li> <li>Default: <code>\"mam_message_compressed_eterm\"</code> for RDBMS, <code>\"mam_message_xml\"</code> for Cassandra</li> <li>Example: <code>modules.mod_mam.db_message_format = \"mam_message_compressed_eterm\"</code></li> </ul> <p>Sets the internal MAM message encoder/decoder module.</p> <p>Warning</p> <p>Archive MUST be empty to change this option</p>"},{"location":"modules/mod_mam/#modulesmod_mamextra_fin_element","title":"<code>modules.mod_mam.extra_fin_element</code>","text":"<ul> <li>Syntax: string, a module implementing the <code>extra_fin_element/3</code> callback</li> <li>Default: none</li> <li>Example: <code>modules.mod_mam.extra_fin_element = \"example_mod\"</code></li> </ul> <p>This module can be used to add subelements to the <code>&lt;fin&gt;</code> element of the MAM lookup query response. It can be useful to be able to add information to a mam query, that doesn't belong to any specific message but to all of them.</p>"},{"location":"modules/mod_mam/#modulesmod_mamextra_lookup_params","title":"<code>modules.mod_mam.extra_lookup_params</code>","text":"<ul> <li>Syntax: string, a module implementing the <code>extra_lookup_params/2</code> callback</li> <li>Default: none</li> <li>Example: <code>modules.mod_mam.extra_lookup_params = \"example_mod\"</code></li> </ul> <p>This module can be used to add extra lookup parameters to MAM lookup queries.</p>"},{"location":"modules/mod_mam/#example-configuration","title":"Example configuration","text":"<pre><code>[modules.mod_mam]\n  backend = \"rdbms\"\n  no_stanzaid_element = true\n\n  pm.user_prefs_store = \"rdbms\"\n\n  muc.host = \"muc.example.com\"\n  muc.db_message_format = \"mam_message_xml\"\n  muc.async_writer.enabled = false\n  muc.user_prefs_store = \"mnesia\"\n</code></pre>"},{"location":"modules/mod_mam/#metrics","title":"Metrics","text":"<p>If you'd like to learn more about metrics in MongooseIM, please visit MongooseIM metrics page.</p> Name Type Description (when it gets incremented) <code>[HostType, modMamArchiveRemoved]</code> spiral User's entire archive is removed. <code>[HostType, modMamArchived]</code> spiral A message is stored in user's archive. <code>[HostType, modMamDropped]</code> spiral A message couldn't be stored in the DB (and got dropped). <code>[HostType, modMamDroppedIQ]</code> spiral MAM IQ has been dropped due to: high query frequency/invalid syntax or type. <code>[HostType, modMamFlushed]</code> spiral Message was stored in a DB asynchronously. <code>[HostType, modMamForwarded]</code> spiral A message is sent to a client as a part of a MAM query result. <code>[HostType, modMamLookups]</code> spiral A MAM lookup is performed. <code>[HostType, modMamPrefsGets]</code> spiral Archiving preferences have been requested by a client. <code>[HostType, modMamPrefsSets]</code> spiral Archiving preferences have been updated by a client. <code>[HostType, modMucMamArchiveRemoved]</code> spiral Room's entire archive is removed. <code>[HostType, modMucMamArchived]</code> spiral A message is stored in room's archive. <code>[HostType, modMucMamForwarded]</code> spiral A message is sent to a client as a part of a MAM query result from MUC room. <code>[HostType, modMucMamLookups]</code> spiral A MAM lookup in MUC room is performed. <code>[HostType, modMucMamPrefsGets]</code> spiral MUC archiving preferences have been requested by a client. <code>[HostType, modMucMamPrefsSets]</code> spiral MUC archiving preferences have been updated by a client. <code>[HostType, mod_mam_rdbms_async_pool_writer, per_message_flush_time]</code> histogram Average time per message insert measured in an async MAM worker. <code>[HostType, mod_mam_rdbms_async_pool_writer, flush_time]</code> histogram Average time per flush of all buffered messages measured in an async MAM worker. <code>[HostType, mod_mam_muc_rdbms_async_pool_writer, per_message_flush_time]</code> histogram Average time per message insert measured in an async MUC MAM worker. <code>[HostType, mod_mam_muc_rdbms_async_pool_writer, flush_time]</code> histogram Average time per flush of all buffered messages measured in an async MUC MAM worker. Backend action Description (when it gets incremented) <code>lookup</code> A lookup in an archive. <code>archive</code> One message is saved in an archive."},{"location":"modules/mod_muc/","title":"mod_muc","text":""},{"location":"modules/mod_muc/#module-description","title":"Module Description","text":"<p>This module implements XEP-0045: Multi-User Chat (MUC). It's a common XMPP group chat solution. This extension consists of two Erlang modules: <code>mod_muc</code> and <code>mod_muc_room</code>, the latter being the room code itself. Note that only <code>mod_muc</code> needs to be enabled in the configuration file. Also <code>mod_muc_log</code> is a logging submodule.</p>"},{"location":"modules/mod_muc/#options","title":"Options","text":""},{"location":"modules/mod_muc/#modulesmod_muchost","title":"<code>modules.mod_muc.host</code>","text":"<ul> <li>Syntax: string, a valid subdomain</li> <li>Default: <code>\"conference.@HOST@\"</code></li> <li>Example: <code>host = \"group.@HOST@\"</code></li> </ul> <p>Subdomain for MUC service to reside under. <code>@HOST@</code> is replaced with each served domain.</p>"},{"location":"modules/mod_muc/#modulesmod_mucbackend","title":"<code>modules.mod_muc.backend</code>","text":"<ul> <li>Syntax: string, one of <code>\"mnesia\"</code> or <code>\"rdbms\"</code></li> <li>Default: <code>\"mnesia\"</code></li> <li>Example: <code>backend = \"rdbms\"</code></li> </ul> <p>Storage backend to store rooms and settings persistently.</p>"},{"location":"modules/mod_muc/#modulesmod_muconline_backend","title":"<code>modules.mod_muc.online_backend</code>","text":"<ul> <li>Syntax: string, one of <code>\"mnesia\"</code> or <code>\"cets\"</code></li> <li>Default: <code>\"mnesia\"</code></li> <li>Example: <code>online_backend = \"cets\"</code></li> </ul> <p>Backend to use to register and find online rooms. Queried when routing stanzas to the rooms.</p> <p>Warning</p> <p>The corresponding internal database has to be enabled.</p>"},{"location":"modules/mod_muc/#modulesmod_mucaccess","title":"<code>modules.mod_muc.access</code>","text":"<ul> <li>Syntax: non-empty string</li> <li>Default: <code>\"all\"</code></li> <li>Example: <code>access = \"muc\"</code></li> </ul> <p>Access Rule to determine who is allowed to use the MUC service.</p>"},{"location":"modules/mod_muc/#modulesmod_mucaccess_create","title":"<code>modules.mod_muc.access_create</code>","text":"<ul> <li>Syntax: non-empty string</li> <li>Default: <code>\"all\"</code></li> <li>Example: <code>access_create = \"muc_create\"</code></li> </ul> <p>Access Rule to determine who is allowed to create rooms.</p>"},{"location":"modules/mod_muc/#modulesmod_mucaccess_admin","title":"<code>modules.mod_muc.access_admin</code>","text":"<ul> <li>Syntax: non-empty string</li> <li>Default: <code>\"none\"</code></li> <li>Example: <code>access_admin = \"muc_create\"</code></li> </ul> <p>Access Rule to determine who is the administrator in all rooms.</p>"},{"location":"modules/mod_muc/#modulesmod_mucaccess_persistent","title":"<code>modules.mod_muc.access_persistent</code>","text":"<ul> <li>Syntax: non-empty string</li> <li>Default: <code>\"all\"</code></li> <li>Example: <code>access_persistent = \"none\"</code></li> </ul> <p>Access Rule to determine who is allowed to make the rooms persistent. In order to change this parameter, the user must not only match the Access Rule but also be the owner of the room.</p>"},{"location":"modules/mod_muc/#modulesmod_muchistory_size","title":"<code>modules.mod_muc.history_size</code>","text":"<ul> <li>Syntax: non-negative integer</li> <li>Default: <code>20</code></li> <li>Example: <code>history_size = 30</code></li> </ul> <p>Room message history to be kept in RAM. After node restart, the history is lost.</p>"},{"location":"modules/mod_muc/#modulesmod_mucroom_shaper","title":"<code>modules.mod_muc.room_shaper</code>","text":"<ul> <li>Syntax: non-empty string</li> <li>Default: <code>\"none\"</code></li> <li>Example: <code>room_shaper = \"muc_room_shaper\"</code></li> </ul> <p>Limits per-room data throughput with traffic shaper.</p>"},{"location":"modules/mod_muc/#modulesmod_mucmax_room_id","title":"<code>modules.mod_muc.max_room_id</code>","text":"<ul> <li>Syntax: non-negative integer or the string <code>\"infinity\"</code></li> <li>Default: <code>\"infinity\"</code></li> <li>Example: <code>max_room_id = 30</code></li> </ul> <p>Maximum room username length (in JID).</p>"},{"location":"modules/mod_muc/#modulesmod_mucmax_room_name","title":"<code>modules.mod_muc.max_room_name</code>","text":"<ul> <li>Syntax: non-negative integer or the string <code>\"infinity\"</code></li> <li>Default: <code>\"infinity\"</code></li> <li>Example: <code>max_room_name = 30</code></li> </ul> <p>Maximum room name length.</p>"},{"location":"modules/mod_muc/#modulesmod_mucmax_room_desc","title":"<code>modules.mod_muc.max_room_desc</code>","text":"<ul> <li>Syntax: non-negative integer or the string <code>\"infinity\"</code></li> <li>Default: <code>\"infinity\"</code></li> <li>Example: <code>max_room_desc = 140</code></li> </ul> <p>Maximum room description length.</p>"},{"location":"modules/mod_muc/#modulesmod_mucmin_message_interval","title":"<code>modules.mod_muc.min_message_interval</code>","text":"<ul> <li>Syntax: non-negative integer</li> <li>Default: <code>0</code></li> <li>Example: <code>min_message_interval = 1</code></li> </ul> <p>Minimal interval (in seconds) between messages processed by the room.</p>"},{"location":"modules/mod_muc/#modulesmod_mucmin_presence_interval","title":"<code>modules.mod_muc.min_presence_interval</code>","text":"<ul> <li>Syntax: non-negative integer</li> <li>Default: <code>0</code></li> <li>Example: <code>min_presence_interval = 1</code></li> </ul> <p>Minimal interval (in seconds) between presences processed by the room.</p>"},{"location":"modules/mod_muc/#modulesmod_mucmax_users","title":"<code>modules.mod_muc.max_users</code>","text":"<ul> <li>Syntax: positive integer</li> <li>Default: <code>200</code></li> <li>Example: <code>max_users = 100</code></li> </ul> <p>Absolute maximum user count per room on the node.</p>"},{"location":"modules/mod_muc/#modulesmod_mucmax_users_admin_threshold","title":"<code>modules.mod_muc.max_users_admin_threshold</code>","text":"<ul> <li>Syntax: positive integer</li> <li>Default: <code>5</code></li> <li>Example: <code>max_users_admin_threshold = 10</code></li> </ul> <p>When the server checks if a new user can join a room and they are an admin, <code>max_users_admin_threshold</code> is added to <code>max_users</code> during occupant limit check.</p>"},{"location":"modules/mod_muc/#modulesmod_mucuser_message_shaper","title":"<code>modules.mod_muc.user_message_shaper</code>","text":"<ul> <li>Syntax: non-empty string</li> <li>Default: <code>\"none\"</code></li> <li>Example: <code>user_message_shaper = \"muc_user_msg_shaper\"</code></li> </ul> <p>Shaper for user messages processed by a room (global for the room).</p>"},{"location":"modules/mod_muc/#modulesmod_mucuser_presence_shaper","title":"<code>modules.mod_muc.user_presence_shaper</code>","text":"<ul> <li>Syntax: non-empty string</li> <li>Default: <code>\"none\"</code></li> <li>Example: <code>user_presence_shaper = \"muc_user_presence_shaper\"</code></li> </ul> <p>Shaper for user presences processed by a room (global for the room).</p>"},{"location":"modules/mod_muc/#modulesmod_mucmax_user_conferences","title":"<code>modules.mod_muc.max_user_conferences</code>","text":"<ul> <li>Syntax: non-negative integer</li> <li>Default: <code>10</code></li> <li>Example: <code>max_user_conferences = 5</code></li> </ul> <p>Specifies the number of rooms that a user can occupy simultaneously.</p>"},{"location":"modules/mod_muc/#modulesmod_muchttp_auth_pool","title":"<code>modules.mod_muc.http_auth_pool</code>","text":"<ul> <li>Syntax: non-empty string</li> <li>Default: <code>\"none\"</code></li> <li>Example: <code>http_auth_pool = \"external_auth\"</code></li> </ul> <p>If an external HTTP service is chosen to check passwords for password-protected rooms, this option specifies the HTTP pool name to use (see External HTTP Authentication below).</p>"},{"location":"modules/mod_muc/#modulesmod_mucload_permanent_rooms_at_startup","title":"<code>modules.mod_muc.load_permanent_rooms_at_startup</code>","text":"<ul> <li>Syntax: boolean</li> <li>Default: <code>false</code></li> <li>Example: <code>load_permanent_rooms_at_startup = true</code></li> </ul> <p>Load all rooms at startup. Because it can be unsafe when there are many rooms, it is disabled by default.</p>"},{"location":"modules/mod_muc/#modulesmod_muchibernate_timeout","title":"<code>modules.mod_muc.hibernate_timeout</code>","text":"<ul> <li>Syntax: non-negative integer or the string <code>\"infinity\"</code></li> <li>Default: <code>90000</code> (milliseconds, 90 seconds)</li> <li>Example: <code>hibernate_timeout = 60000</code></li> </ul> <p>Timeout (in milliseconds) defining the inactivity period after which the room's process should be hibernated.</p>"},{"location":"modules/mod_muc/#modulesmod_muchibernated_room_check_interval","title":"<code>modules.mod_muc.hibernated_room_check_interval</code>","text":"<ul> <li>Syntax: non-negative integer or the string <code>\"infinity\"</code></li> <li>Default: <code>\"infinity\"</code></li> <li>Example: <code>hibernated_room_check_interval = 120000</code></li> </ul> <p>Interval defining how often the hibernated rooms will be checked (a timer is global for a node).</p>"},{"location":"modules/mod_muc/#modulesmod_muchibernated_room_timeout","title":"<code>modules.mod_muc.hibernated_room_timeout</code>","text":"<ul> <li>Syntax: non-negative integer or the string <code>\"infinity\"</code></li> <li>Default: <code>\"infinity\"</code></li> <li>Example: <code>hibernated_room_timeout = 120000</code></li> </ul> <p>A time after which a hibernated room is stopped (deeply hibernated).  See MUC performance optimisation.</p>"},{"location":"modules/mod_muc/#modulesmod_mucdefault_room","title":"<code>modules.mod_muc.default_room</code>","text":"<ul> <li>Syntax: A TOML table of options described below</li> <li>Default: Default room options</li> <li>Example:</li> </ul> <pre><code>  [modules.mod_muc.default_room]\n    password_protected = true\n    description = \"An example description.\"\n\n    [[modules.mod_muc.default_room.affiliations]]\n        user = \"alice\"\n        server = \"localhost\"\n        resource = \"resource1\"\n        affiliation = \"member\"\n</code></pre> <p>or:</p> <pre><code>  default_room.password_protected = true\n  default_room.description = \"An example description.\"\n\n  [[modules.mod_muc.default_room.affiliations]]\n    user = \"alice\"\n    server = \"localhost\"\n    resource = \"resource1\"\n    affiliation = \"member\"\n</code></pre> <p>Available room configuration options to be overridden in the initial state:</p> <ul> <li> <p><code>modules.mod_muc.default_room.title</code></p> <ul> <li>Syntax: string</li> <li>Default: <code>\"\"</code></li> <li>Example: <code>title = \"example_title\"</code> </li> </ul> <p>Room title, short free text.</p> </li> <li> <p><code>modules.mod_muc.default_room.description</code></p> <ul> <li>Syntax: string</li> <li>Default: <code>\"\"</code></li> <li>Example: <code>description = \"An example description.\"</code> </li> </ul> <p>Room description, long free text.</p> </li> <li> <p><code>modules.mod_muc.default_room.allow_change_subj</code> </p> <ul> <li>Syntax: boolean</li> <li>Default: <code>true</code></li> <li>Example: <code>allow_change_subj = false</code> </li> </ul> <p>Allow all occupants to change the room subject.</p> </li> <li> <p><code>modules.mod_muc.default_room.allow_query_users</code> </p> <ul> <li>Syntax: boolean</li> <li>Default: <code>true</code></li> <li>Example: <code>allow_query_users = false</code></li> </ul> <p>Allow occupants to send IQ queries to other occupants.</p> </li> <li> <p><code>modules.mod_muc.default_room.allow_private_messages</code> </p> <ul> <li>Syntax: boolean</li> <li>Default: <code>true</code></li> <li>Example: <code>allow_private_messages = false</code></li> </ul> <p>Allow private messaging between occupants.</p> </li> <li> <p><code>modules.mod_muc.default_room.allow_visitor_status</code> </p> <ul> <li>Syntax: boolean</li> <li>Default: <code>true</code></li> <li>Example: <code>allow_visitor_status = false</code></li> </ul> <p>Allow occupants to use text statuses in presences. When disabled, text is removed by the room before broadcasting.</p> </li> <li> <p><code>modules.mod_muc.default_room.allow_visitor_nickchange</code> </p> <ul> <li>Syntax: boolean</li> <li>Default: <code>true</code></li> <li>Example: <code>allow_visitor_nickchange = false</code></li> </ul> <p>Allow occupants to change nicknames.</p> </li> <li> <p><code>modules.mod_muc.default_room.public</code> </p> <ul> <li>Syntax: boolean</li> <li>Default: <code>true</code></li> <li>Example: <code>public = false</code></li> </ul> <p>Room is included in the list available via Service Discovery.</p> </li> <li> <p><code>modules.mod_muc.default_room.public_list</code> </p> <ul> <li>Syntax: boolean</li> <li>Default: <code>true</code></li> <li>Example: <code>public_list = false</code></li> </ul> <p>Member list can be fetched by non-members.</p> </li> <li> <p><code>modules.mod_muc.default_room.persistent</code> </p> <ul> <li>Syntax: boolean</li> <li>Default: <code>false</code></li> <li>Example: <code>persistent = true</code></li> </ul> <p>Room will be stored in DB and survive even when the last occupant leaves or the node is restarted.</p> </li> <li> <p><code>modules.mod_muc.default_room.moderated</code> </p> <ul> <li>Syntax: boolean</li> <li>Default: <code>true</code></li> <li>Example: <code>moderated = false</code></li> </ul> <p>Only occupants with a \"voice\" can send group chat messages.</p> </li> <li> <p><code>modules.mod_muc.default_room.members_by_default</code></p> <ul> <li>Syntax: boolean</li> <li>Default: <code>true</code></li> <li>Example: <code>members_by_default = false</code></li> </ul> <p>All new occupants are members by default, unless they have a different affiliation assigned.</p> </li> <li> <p><code>modules.mod_muc.default_room.members_only</code> </p> <ul> <li>Syntax: boolean</li> <li>Default: <code>false</code></li> <li>Example: <code>members_only = true</code></li> </ul> <p>Only users with a member affiliation can join the room.</p> </li> <li> <p><code>modules.mod_muc.default_room.allow_user_invites</code> </p> <ul> <li>Syntax: boolean</li> <li>Default: <code>false</code></li> <li>Example: <code>allow_user_invites = true</code></li> </ul> <p>Allow ordinary members to send mediated invitations.</p> </li> <li> <p><code>modules.mod_muc.default_room.allow_multiple_sessions</code> </p> <ul> <li>Syntax: boolean</li> <li>Default: <code>false</code></li> <li>Example: <code>allow_multiple_sessions = true</code></li> </ul> <p>Allow multiple user session to use the same nick.</p> </li> <li> <p><code>modules.mod_muc.default_room.password_protected</code> </p> <ul> <li>Syntax: boolean</li> <li>Default: <code>false</code></li> <li>Example: <code>password_protected = true</code></li> </ul> <p>Room is protected with a password.</p> </li> <li> <p><code>modules.mod_muc.default_room.password</code> </p> <ul> <li>Syntax: string</li> <li>Default: <code>\"\"</code></li> <li>Example: <code>password = \"secret\"</code></li> </ul> <p>Room password is required upon joining. This option has no effect when <code>password_protected</code> is <code>false</code>.</p> </li> <li> <p><code>modules.mod_muc.default_room.anonymous</code> </p> <ul> <li>Syntax: boolean</li> <li>Default: <code>true</code></li> <li>Example: <code>anonymous = false</code></li> </ul> <p>Room is anonymous, meaning occupants can't see each others real JIDs, except for the room moderators.</p> </li> <li> <p><code>modules.mod_muc.default_room.max_users</code> </p> <ul> <li>Syntax: positive integer</li> <li>Default: <code>200</code></li> <li>Example: <code>max_users = 100</code></li> </ul> <p>Maximum user count per room. Admins and the room owner are not affected.</p> </li> <li> <p><code>modules.mod_muc.default_room.logging</code></p> <ul> <li>Syntax: boolean</li> <li>Default: <code>false</code></li> <li>Example: <code>logging = true</code></li> </ul> <p>Enables logging of room events (messages, presences) to a file on the disk. Uses <code>mod_muc_log</code>.</p> </li> <li> <p><code>modules.mod_muc.default_room.maygetmemberlist</code> </p> <ul> <li>Syntax: array of non-empty strings</li> <li>Default: <code>[]</code></li> <li>Example: <code>maygetmemberlist = [\"moderator\"]</code></li> </ul> <p>An array of roles and/or privileges that enable retrieving the room's member list.</p> </li> <li> <p><code>modules.mod_muc.default_room.affiliations</code> </p> <ul> <li>Syntax: array of tables with keys:<ul> <li><code>user</code> - non-empty string,</li> <li><code>server</code> - string, a valid domain,</li> <li><code>resource</code> - string,</li> <li><code>affiliation</code> - non-empty string</li> </ul> </li> <li>Default: <code>[]</code></li> <li>Example:</li> </ul> </li> </ul> <pre><code>[[modules.mod_muc.default_room.affiliations]]\n  user = \"alice\"\n  server = \"localhost\"\n  resource = \"resource1\"\n  affiliation = \"member\"\n\n[[modules.mod_muc.default_room.affiliations]]\n  user = \"bob\"\n  server = \"localhost\"\n  resource = \"resource2\"\n  affiliation = \"owner\"\n</code></pre> <p>This is the default list of affiliations set for every new room.</p> <ul> <li> <p><code>modules.mod_muc.default_room.subject</code> </p> <ul> <li>Syntax: string</li> <li>Default: <code>\"\"</code></li> <li>Example: <code>subject = \"Lambda days\"</code></li> </ul> <p>A default subject for new room.</p> </li> <li> <p><code>modules.mod_muc.default_room.subject_author</code></p> <ul> <li>Syntax: string</li> <li>Default: <code>\"\"</code></li> <li>Example: <code>subject_author = \"Alice\"</code></li> </ul> <p>A nick name of the default subject's author.</p> </li> </ul>"},{"location":"modules/mod_muc/#example-configuration","title":"Example Configuration","text":"<pre><code>[modules.mod_muc]\n  host = \"muc.example.com\"\n  access = \"muc\"\n  access_create = \"muc_create\"\n  http_auth_pool = \"my_auth_pool\"\n  default_room.password_protected = true\n\n  [[modules.mod_muc.default_room.affiliations]]\n    user = \"alice\"\n    server = \"localhost\"\n    resource = \"resource1\"\n    affiliation = \"member\"\n\n  [[modules.mod_muc.default_room.affiliations]]\n    user = \"bob\"\n    server = \"localhost\"\n    resource = \"resource2\"\n    affiliation = \"owner\"\n</code></pre>"},{"location":"modules/mod_muc/#performance-optimisations","title":"Performance optimisations","text":"<p>Each room is represented by an Erlang process with its own state and can consume memory even if it's not used. In large installations with many rooms, this might cause performance issues. To address that problem MongooseIM has 2 levels of MUC rooms memory optimisations.</p>"},{"location":"modules/mod_muc/#rooms-process-hibernation","title":"Room's process hibernation","text":"<p>By default the room's process is hibernated by the Erlang VM 90 seconds after the last activity. This timeout can be modified by <code>hibernate_timeout</code> option.</p>"},{"location":"modules/mod_muc/#room-deep-hibernation","title":"Room deep hibernation","text":"<p>MongooseIM introduces an additional option of deep hibernation for unused rooms. This optimisation works only for persistent rooms as only these can be restored on demand. The improvement works as follows: 1. All room processes are traversed at a chosen <code>hibernated_room_check_interval</code>. 1. If a <code>hibernated_room_timeout</code> is exceeded, a \"stop\" signal is sent to a unused room. 1. The room's process is stopped only if there are no online users or if the only one is its owner. If the owner is online, a presence of a type unavailable is sent to it indicating that the room's process is being terminated.</p> <p>The room's process can be recreated on demand, for example when a presence sent to it, or the owner wants to add more users to the room.</p>"},{"location":"modules/mod_muc/#external-http-authentication","title":"External HTTP Authentication","text":"<p>MUC rooms can be protected by a password that is set by the room owner. Note that MongooseIM supports another custom solution, where each attempt to enter or create a room requires the password to be checked by an external HTTP service. To enable this option, you need to:</p> <ul> <li>Configure an HTTP connection pool.</li> <li>Set the name of the connection pool as the value of the <code>http_auth_pool</code> option of <code>mod_muc</code>.</li> <li>Enable the <code>password_protected</code> default room option (without setting the password itself).</li> </ul> <p>Whenever a user tries to enter or create a room, the server will receive a GET request to the <code>check_password</code> path. It should return a 200 response with a JSON object <code>{\"code\": Code, \"msg\": Message}</code> in the response body. If the server returns something else, an error presence will be sent back to the client.</p> <ul> <li><code>Code</code> is the status code: 0 indicates a successful authentication, any other value means the authentication failed.</li> <li><code>Message</code> is a string containing the message to be sent back to the XMPP client indicating the reason for a failed authentication.  When authentication succeeds it is ignored and can contain anything ( eg. the string <code>\"OK\"</code>).</li> </ul> <p>Example:</p> <pre><code>[outgoing_pools.http.my_auth_pool]\n  strategy = \"available_worker\"\n  connection.host = \"http://my_server:8000\"\n\n[modules.mod_muc]\n  host = \"muc.example.com\"\n  access = \"muc\"\n  access_create = \"muc_create\"\n  http_auth_pool = \"my_auth_pool\"\n  default_room.password_protected = true\n</code></pre>"},{"location":"modules/mod_muc/#metrics","title":"Metrics","text":"<p>If you'd like to learn more about metrics in MongooseIM, please visit MongooseIM metrics page.</p> Name Type Description (when it gets incremented) <code>[global, mod_muc, deep_hibernations]</code> spiral A room process is stopped (applies only to persistent rooms). <code>[global, mod_muc, process_recreations]</code> spiral A room process is recreated from a persisted state. <code>[global, mod_muc, hibernations]</code> spiral A room process becomes hibernated (garbage collected and put in wait state). <code>[global, mod_muc, hibernated_rooms]</code> value How many rooms are in hibernated state. Does not include rooms in \"deep hibernation\". <code>[global, mod_muc, online_rooms]</code> value How many rooms have running processes (includes rooms in a hibernated state)."},{"location":"modules/mod_muc_light/","title":"mod_muc_light","text":""},{"location":"modules/mod_muc_light/#module-description","title":"Module Description","text":"<p>This module implements Multi-User Chat Light. It's an experimental XMPP group chat solution. This extension consists of several modules but only <code>mod_muc_light</code> needs to be enabled in the config file.</p>"},{"location":"modules/mod_muc_light/#options","title":"Options","text":""},{"location":"modules/mod_muc_light/#modulesmod_muc_lighthost","title":"<code>modules.mod_muc_light.host</code>","text":"<ul> <li>Syntax: string, a valid subdomain</li> <li>Default: <code>\"muclight.@HOST@\"</code></li> <li>Example: <code>host = \"group.@HOST@\"</code></li> </ul> <p>Domain for the MUC Light service to reside under. <code>@HOST@</code> is replaced with each served domain.</p>"},{"location":"modules/mod_muc_light/#modulesmod_muc_lightbackend","title":"<code>modules.mod_muc_light.backend</code>","text":"<ul> <li>Syntax: string, one of <code>\"mnesia\"</code>, <code>\"rdbms\"</code></li> <li>Default: <code>\"mnesia\"</code></li> <li>Example: <code>backend = \"rdbms\"</code></li> </ul> <p>Database backend to use. </p>"},{"location":"modules/mod_muc_light/#modulesmod_muc_lightcache_affs","title":"<code>modules.mod_muc_light.cache_affs.*</code>","text":"<ul> <li>Syntax: TOML section</li> <li>Default: not declared</li> <li>Example: <code>[modules.mod_muc_light.cache_affs]</code></li> </ul> <p>Enables caching affiliations for rooms, this has the advantage that the list of affiliations of a given room is stored locally, instead of being fetched from the DB on each message delivered to a room. On the other hand, in an edge case of a network split when the affiliations of a room are changed, there's a risk of inconsistencies for the cache having values in one node not yet synchronised with the other.</p> <p>If caching is enabled, it will spawn its own segmented cache cache. To configure the cache parameters, the same config can be stored under the <code>cache_affs</code> section. To see details about the meaning of each flag, see <code>mod_cache_users</code>.</p> <pre><code>modules.mod_muc_light.cache_affs.strategy\nmodules.mod_muc_light.cache_affs.time_to_live\nmodules.mod_muc_light.cache_affs.number_of_segments\n</code></pre>"},{"location":"modules/mod_muc_light/#modulesmod_muc_lightequal_occupants","title":"<code>modules.mod_muc_light.equal_occupants</code>","text":"<ul> <li>Syntax: boolean</li> <li>Default: <code>false</code></li> <li>Example: <code>equal_occupants = true</code></li> </ul> <p>When enabled, MUC Light rooms won't have owners.  It means that every occupant will be a <code>member</code>, even the room creator.</p> <p>Warning</p> <p>This option does not implicitly set <code>all_can_invite</code> to <code>true</code>.  If that option is set to <code>false</code>, nobody will be able to join the room after the initial creation request.</p>"},{"location":"modules/mod_muc_light/#modulesmod_muc_lightlegacy_mode","title":"<code>modules.mod_muc_light.legacy_mode</code>","text":"<ul> <li>Syntax: boolean</li> <li>Default: <code>false</code></li> <li>Example: <code>legacy_mode = true</code></li> </ul> <p>Enables XEP-0045 compatibility mode.  It allows using a subset of classic MUC stanzas with some MUC Light functions limited.</p>"},{"location":"modules/mod_muc_light/#modulesmod_muc_lightrooms_per_user","title":"<code>modules.mod_muc_light.rooms_per_user</code>","text":"<ul> <li>Syntax: positive integer or the string <code>\"infinity\"</code></li> <li>Default: <code>\"infinity\"</code></li> <li>Example: <code>rooms_per_user = 100</code></li> </ul> <p>Specifies a cap on a number of rooms a user can occupy.</p> <p>Warning</p> <p>Setting such a limit may trigger expensive DB queries for every occupant addition.</p>"},{"location":"modules/mod_muc_light/#modulesmod_muc_lightblocking","title":"<code>modules.mod_muc_light.blocking</code>","text":"<ul> <li>Syntax: boolean</li> <li>Default: <code>true</code></li> <li>Example: <code>blocking = false</code></li> </ul> <p>Blocking feature enabled/disabled.</p>"},{"location":"modules/mod_muc_light/#modulesmod_muc_lightall_can_configure","title":"<code>modules.mod_muc_light.all_can_configure</code>","text":"<ul> <li>Syntax: boolean</li> <li>Default: <code>false</code></li> <li>Example: <code>all_can_configure = true</code></li> </ul> <p>When enabled, all room occupants can change all configuration options.  If disabled, everyone can still change the room subject.</p>"},{"location":"modules/mod_muc_light/#modulesmod_muc_lightall_can_invite","title":"<code>modules.mod_muc_light.all_can_invite</code>","text":"<ul> <li>Syntax: boolean</li> <li>Default: <code>false</code></li> <li>Example: <code>all_can_invite = true</code></li> </ul> <p>When enabled, all room occupants can add new occupants to the room. Occupants added by <code>members</code> become <code>members</code> as well.</p>"},{"location":"modules/mod_muc_light/#modulesmod_muc_lightmax_occupants","title":"<code>modules.mod_muc_light.max_occupants</code>","text":"<ul> <li>Syntax: positive integer or the string <code>\"infinity\"</code></li> <li>Default: <code>\"infinity\"</code></li> <li>Example: <code>max_occupants = 100</code></li> </ul> <p>Specifies a cap on the occupant count per room.</p>"},{"location":"modules/mod_muc_light/#modulesmod_muc_lightrooms_per_page","title":"<code>modules.mod_muc_light.rooms_per_page</code>","text":"<ul> <li>Syntax: positive integer or the string <code>\"infinity\"</code></li> <li>Default: <code>10</code></li> <li>Example: <code>rooms_per_page = 100</code></li> </ul> <p>Specifies maximal number of rooms returned for a single Disco request.</p>"},{"location":"modules/mod_muc_light/#modulesmod_muc_lightrooms_in_rosters","title":"<code>modules.mod_muc_light.rooms_in_rosters</code>","text":"<ul> <li>Syntax: boolean</li> <li>Default: <code>false</code></li> <li>Example: <code>rooms_in_rosters = true</code></li> </ul> <p>When enabled, rooms the user occupies are included in their roster.</p>"},{"location":"modules/mod_muc_light/#modulesmod_muc_lightconfig_schema","title":"<code>modules.mod_muc_light.config_schema</code>","text":"<ul> <li>Syntax: an array of <code>config_schema</code> items, as described below</li> <li>Default:</li> </ul> <pre><code>        [[modules.mod_muc_light.config_schema]]\n          field = \"roomname\"\n          string_value = \"Untitled\"\n\n        [[modules.mod_muc_light.config_schema]]\n          field = \"subject\"\n          string_value = \"\"\n</code></pre> <ul> <li>Example:</li> </ul> <pre><code>        [[modules.mod_muc_light.config_schema]]\n          field = \"display-lines\"\n          integer_value = 30\n          internal_key = \"display_lines\"\n</code></pre> <p>Defines fields allowed in the room configuration.</p> <p>Each <code>config_schema</code> item is a TOML table with the following keys:</p> <ul> <li><code>field</code> - mandatory, non-empty string - field name.</li> <li><code>string_value</code>, <code>integer_value</code>, <code>float_value</code> - exactly one of them has to be present, depending on the type of the field:<ul> <li><code>string_value</code> - string,</li> <li><code>integer_value</code> - integer,</li> <li><code>float_value</code> - floating-point number.</li> </ul> </li> <li><code>internal_key</code> - optional, non-empty string - field name used in the internal representation, useful only for debugging or custom applications. By default it is the same as <code>field</code>.</li> </ul> <p>Warning</p> <p>Lack of the <code>roomname</code> field will cause room names in Disco results and Roster items be set to the room username.</p>"},{"location":"modules/mod_muc_light/#example-configuration","title":"Example Configuration","text":"<pre><code>[modules.mod_muc_light]\n  host = \"muclight.example.com\"\n  equal_occupants = true\n  legacy_mode = true\n  rooms_per_user = 10\n  blocking = false\n  all_can_configure = true\n  all_can_invite = true\n  max_occupants = 50\n  rooms_per_page = 5\n  rooms_in_rosters = true\n\n  [modules.mod_muc_light.cache_affs]\n    time_to_live = 60\n\n  [[modules.mod_muc_light.config_schema]] \n    field = \"roomname\"\n    string_value = \"The Room\"\n\n  [[modules.mod_muc_light.config_schema]] \n    field = \"display-lines\"\n    integer_value = 30\n    internal_key = \"display_lines\"\n</code></pre>"},{"location":"modules/mod_muc_light/#metrics","title":"Metrics","text":"<p>If you'd like to learn more about metrics in MongooseIM, please visit MongooseIM metrics page.</p> Backend action Description (when it gets incremented) <code>create_room</code> A new room is stored in a DB. <code>destroy_room</code> Room data is removed from a DB. <code>room_exists</code> A room existence is checked. <code>get_user_rooms</code> A list of rooms the user is a participant of is retrieved from a DB. <code>remove_user</code> All MUC Light related user data is removed from a DB. <code>get_config</code> A room config is retrieved from a DB. <code>set_config</code> A room config is updated in a DB. <code>get_blocking</code> Blocking data is fetched from a DB. <code>set_blocking</code> Blocking data is updated in a DB. <code>get_aff_users</code> An affiliated users list is fetched from a DB. <code>modify_aff_users</code> Affiliations in a room are updated in a DB."},{"location":"modules/mod_muc_log/","title":"mod_muc_log","text":""},{"location":"modules/mod_muc_log/#module-description","title":"Module Description","text":"<p>A logging submodule for mod_muc.  Is must be explicitly configured to work.  It writes room-related information (configuration) and events (messages, presences) to files on the disk.</p>"},{"location":"modules/mod_muc_log/#options","title":"Options","text":""},{"location":"modules/mod_muc_log/#modulesmod_muc_logoutdir","title":"<code>modules.mod_muc_log.outdir</code>","text":"<ul> <li>Syntax: string</li> <li>Default: <code>\"www/muc\"</code></li> <li>Example: <code>outdir = \"www/muc\"</code></li> </ul> <p>Filesystem directory where the files are stored.</p>"},{"location":"modules/mod_muc_log/#modulesmod_muc_logaccess_log","title":"<code>modules.mod_muc_log.access_log</code>","text":"<ul> <li>Syntax: non-empty string</li> <li>Default: <code>\"muc_admin\"</code></li> <li>Example: <code>access_log = \"muc_admin\"</code></li> </ul> <p>ACL that defines who can enable/disable logging for specific rooms.</p>"},{"location":"modules/mod_muc_log/#modulesmod_muc_logdirtype","title":"<code>modules.mod_muc_log.dirtype</code>","text":"<ul> <li>Syntax: string, one of <code>\"subdirs\"</code>, <code>\"plain\"</code></li> <li>Default: <code>\"subdirs\"</code></li> <li>Example: <code>dirtype = \"subdirs\"</code></li> </ul> <p>Specifies the log directory structure:</p> <ul> <li><code>\"subdirs\"</code>: Module will use the following directory structure <code>[Logs root]/[dirname]/YYYY/MM/</code> with file names being <code>DD.[extension]</code>.</li> <li><code>\"plain\"</code>: Module will use the following directory structure <code>[Logs root]/[dirname]/</code> with file names being <code>YYYY-MM-DD.[extension]</code>.</li> </ul>"},{"location":"modules/mod_muc_log/#modulesmod_muc_logdirname","title":"<code>modules.mod_muc_log.dirname</code>","text":"<ul> <li>Syntax: string, one of <code>\"room_jid\"</code>, <code>\"room_name\"</code></li> <li>Default: <code>\"room_jid\"</code></li> <li>Example: <code>dirname = \"room_jid\"</code></li> </ul> <p>Specifies directory name created for each room:</p> <ul> <li><code>\"room_jid\"</code>: Uses the room bare JID.</li> <li><code>\"room_name\"</code>: Uses the room name from its configuration.</li> </ul>"},{"location":"modules/mod_muc_log/#modulesmod_muc_logfile_format","title":"<code>modules.mod_muc_log.file_format</code>","text":"<ul> <li>Syntax: string, one of <code>\"html\"</code>, <code>\"plaintext\"</code></li> <li>Default: <code>\"html\"</code></li> <li>Example: <code>file_format = \"html\"</code></li> </ul> <p>Specifies the format of output files:</p> <ul> <li><code>\"html\"</code>: The output is a fancy-formatted HTML page.</li> <li><code>\"plaintext\"</code>: Just a text file, better suited for processing than HTML.</li> </ul>"},{"location":"modules/mod_muc_log/#modulesmod_muc_logcss_file","title":"<code>modules.mod_muc_log.css_file</code>","text":"<ul> <li>Syntax: non-empty string</li> <li>Default: not set - the default styles for HTML logs are used</li> <li>Example: <code>css_file = \"path/to/css/file\"</code></li> </ul> <p>Specifies the css file used for logs rendering. Please note it won't be copied to the logs directory but the given path will be linked in HTML files instead.</p>"},{"location":"modules/mod_muc_log/#modulesmod_muc_logtimezone","title":"<code>modules.mod_muc_log.timezone</code>","text":"<ul> <li>Syntax: string, one of <code>\"local\"</code>, <code>\"universal\"</code></li> <li>Default: <code>\"local\"</code></li> <li>Example: <code>timezone = \"universal\"</code></li> </ul> <p>Specifies the timezone to be used in timestamps written into the logs:</p> <ul> <li><code>local</code>: Uses the local server timezone.</li> <li><code>universal</code>: Uses GMT.</li> </ul>"},{"location":"modules/mod_muc_log/#modulesmod_muc_logtop_link","title":"<code>modules.mod_muc_log.top_link</code>","text":"<ul> <li>Syntax: TOML table with the following mandatory keys: <code>\"target\"</code>, <code>\"text\"</code> and string values.</li> <li>Default: <code>{target = \"/\", text = \"Home\"}</code></li> <li>Example: <code>top_link = {target = \"/top\", text = \"Top page\"}</code></li> </ul> <p>Allows setting a custom link at the top of the HTML log file.  First tuple element is the link target and the second one is the text to be displayed.  You can put any HTML instead of just plain text.</p>"},{"location":"modules/mod_muc_log/#modulesmod_muc_logspam_prevention","title":"<code>modules.mod_muc_log.spam_prevention</code>","text":"<ul> <li>Syntax: boolean</li> <li>Default: <code>true</code></li> <li>Example: <code>spam_prevention = false</code></li> </ul> <p>When enabled, MongooseIM will enforce <code>rel=\"nofollow\"</code> attribute in links sent by user and written to MUC logs.</p>"},{"location":"modules/mod_muc_log/#example-configuration","title":"Example Configuration","text":"<pre><code>[modules.mod_muc_log]\n  outdir = \"/tmp/muclogs\"\n  access_log = \"muc\"\n  dirtype = \"plain\"\n  dirname = \"room_name\"\n  file_format = \"html\"\n  css_file = \"path/to/css/file\"\n  timezone = \"universal\"\n  top_link.target = \"/\"\n  top_link.text = \"Home\"\n</code></pre>"},{"location":"modules/mod_offline/","title":"mod_offline","text":""},{"location":"modules/mod_offline/#module-description","title":"Module Description","text":"<p>This module implements an offline messages storage compliant with XEP-0160: Best Practices for Handling Offline Messages.  It can store one-to-one and groupchat messages only when the recipient has no online resources.  It is not well suited for applications supporting multiple user devices, because anything saved in the DB can be retrieved only once, so the message history is not synchronised between devices.  Although <code>mod_offline</code> may be sufficient in some cases, it is preferable to use mod_mam.</p> <p>If this module is disabled, an error 503 with text \"Bounce offline message\" would be sent back to the sender, each time a message is sent to an offline user. Check mod_offline_stub to disable this error message.</p>"},{"location":"modules/mod_offline/#options","title":"Options","text":""},{"location":"modules/mod_offline/#modulesmod_offlineaccess_max_user_messages","title":"<code>modules.mod_offline.access_max_user_messages</code>","text":"<ul> <li>Syntax: non-empty string</li> <li>Default: <code>\"max_user_offline_messages\"</code></li> <li>Example: <code>access_max_user_messages = \"custom_max_user_offline_messages\"</code></li> </ul> <p>Access Rule to use for limiting the storage size per user.</p>"},{"location":"modules/mod_offline/#modulesmod_offlinebackend","title":"<code>modules.mod_offline.backend</code>","text":"<ul> <li>Syntax: string, one of <code>mnesia</code>, <code>rdbms</code></li> <li>Default: <code>\"mnesia\"</code></li> <li>Example: <code>backend = \"rdbms\"</code></li> </ul> <p>Storage backend.</p>"},{"location":"modules/mod_offline/#modulesmod_offlinestore_groupchat_messages","title":"<code>modules.mod_offline.store_groupchat_messages</code>","text":"<ul> <li>Syntax: boolean</li> <li>Default: <code>false</code></li> <li>Example: <code>store_groupchat_messages = true</code></li> </ul> <p>Specifies whether or not we should store groupchat messages.</p> <p>Warning</p> <p>This option can work only with MUC-light and is not expected to work with MUC.</p>"},{"location":"modules/mod_offline/#example-configuration","title":"Example Configuration","text":"<pre><code>[modules.mod_offline]\n  access_max_user_messages = \"max_user_offline_messages\"\n  backend = \"rdbms\"\n  store_groupchat_messages = true\n</code></pre>"},{"location":"modules/mod_offline/#metrics","title":"Metrics","text":"<p>If you'd like to learn more about metrics in MongooseIM, please visit MongooseIM metrics page.</p> Backend action Type Description (when it gets incremented) <code>pop_messages</code> histogram Offline messages for a user are retrieved and deleted from a DB. <code>write_messages</code> histogram New offline messages to a user are written in a DB."},{"location":"modules/mod_offline_stub/","title":"mod_offline_stub","text":""},{"location":"modules/mod_offline_stub/#module-description","title":"Module Description","text":"<p>RFC 6121 requires a <code>&lt;service-unavailable/&gt;</code> stanza error to be sent to a user messaging an unavailable recipient if the message is not stored for delayed delivery (i.e. as an \"offline message\"). If the recipient exists (i.e. auth module returns <code>true</code> from <code>does_user_exist</code>), <code>mod_mam</code> stores the message, but  is still returned. This is not compliant with the RFC. This module prevents returning . Please note that <code>mod_offline_stub</code> is not tightly coupled with <code>mod_mam</code>. It can be used as a standalone extension, if the specific application requires it.</p>"},{"location":"modules/mod_offline_stub/#options","title":"Options","text":"<p>None.</p>"},{"location":"modules/mod_offline_stub/#example-configuration","title":"Example Configuration","text":"<pre><code>[modules.mod_offline_stub]\n</code></pre>"},{"location":"modules/mod_ping/","title":"mod_ping","text":""},{"location":"modules/mod_ping/#module-description","title":"Module Description","text":"<p>This module implements XMPP Ping functionality as described in XEP-0199: XMPP Ping.</p>"},{"location":"modules/mod_ping/#options","title":"Options","text":""},{"location":"modules/mod_ping/#modulesmod_pingsend_pings","title":"<code>modules.mod_ping.send_pings</code>","text":"<ul> <li>Syntax: boolean</li> <li>Default: <code>false</code></li> <li>Example: <code>send_pings = true</code></li> </ul> <p>If set to true, the server will send ping iqs to the client if they are not active for a <code>ping_interval</code>.</p>"},{"location":"modules/mod_ping/#modulesmod_pingping_interval","title":"<code>modules.mod_ping.ping_interval</code>","text":"<ul> <li>Syntax: positive integer (seconds)</li> <li>Default: <code>60</code></li> <li>Example: <code>ping_interval = 30</code></li> </ul> <p>Defines the client inactivity timeout after which the server will send a ping request if the above option is set to <code>true</code>.</p>"},{"location":"modules/mod_ping/#modulesmod_pingtimeout_action","title":"<code>modules.mod_ping.timeout_action</code>","text":"<ul> <li>Syntax: string, one of <code>\"none\"</code>, <code>\"kill\"</code></li> <li>Default: <code>\"none\"</code></li> <li>Example: <code>timeout_action = \"kill\"</code></li> </ul> <p>Defines if the client connection should be closed if it doesn't reply to a ping request in less than <code>ping_req_timeout</code>.</p>"},{"location":"modules/mod_ping/#modulesmod_pingping_req_timeout","title":"<code>modules.mod_ping.ping_req_timeout</code>","text":"<ul> <li>Syntax: positive integer (seconds)</li> <li>Default: <code>32</code></li> <li>Example: <code>ping_req_timeout = 60</code></li> </ul> <p>Defines how long the server waits for the client to reply to the ping request.</p>"},{"location":"modules/mod_ping/#modulesmod_pingiqdisctype","title":"<code>modules.mod_ping.iqdisc.type</code>","text":"<ul> <li>Syntax: string, one of <code>\"one_queue\"</code>, <code>\"no_queue\"</code>, <code>\"queues\"</code>, <code>\"parallel\"</code></li> <li>Default: <code>\"no_queue\"</code></li> </ul> <p>Strategy to handle incoming stanzas. For details, please refer to IQ processing policies.</p>"},{"location":"modules/mod_ping/#example-configuration","title":"Example Configuration","text":"<pre><code>[modules.mod_ping]\n  send_pings = true\n  ping_interval = 60\n  timeout_action = \"none\"\n  ping_req_timeout = 32\n</code></pre>"},{"location":"modules/mod_ping/#metrics","title":"Metrics","text":"<p>If you'd like to learn more about metrics in MongooseIM, please visit MongooseIM metrics page.</p> Name Type Description (when it gets incremented) <code>[HostType, mod_ping, ping_response]</code> spiral Client responds to a ping. <code>[HostType, mod_ping, ping_response_timeout]</code> spiral Ping request timeouts without a response from client. <code>[HostType, mod_ping, ping_response_time]</code> histogram Response times (doesn't include timeouts)."},{"location":"modules/mod_presence/","title":"mod_presence","text":""},{"location":"modules/mod_presence/#module-description","title":"Module Description","text":"<p>This module implements server-side presence handling as specified in RFC 6121.</p> <p>According to RFC 6121, section 1.3:</p> <p>it must be possible to use the protocol to provide a presence service, a messaging service, or both. (...) it is not mandatory for an XMPP service to offer both a presence service and a messaging service, and the protocol makes it possible to offer separate and distinct services for presence and for messaging.</p> <p>This is why server-side presence management and broadcasting is provided separately by this module. It is enabled in the default configuration file, but you can disable it if your use case does not require server-side presence handling - this could significantly improve performance.</p>"},{"location":"modules/mod_presence/#options","title":"Options","text":"<p>This module has no configurable options.</p>"},{"location":"modules/mod_presence/#example-configuration","title":"Example Configuration","text":"<pre><code>[modules.mod_presence]\n</code></pre>"},{"location":"modules/mod_presence/#metrics","title":"Metrics","text":"<p>There are no metrics specific to this module.</p>"},{"location":"modules/mod_privacy/","title":"mod_privacy","text":""},{"location":"modules/mod_privacy/#module-description","title":"Module Description","text":"<p>This module implements XEP-0016: Privacy Lists. This extension allows user to block IQs, messages, presences, or all, based on JIDs, subscription, and roster groups.</p>"},{"location":"modules/mod_privacy/#options","title":"Options","text":""},{"location":"modules/mod_privacy/#modulesmod_privacybackend","title":"<code>modules.mod_privacy.backend</code>","text":"<ul> <li>Syntax: string, one of <code>\"mnesia\"</code>, <code>\"rdbms\"</code>.</li> <li>Default: <code>\"mnesia\"</code></li> <li>Example: <code>backend = \"mnesia\"</code></li> </ul>"},{"location":"modules/mod_privacy/#example-configuration","title":"Example Configuration","text":"<pre><code>[modules.mod_privacy]\n  backend = \"rdbms\"\n</code></pre>"},{"location":"modules/mod_privacy/#metrics","title":"Metrics","text":"<p>If you'd like to learn more about metrics in MongooseIM, please visit MongooseIM metrics page.</p> Backend action Description (when it gets incremented) <code>get_privacy_list</code> A privacy list is retrieved from a DB. <code>get_list_names</code> Names of user's privacy lists are fetched from a DB. <code>get_default_list</code> A default privacy list for a user is fetched from a DB. <code>set_default_list</code> A default list's name for a user is set in a DB. <code>forget_default_list</code> A default list's name for a user is removed from a DB. <code>remove_privacy_list</code> A privacy list is deleted from a DB. <code>replace_privacy_list</code> A privacy list is updated (replaced) in a DB."},{"location":"modules/mod_private/","title":"mod_private","text":""},{"location":"modules/mod_private/#module-description","title":"Module Description","text":"<p>This module implements XEP-0049: Private XML Storage. It allows users to store custom XML data in the server's database. Used e.g. for storing roster groups separator.</p>"},{"location":"modules/mod_private/#options","title":"Options","text":""},{"location":"modules/mod_private/#modulesmod_privateiqdisctype","title":"<code>modules.mod_private.iqdisc.type</code>","text":"<ul> <li>Syntax: string, one of <code>\"one_queue\"</code>, <code>\"no_queue\"</code>, <code>\"queues\"</code>, <code>\"parallel\"</code></li> <li>Default: <code>\"one_queue\"</code></li> </ul> <p>Strategy to handle incoming stanzas. For details, please refer to IQ processing policies.</p>"},{"location":"modules/mod_private/#modulesmod_privatebackend","title":"<code>modules.mod_private.backend</code>","text":"<ul> <li>Syntax: string, one of <code>\"mnesia\"</code>, <code>\"rdbms\"</code>.</li> <li>Default: \"mnesia\"</li> <li>Example: <code>backend = \"mnesia\"</code></li> </ul> <p>Database backend to use.</p>"},{"location":"modules/mod_private/#example-configuration","title":"Example Configuration","text":"<pre><code>[modules.mod_private]\n  backend = \"mnesia\"\n</code></pre>"},{"location":"modules/mod_private/#metrics","title":"Metrics","text":"<p>If you'd like to learn more about metrics in MongooseIM, please visit MongooseIM metrics page.</p> Backend operation Description (when it gets incremented) <code>multi_get_data</code> XML data is fetched from a DB. <code>multi_set_data</code> XML data is stored in a DB."},{"location":"modules/mod_pubsub/","title":"mod_pubsub","text":""},{"location":"modules/mod_pubsub/#what-is-pubsub","title":"What is PubSub?","text":"<p>PubSub is a design pattern which mostly promotes a loose coupling between two kinds of entities - publishers and subscribers. Like their names suggest, in the pubsub world we have publishers who fire events, and subscribers who wish to be notified about those events when publishers push data. There might be several subscribers, several publishers, and even several channels (or nodes) where the events are sent.</p>"},{"location":"modules/mod_pubsub/#module-description","title":"Module Description","text":"<p>This module implements XEP-0060: Publish-Subscribe. Due to the complexity of the protocol, the PubSub engine makes successive calls to the <code>nodetree</code> and <code>node plugins</code> in order to check the validity of requests, perform the corresponding action and return a result or appropriate error. Such an architecture makes it much easier to write custom pubsub plugins and add new storage backends. It's all about tailoring PubSub to your needs!</p> <p>Warning</p> <p>This module does not support dynamic domains.</p>"},{"location":"modules/mod_pubsub/#options","title":"Options","text":""},{"location":"modules/mod_pubsub/#modulesmod_pubsubiqdisctype","title":"<code>modules.mod_pubsub.iqdisc.type</code>","text":"<ul> <li>Syntax: string, one of <code>\"one_queue\"</code>, <code>\"no_queue\"</code>, <code>\"queues\"</code>, <code>\"parallel\"</code></li> <li>Default: <code>\"one_queue\"</code></li> </ul> <p>Strategy to handle incoming stanzas. For details, please refer to IQ processing policies.</p>"},{"location":"modules/mod_pubsub/#modulesmod_pubsubhost","title":"<code>modules.mod_pubsub.host</code>","text":"<ul> <li>Syntax: string</li> <li>Default: <code>\"pubsub.@HOST@\"</code></li> <li>Example: <code>host = \"pubsub.localhost\"</code></li> </ul> <p>Subdomain for Pubsub service to reside under. <code>@HOST@</code> is replaced with each served domain.</p>"},{"location":"modules/mod_pubsub/#modulesmod_pubsubbackend","title":"<code>modules.mod_pubsub.backend</code>","text":"<ul> <li>Syntax: string, one of <code>\"mnesia\"</code>, <code>\"rdbms\"</code></li> <li>Default: <code>\"mnesia\"</code></li> <li>Example: <code>backend = \"rdbms\"</code></li> </ul> <p>Database backend to use.</p>"},{"location":"modules/mod_pubsub/#modulesmod_pubsubaccess_createnode","title":"<code>modules.mod_pubsub.access_createnode</code>","text":"<ul> <li>Syntax: string, rule name, or <code>\"all\"</code></li> <li>Default: <code>\"all\"</code></li> <li>Example: <code>access_createnode = \"all\"</code></li> </ul> <p>Specifies who is allowed to create pubsub nodes. The access rule referenced here needs to be defined in the access section.</p>"},{"location":"modules/mod_pubsub/#modulesmod_pubsubmax_items_node","title":"<code>modules.mod_pubsub.max_items_node</code>","text":"<ul> <li>Syntax: non-negative integer</li> <li>Default: <code>10</code></li> <li>Example: <code>max_items_node = 10</code></li> </ul> <p>Defines the maximum number of items that can be stored in a node.</p>"},{"location":"modules/mod_pubsub/#modulesmod_pubsubmax_subscriptions_node","title":"<code>modules.mod_pubsub.max_subscriptions_node</code>","text":"<ul> <li>Syntax: non-negative integer</li> <li>Default: not specified (no limit)</li> <li>Example: <code>max_subscriptions_node = 10</code></li> </ul> <p>The maximum number of subscriptions managed by a node. By default there is no limit.</p>"},{"location":"modules/mod_pubsub/#modulesmod_pubsubnodetree","title":"<code>modules.mod_pubsub.nodetree</code>","text":"<ul> <li>Syntax: string</li> <li>Default: <code>\"tree\"</code></li> <li>Example: <code>nodetree = \"tree\"</code></li> </ul> <p>Specifies the storage and organisation of the pubsub nodes. See the section below.</p>"},{"location":"modules/mod_pubsub/#modulesmod_pubsubignore_pep_from_offline","title":"<code>modules.mod_pubsub.ignore_pep_from_offline</code>","text":"<ul> <li>Syntax: boolean</li> <li>Default: <code>true</code></li> <li>Example: <code>ignore_pep_from_offline = false</code></li> </ul> <p>Specifies whether or not we should get last published PEP items from users in our roster which are offline when we connect. The default option is <code>true</code> hence we will get only the last items from the online contacts.</p>"},{"location":"modules/mod_pubsub/#modulesmod_pubsublast_item_cache","title":"<code>modules.mod_pubsub.last_item_cache</code>","text":"<ul> <li>Syntax: string, one of <code>\"mnesia\"</code>, <code>\"rdbms\"</code>, <code>\"false\"</code></li> <li>Default: <code>\"false\"</code></li> <li>Example: <code>last_item_cache = \"mnesia\"</code></li> </ul> <p>If enabled, PubSub will cache the last published items in the nodes. It may increase PubSub performance but at a price of an increased memory usage.</p>"},{"location":"modules/mod_pubsub/#modulesmod_pubsubplugins","title":"<code>modules.mod_pubsub.plugins</code>","text":"<ul> <li>Syntax: array of strings</li> <li>Default: <code>[\"flat\"]</code></li> <li>Example: <code>plugins = [\"flat\", \"pep\"]</code></li> </ul> <p>List of enabled pubsub plugins.</p>"},{"location":"modules/mod_pubsub/#modulesmod_pubsubpep_mapping","title":"<code>modules.mod_pubsub.pep_mapping</code>","text":"<ul> <li>Syntax: Array of TOML tables with the following keys: <code>\"namespace\"</code>, <code>\"node\"</code> and string values.</li> <li>Default: <code>[]</code></li> <li>Example: <code>pep_mapping = [{namespace = \"urn:xmpp:microblog:0\", node = \"mb\"}]</code></li> </ul> <p>This permits creating a Key-Value list to define a custom node plugin on a given PEP namespace. E.g. pair <code>{\"urn:xmpp:microblog:0\", \"mb\"}</code> will use module <code>node_mb</code> instead of <code>node_pep</code> when the specified namespace is used.</p>"},{"location":"modules/mod_pubsub/#modulesmod_pubsubdefault_node_config","title":"<code>modules.mod_pubsub.default_node_config</code>","text":"<ul> <li>Syntax: TOML table with the following values: string, boolean or non-negative integer.</li> <li>Default: <code>{}</code></li> <li>Example: <code>default_node_config = {deliver_payloads = true, max_payload_size = 10000, node_type = \"leaf\"}</code></li> </ul> <p>Overrides the default node configuration, regardless of the node plugin. Node configuration still uses the default configuration defined by the node plugin, and overrides any items by the value defined in this configurable list.</p> <p>The possible options, altogether with their default values for each node plugin, are listed in the table below:</p> syntax node_flat / node_hometree node_pep node_dag node_push <code>access_model</code> non-empty string <code>open</code> <code>presence</code> <code>open</code> <code>whitelist</code> <code>deliver_notifications</code> boolean <code>true</code> <code>true</code> <code>true</code> <code>true</code> <code>deliver_payloads</code> boolean <code>true</code> <code>true</code> <code>true</code> <code>true</code> <code>max_items</code> non-negative integer <code>10</code> <code>1</code> <code>10</code> <code>1</code> <code>max_payload_size</code> non-negative integer <code>60000</code> <code>60000</code> <code>60000</code> <code>60000</code> <code>node_type</code> non-empty string N/A N/A <code>leaf</code> N/A <code>notification_type</code> non-empty string <code>headline</code> <code>headline</code> <code>headline</code> <code>headline</code> <code>notify_config</code> boolean <code>false</code> <code>false</code> <code>false</code> <code>false</code> <code>notify_delete</code> boolean <code>false</code> <code>false</code> <code>false</code> <code>false</code> <code>notify_retract</code> boolean <code>false</code> <code>false</code> <code>false</code> <code>false</code> <code>persist_items</code> boolean <code>true</code> <code>true</code> <code>true</code> <code>false</code> <code>presence_based_delivery</code> boolean <code>false</code> <code>true</code> <code>false</code> <code>true</code> <code>publish_model</code> non-empty string <code>publishers</code> <code>publishers</code> <code>publishers</code> <code>open</code> <code>purge_offline</code> boolean <code>false</code> <code>false</code> <code>false</code> <code>false</code> <code>roster_groups_allowed</code> non-empty string <code>[]</code> <code>[]</code> <code>[]</code> <code>[]</code> <code>send_last_published_item</code> non-empty string <code>never</code> <code>on_sub_and_presence</code> <code>never</code> <code>on_sub_and_presence</code> <code>subscribe</code> boolean <code>true</code> <code>true</code> <code>true</code> <code>true</code>"},{"location":"modules/mod_pubsub/#modulesmod_pubsubitem_publisher","title":"<code>modules.mod_pubsub.item_publisher</code>","text":"<ul> <li>Syntax: boolean</li> <li>Default: <code>false</code></li> <li>Example: <code>item_publisher = false</code></li> </ul> <p>When enabled, a JID of the publisher will be saved in the item metadata. This effectively makes them an owner of this item.</p>"},{"location":"modules/mod_pubsub/#modulesmod_pubsubsync_broadcast","title":"<code>modules.mod_pubsub.sync_broadcast</code>","text":"<ul> <li>Syntax: boolean</li> <li>Default: <code>false</code></li> <li>Example: <code>sync_broadcast = false</code></li> </ul> <p>If false, routing of notifications to subscribers is done in a separate Erlang process. As a consequence, some notifications may arrive to the subscribers in the wrong order (however, the two events would have to be published at the exact same time).</p>"},{"location":"modules/mod_pubsub/#cache-backend","title":"Cache Backend","text":"<p>Caching is disabled by default. You may enable it by specifying the backend it should use. It is not coupled with the main DB backend, so it is possible to store the cached data in <code>mnesia</code>, while the actual PubSub information is kept in RDBMS (and vice versa!).</p>"},{"location":"modules/mod_pubsub/#example-configuration","title":"Example Configuration","text":"<pre><code>[modules.mod_pubsub]\n  access_createnode = \"pubsub_createnode\"\n  ignore_pep_from_offline = false\n  backend = \"rdbms\"\n  last_item_cache = \"mnesia\"\n  max_items_node = 1000\n  plugins = [\"flat\", \"pep\"]\n\n  [[modules.mod_pubsub.pep_mapping]]\n    namespace = \"urn:xmpp:microblog:0\"\n    node = \"mb\"\n</code></pre>"},{"location":"modules/mod_pubsub/#nodetrees","title":"Nodetrees","text":"<p>Called on <code>get</code>, <code>create</code> and <code>delete</code> node. Only one nodetree can be used per host and is shared by all node plugins.</p>"},{"location":"modules/mod_pubsub/#tree","title":"<code>\"tree\"</code>","text":"<p>Stores nodes in a tree structure. Every node name must be formatted like a UNIX path (e.g. <code>/top/middle/leaf</code>). When a node is created, its direct ancestor must already exist, so in order to create <code>/top/middle/leaf</code>, <code>/top/middle</code> is needed. A user may create any top-level node. A user may create a subnode of a node, only if they own it or it was created by the service.</p>"},{"location":"modules/mod_pubsub/#dag","title":"<code>\"dag\"</code>","text":"<p>Provides experimental support for XEP-0248: PubSub Collection Nodes. In this case you should also add the <code>\"dag\"</code> node plugin as default, for example: <code>plugins = [\"dag\", \"flat\", \"hometree\", \"pep\"]</code>.</p>"},{"location":"modules/mod_pubsub/#plugins","title":"Plugins","text":"<p>They handle affiliations, subscriptions and items and also provide default node con\ufb01guration and features. PubSub clients can define which plugin to use when creating a node by adding <code>type='plugin-name'</code> attribute to the create stanza element. If such an attribute is not specified, the default plugin will be the first on the plugin list.</p>"},{"location":"modules/mod_pubsub/#flat","title":"<code>\"flat\"</code>","text":"<p>No node hierarchy. It handles the standard PubSub case.</p>"},{"location":"modules/mod_pubsub/#hometree","title":"<code>\"hometree\"</code>","text":"<p>Uses the exact same features as the flat plugin but additionally organises nodes in a tree. Basically it follows a scheme similar to the filesystem's structure. Every user can create nodes in their own home root: e.g <code>/home/user</code>. Each node can contain items and/or sub-nodes.</p>"},{"location":"modules/mod_pubsub/#pep","title":"<code>\"pep\"</code>","text":"<p>Implementation of XEP-0163: Personal Eventing Protocol. In this case, items are not persisted but kept in an in-memory cache. When the <code>pep</code> plugin is enabled, a user can have their own node (exposed as their bare jid) with a common namespace. Requires module <code>mod_caps</code> to be enabled.</p> <p>For XEP-0384: OMEMO Encryption, it might be required to configure the <code>access_model</code> to <code>open</code> or override the default <code>access_model</code> in the following way:</p> <pre><code>[modules.mod_pubsub]\n  access_createnode = \"pubsub_createnode\"\n  plugins = [\"pep\"]\n  default_node_config = {access_model = \"open\"}\n</code></pre>"},{"location":"modules/mod_pubsub/#dag_1","title":"<code>\"dag\"</code>","text":"<p>Implementation of XEP-0248: PubSub Collection Nodes. Every node takes a place in a collection and becomes either a collection node (and have only sub-nodes) or a leaf node (contains only items).</p>"},{"location":"modules/mod_pubsub/#push","title":"<code>\"push\"</code>","text":"<p>Special node type that may be used as a target node for XEP-0357: Push Notifications capable services (e.g. <code>mod_event_pusher_push</code>). For each published notification, a hook <code>push_notification</code> is run. You may enable as many modules that support this hook (all module with <code>mod_push_service_*</code> name prefix) as you like (see for example <code>mod_push_service_mongoosepush</code>). This node type requires <code>publish-options</code> with at least <code>device_id</code> and <code>service</code> fields supplied.</p>"},{"location":"modules/mod_pubsub/#metrics","title":"Metrics","text":"<p>If you'd like to learn more about metrics in MongooseIM, please visit the MongooseIM metrics page.</p>"},{"location":"modules/mod_pubsub/#overall-pubsub-action-metrics","title":"Overall PubSub action metrics","text":"<p>For every PubSub action, like node creation, subscription, publication the following metrics are available:</p> <ul> <li>count - a spiral metric showing the number of given action invocations</li> <li>errors - a spiral metric counting the errors for a given action</li> <li>time - a histogram metric showing the time it took to finish the action in case of success</li> </ul> <p>Below there is a table describing all metrics related to PubSub actions</p> Name Description (when it gets incremented) <code>[HOST, pubsub, get, affiliations, TYPE]</code> When node's affiliations are read <code>[HOST, pubsub, get, configure, TYPE]</code> When node's configuration is read <code>[HOST, pubsub, get, default, TYPE]</code> When node's defaults are read <code>[HOST, pubsub, get, items, TYPE]</code> When node's items are read <code>[HOST, pubsub, get, options, TYPE]</code> When node's options are read <code>[HOST, pubsub, get, subscriptions, TYPE]</code> When node's subscriptions are read <code>[HOST, pubsub, set, affiliations, TYPE]</code> When node's subscriptions are set <code>[HOST, pubsub, set, configure, TYPE]</code> When node's configuration is set <code>[HOST, pubsub, set, create, TYPE]</code> When node is created <code>[HOST, pubsub, set, delete, TYPE]</code> When node is deleted <code>[HOST, pubsub, set, options, TYPE]</code> When node's options are set <code>[HOST, pubsub, set, publish, TYPE]</code> When an item is published <code>[HOST, pubsub, set, purge, TYPE]</code> When node's items are purged <code>[HOST, pubsub, set, retract, TYPE]</code> When node's items are retracted <code>[HOST, pubsub, set, subscribe, TYPE]</code> When a subscriber subscribes to a node <code>[HOST, pubsub, set, subscriptions, TYPE]</code> When a subscription is set (for instance accepted) <code>[HOST, pubsub, set, unsubscribe, TYPE]</code> When a subscriber unsubscribes <p>Where:</p> <ul> <li><code>HOST</code> is the XMPP host for which <code>mod_pubsub</code> is running. Can be set to <code>global</code> if all metrics are set to be global.</li> <li><code>TYPE</code> is one of the following <code>count</code>, <code>errors</code>, <code>time</code> (described above the table)</li> </ul>"},{"location":"modules/mod_pubsub/#backend-operations","title":"Backend operations","text":"<p>The are also more detailed metrics measuring execution time of backend operations.</p> <p>Metrics for these actions may be found under <code>mod_pubsub_db</code> subkey.</p> Backend action Description (when it gets incremented) <code>get_state</code> User's state for a specific node is fetched. <code>get_states</code> Node's states are fetched. <code>get_states_by_lus</code> Nodes' states for user + domain are fetched. <code>get_states_by_bare</code> Nodes' states for bare JID are fetched. <code>get_states_by_full</code> Nodes' states for full JID are fetched. <code>get_own_nodes_states</code> State data for user's nodes is fetched. <code>create_node</code> A node's owner is set. <code>del_node</code> All data related to a node is removed. <code>get_items</code> Node's items are fetched. <code>get_item</code> A specific item from a node is fetched. <code>add_item</code> An item is upserted into a node. <code>set_item</code> An item is updated in a node. <code>del_item</code> An item is deleted from a node. <code>del_items</code> Specified items are deleted from a node. <code>set_node</code> A node is upserted. <code>find_node_by_id</code> A node is fetched by its ID. <code>find_nodes_by_key</code> Nodes are fetched by key. <code>find_node_by_name</code> A node is fetched by its name. <code>del_node</code> A node is deleted. <code>get_subnodes</code> Subnodes of a node are fetched. <code>get_subnodes_tree</code> Full tree of subnodes of a node is fetched. <code>get_parentnodes_tree</code> All parents of a node are fetched."},{"location":"modules/mod_push_service_mongoosepush/","title":"mod_push_service_mongoosepush","text":""},{"location":"modules/mod_push_service_mongoosepush/#module-description","title":"Module Description","text":"<p>This module handles the <code>push_notification</code> hook generated by <code>mod_pubsub</code> with an active <code>push</code> node. Each <code>push_notification</code> hook is converted as a <code>REST</code> API call to the MongoosePush service. You can find the full list of supported <code>publish-options</code> here.</p> <p>Warning</p> <p>This module does not support dynamic domains.</p>"},{"location":"modules/mod_push_service_mongoosepush/#prerequisites","title":"Prerequisites","text":"<p>This module uses a connection pool via <code>mongoose_http_client</code>. It must be defined in outgoing_pools setting.</p>"},{"location":"modules/mod_push_service_mongoosepush/#options","title":"Options","text":""},{"location":"modules/mod_push_service_mongoosepush/#modulesmod_push_service_mongoosepushpool_name","title":"<code>modules.mod_push_service_mongoosepush.pool_name</code>","text":"<ul> <li>Syntax: non-empty string</li> <li>Default: <code>\"undefined\"</code></li> <li>Example: <code>pool_name = \"mongoose_push_http\"</code></li> </ul> <p>The name of the pool to use (as defined in <code>outgoing_pools</code>).</p>"},{"location":"modules/mod_push_service_mongoosepush/#modulesmod_push_service_mongoosepushapi_version","title":"<code>modules.mod_push_service_mongoosepush.api_version</code>","text":"<ul> <li>Syntax: string, <code>\"v2\"</code> or <code>\"v3\"</code></li> <li>Default: <code>\"v3\"</code></li> <li>Example: <code>api_version = \"v3\"</code></li> </ul> <p>REST API version to be used.</p>"},{"location":"modules/mod_push_service_mongoosepush/#modulesmod_push_service_mongoosepushmax_http_connections","title":"<code>modules.mod_push_service_mongoosepush.max_http_connections</code>","text":"<ul> <li>Syntax: non-negative integer</li> <li>Default: <code>100</code></li> <li>Example: <code>max_http_connections = 100</code></li> </ul> <p>The maximum amount of concurrent HTTP connections.</p>"},{"location":"modules/mod_push_service_mongoosepush/#example-configuration","title":"Example configuration","text":"<pre><code>[outgoing_pools.http.mongoose_push_http]\n  scope = \"global\"\n  workers = 50\n\n  [outgoing_pools.http.mongoose_push_http.connection]\n    host = \"https://localhost:8443\"\n    path_prefix = \"/\"\n    request_timeout = 2000\n\n[modules.mod_push_service_mongoosepush]\n  pool_name = \"mongoose_push_http\"\n  api_version = \"v3\"\n  max_http_connections = 100\n</code></pre>"},{"location":"modules/mod_register/","title":"mod_register","text":""},{"location":"modules/mod_register/#module-description","title":"Module Description","text":"<p>This module implements XEP-0077: In-Band Registration, allowing users to register accounts on the server via XMPP. Use of this module on Internet-facing servers is not recommended.</p>"},{"location":"modules/mod_register/#options","title":"Options","text":""},{"location":"modules/mod_register/#modulesmod_registeriqdisctype","title":"<code>modules.mod_register.iqdisc.type</code>","text":"<ul> <li>Syntax: string, one of <code>\"one_queue\"</code>, <code>\"no_queue\"</code>, <code>\"queues\"</code>, <code>\"parallel\"</code></li> <li>Default: <code>\"one_queue\"</code></li> </ul> <p>Strategy to handle incoming stanzas. For details, please refer to IQ processing policies.</p>"},{"location":"modules/mod_register/#modulesmod_registeraccess","title":"<code>modules.mod_register.access</code>","text":"<ul> <li>Syntax: string, rule name or <code>\"all\"</code></li> <li>Default: <code>\"all\"</code></li> <li>Example: <code>access = \"all\"</code></li> </ul> <p>Defines which access rule should be used for checking if a chosen username is allowed for registration.</p>"},{"location":"modules/mod_register/#modulesmod_registerwelcome_message","title":"<code>modules.mod_register.welcome_message</code>","text":"<ul> <li>Syntax: TOML table with the following keys: <code>\"body\"</code>, <code>\"subject\"</code> and string values.</li> <li>Default: <code>{subject = \"\", body = \"\"}</code></li> <li>Example: <code>welcome_message = {subject = \"Hello from MIM!\", body = \"Message body.\"}</code></li> </ul> <p>Body and subject of a <code>&lt;message&gt;</code> stanza sent to new users. Only one of the fields (but non-empty) is mandatory for the message to be sent.</p>"},{"location":"modules/mod_register/#modulesmod_registerregistration_watchers","title":"<code>modules.mod_register.registration_watchers</code>","text":"<ul> <li>Syntax: array of strings</li> <li>Default: <code>[]</code></li> <li>Example: <code>registration_watchers = [\"JID1\", \"JID2\"]</code></li> </ul> <p>List of JIDs, which should receive a <code>&lt;message&gt;</code> notification about every successful registration.</p>"},{"location":"modules/mod_register/#modulesmod_registerpassword_strength","title":"<code>modules.mod_register.password_strength</code>","text":"<ul> <li>Syntax: non-negative integer</li> <li>Default: <code>0</code></li> <li>Example: <code>password_strength = 32</code></li> </ul> <p>Specifies minimal entropy of allowed password. Entropy is measured with <code>ejabberd_auth:entropy/1</code>. When set to <code>0</code>, the password strength is not checked. Recommended minimum is 32. The entropy calculation algorithm is described in a section below.</p>"},{"location":"modules/mod_register/#modulesmod_registerip_access","title":"<code>modules.mod_register.ip_access</code>","text":"<ul> <li> <p>Syntax: Array of TOML tables with the following mandatory content:</p> <ul> <li><code>address</code> - string, IP address</li> <li><code>policy</code> - string, one of: <code>\"allow\"</code>, <code>\"deny\"</code>.</li> </ul> </li> <li> <p>Default: <code>[]</code></p> </li> <li>Example: <code>ip_access = [   {address = \"127.0.0.0/8\", policy = \"allow\"}, {address = \"0.0.0.0/0\", policy = \"deny\"} ]</code></li> </ul> <p>Access list for specified IPs or networks. Default value allows registration from every IP.</p>"},{"location":"modules/mod_register/#example-configuration","title":"Example configuration","text":"<p>Allow registrations from localhost:</p> <pre><code>[modules.mod_register]\n  welcome_message = {subject = \"Hello from MIM!\", body = \"Message body.\"}\n  ip_access = [\n    {address = \"127.0.0.1\", policy = \"allow\"}\n  ]\n  access = \"register\"\n</code></pre> <p>Deny registration from network 10.20.0.0 with mask 255.255.0.0. <pre><code>[modules.mod_register]\n  ip_access = [\n    {address = \"10.20.0.0/16\", policy = \"deny\"}\n  ]\n</code></pre></p>"},{"location":"modules/mod_register/#metrics","title":"Metrics","text":"<p>If you'd like to learn more about metrics in MongooseIM, please visit MongooseIM metrics page.</p> Name Type Description (when it gets incremented) <code>[Host, modRegisterCount]</code> spiral A user registers via <code>mod_register</code> module. <code>[Host, modUnregisterCount]</code> spiral A user unregisters via <code>mod_register</code> module."},{"location":"modules/mod_register/#entropy-calculation-algorithm","title":"Entropy calculation algorithm","text":"<pre><code>Entropy = length(Password) * log(X) / log(2)\n</code></pre> <p>Where <code>X</code> is initially set to 0 and certain values are added if at least one of these bytes are present:</p> <ul> <li>Lower case character: 26</li> <li>Upper case character: 26</li> <li>Digit: 9</li> <li>Printable ASCII (0x21 - 0x7e): 33</li> <li>Any other value: 128</li> </ul> <p>Note</p> <p>These values are added only once, no matter how many bytes of specific type are found.</p>"},{"location":"modules/mod_register/#example-entropies","title":"Example entropies","text":"<ul> <li><code>kotek</code>: ~23.5</li> <li><code>abc123</code>: ~30.8</li> <li><code>L33tSp34k</code>: ~53.4</li> <li><code>CamelCase</code>: ~51.3</li> <li><code>lowUP1#:</code>: ~45.9</li> <li><code>lowUP1#\u2764</code>: ~78</li> </ul>"},{"location":"modules/mod_roster/","title":"mod_roster","text":""},{"location":"modules/mod_roster/#module-description","title":"Module Description","text":"<p>The module implements roster support, specified in RFC 6121. Includes support for XEP-0237: Roster Versioning. It can sometimes become quite a heavyweight feature, so there is an option to disable it.</p>"},{"location":"modules/mod_roster/#options","title":"Options","text":""},{"location":"modules/mod_roster/#modulesmod_rosteriqdisctype","title":"<code>modules.mod_roster.iqdisc.type</code>","text":"<ul> <li>Syntax: string, one of <code>\"one_queue\"</code>, <code>\"no_queue\"</code>, <code>\"queues\"</code>, <code>\"parallel\"</code></li> <li>Default: \"one_queue\"</li> </ul> <p>Strategy to handle incoming stanzas. For details, please refer to IQ processing policies.</p>"},{"location":"modules/mod_roster/#modulesmod_rosterversioning","title":"<code>modules.mod_roster.versioning</code>","text":"<ul> <li>Syntax: boolean</li> <li>Default: <code>false</code></li> <li>Example: <code>versioning = true</code></li> </ul> <p>Turn on/off support for Roster Versioning.</p>"},{"location":"modules/mod_roster/#modulesmod_rosterstore_current_id","title":"<code>modules.mod_roster.store_current_id</code>","text":"<ul> <li>Syntax: boolean</li> <li>Default: <code>false</code></li> <li>Example: <code>store_current_id = true</code></li> </ul> <p>Stores the last roster hash in DB (used in Roster Versioning). Improves performance but should be disabled, when shared rosters are used.</p>"},{"location":"modules/mod_roster/#modulesmod_rosterbackend","title":"<code>modules.mod_roster.backend</code>","text":"<ul> <li>Syntax: string, one of <code>\"mnesia\"</code>, <code>\"rdbms\"</code></li> <li>Default: <code>\"mnesia\"</code></li> <li>Example: <code>backend = \"mnesia\"</code></li> </ul>"},{"location":"modules/mod_roster/#example-configuration","title":"Example configuration","text":"<pre><code>[modules.mod_roster]\n  versioning = true\n  store_current_id = true\n</code></pre>"},{"location":"modules/mod_roster/#metrics","title":"Metrics","text":"<p>If you'd like to learn more about metrics in MongooseIM, please visit MongooseIM metrics page.</p> Backend action Description (when it gets incremented) <code>read_roster_version</code> Version of a user's roster is retrieved. <code>write_roster_version</code> Vversion of a user's roster is stored. <code>get_roster</code> A user's roster is fetched. <code>get_roster_entry</code> A specific roster entry is fetched. <code>get_roster_entry_t</code> A specific roster entry is fetched inside a transaction. <code>get_subscription_lists</code> A subscription list of a user is retrieved. <code>roster_subscribe_t</code> A subscription status between users is updated inside a transaction. <code>update_roster_t</code> A roster entry is updated in a transaction. <code>del_roster_t</code> A roster entry is removed inside a transaction."},{"location":"modules/mod_sasl2/","title":"mod_sasl2","text":""},{"location":"modules/mod_sasl2/#module-description","title":"Module Description","text":"<p>Implements XEP-0388: Extensible SASL Profile.</p>"},{"location":"modules/mod_shared_roster_ldap/","title":"mod_shared_roster_ldap","text":""},{"location":"modules/mod_shared_roster_ldap/#module-description","title":"Module Description","text":"<p>This module injects roster entries fetched from LDAP. It might get quite complicated to configure it properly, so proceed with caution.</p> <p>Warning</p> <p>This module does not support dynamic domains.</p>"},{"location":"modules/mod_shared_roster_ldap/#options-general","title":"Options: general","text":""},{"location":"modules/mod_shared_roster_ldap/#modulesmod_shared_roster_ldappool_tag","title":"<code>modules.mod_shared_roster_ldap.pool_tag</code>","text":""},{"location":"modules/mod_shared_roster_ldap/#modulesmod_shared_roster_ldapbase","title":"<code>modules.mod_shared_roster_ldap.base</code>","text":""},{"location":"modules/mod_shared_roster_ldap/#modulesmod_shared_roster_ldapderef","title":"<code>modules.mod_shared_roster_ldap.deref</code>","text":"<p>These 3 options are the same as for the LDAP authentication module.</p>"},{"location":"modules/mod_shared_roster_ldap/#options-attributes","title":"Options: attributes","text":""},{"location":"modules/mod_shared_roster_ldap/#modulesmod_shared_roster_ldapgroupattr","title":"<code>modules.mod_shared_roster_ldap.groupattr</code>","text":"<ul> <li>Syntax: string</li> <li>Default: <code>\"cn\"</code></li> <li>Example: <code>groupattr = \"cn\"</code></li> </ul> <p>Provides a group name.</p>"},{"location":"modules/mod_shared_roster_ldap/#modulesmod_shared_roster_ldapgroupdesc","title":"<code>modules.mod_shared_roster_ldap.groupdesc</code>","text":"<ul> <li>Syntax: string</li> <li>Default: the value of <code>groupattr</code></li> <li>Example: <code>groupdesc = \"cn\"</code></li> </ul> <p>Provides a group description.</p>"},{"location":"modules/mod_shared_roster_ldap/#modulesmod_shared_roster_ldapuserdesc","title":"<code>modules.mod_shared_roster_ldap.userdesc</code>","text":"<ul> <li>Syntax: string</li> <li>Default: <code>\"cn\"</code></li> <li>Example: <code>userdesc = \"cn\"</code></li> </ul> <p>Provides a human-readable user name.</p>"},{"location":"modules/mod_shared_roster_ldap/#modulesmod_shared_roster_ldapuseruid","title":"<code>modules.mod_shared_roster_ldap.useruid</code>","text":"<ul> <li>Syntax: string</li> <li>Default: <code>\"cn\"</code></li> <li>Example: <code>useruid = \"cn\"</code></li> </ul> <p>Provides a username.</p>"},{"location":"modules/mod_shared_roster_ldap/#modulesmod_shared_roster_ldapmemberattr","title":"<code>modules.mod_shared_roster_ldap.memberattr</code>","text":"<ul> <li>Syntax: string</li> <li>Default: <code>\"memberUid\"</code></li> <li>Example: <code>memberattr = \"memberUid\"</code></li> </ul> <p>Holds group members' IDs.</p>"},{"location":"modules/mod_shared_roster_ldap/#modulesmod_shared_roster_ldapmemberattr_format","title":"<code>modules.mod_shared_roster_ldap.memberattr_format</code>","text":"<ul> <li>Syntax: string</li> <li>Default: <code>\"%u\"</code></li> <li>Example: <code>memberattr_format = \"%u\"</code></li> </ul> <p>Simple LDAP expression for extracting a user ID.</p>"},{"location":"modules/mod_shared_roster_ldap/#modulesmod_shared_roster_ldapmemberattr_format_re","title":"<code>modules.mod_shared_roster_ldap.memberattr_format_re</code>","text":"<ul> <li>Syntax: string</li> <li>Default: <code>\"\"</code></li> <li>Example: <code>memberattr_format_re = \"\"</code></li> </ul> <p>Allows extracting the user ID with a regular expression.</p>"},{"location":"modules/mod_shared_roster_ldap/#options-parameters","title":"Options: parameters","text":""},{"location":"modules/mod_shared_roster_ldap/#modulesmod_shared_roster_ldapauth_check","title":"<code>modules.mod_shared_roster_ldap.auth_check</code>","text":"<ul> <li>Syntax: boolean</li> <li>Default: <code>true</code></li> <li>Example: <code>auth_check = true</code></li> </ul> <p>Enables checking if a shared roster entry actually exists in the XMPP database.</p>"},{"location":"modules/mod_shared_roster_ldap/#modulesmod_shared_roster_ldapuser_cache_validity","title":"<code>modules.mod_shared_roster_ldap.user_cache_validity</code>","text":"<ul> <li>Syntax: positive integer</li> <li>Default: <code>300</code></li> <li>Example: <code>user_cache_validity = 300</code></li> </ul> <p>Specifies in seconds how long are the roster entries kept in the cache.</p>"},{"location":"modules/mod_shared_roster_ldap/#modulesmod_shared_roster_ldapgroup_cache_validity","title":"<code>modules.mod_shared_roster_ldap.group_cache_validity</code>","text":"<ul> <li>Syntax: positive integer</li> <li>Default: <code>300</code></li> <li>Example: <code>group_cache_validity = 300</code></li> </ul> <p>Specifies in seconds how long is the user's membership in a group kept in the cache.</p>"},{"location":"modules/mod_shared_roster_ldap/#modulesmod_shared_roster_ldapuser_cache_size","title":"<code>modules.mod_shared_roster_ldap.user_cache_size</code>","text":"<ul> <li>Syntax: positive integer</li> <li>Default: <code>1000</code></li> <li>Example: <code>user_cache_size = 1000</code></li> </ul> <p>Specifies how many shared roster items are kept in the cache.</p>"},{"location":"modules/mod_shared_roster_ldap/#modulesmod_shared_roster_ldapgroup_cache_size","title":"<code>modules.mod_shared_roster_ldap.group_cache_size</code>","text":"<ul> <li>Syntax: positive integer</li> <li>Default: <code>1000</code></li> <li>Example: <code>group_cache_size = 1000</code></li> </ul> <p>Specifies how many roster group entries are kept in cache.</p>"},{"location":"modules/mod_shared_roster_ldap/#options-ldap-filters","title":"Options: LDAP filters","text":""},{"location":"modules/mod_shared_roster_ldap/#modulesmod_shared_roster_ldaprfilter","title":"<code>modules.mod_shared_roster_ldap.rfilter</code>","text":"<ul> <li>Syntax: string</li> <li>Default: <code>\"\"</code></li> <li>Example: <code>rfilter = \"\"</code></li> </ul> <p>Used to find names of all shared roster groups.</p>"},{"location":"modules/mod_shared_roster_ldap/#modulesmod_shared_roster_ldapgfilter","title":"<code>modules.mod_shared_roster_ldap.gfilter</code>","text":"<ul> <li>Syntax: string</li> <li>Default: <code>\"\"</code></li> <li>Example: <code>gfilter = \"\"</code></li> </ul> <p>Used for retrieving the human-readable name and the members of a group.</p>"},{"location":"modules/mod_shared_roster_ldap/#modulesmod_shared_roster_ldapufilter","title":"<code>modules.mod_shared_roster_ldap.ufilter</code>","text":"<ul> <li>Syntax: string</li> <li>Default: <code>\"\"</code></li> <li>Example: <code>ufilter = \"\"</code></li> </ul> <p>Used for retrieving the human-readable name of the roster entries.</p>"},{"location":"modules/mod_shared_roster_ldap/#modulesmod_shared_roster_ldapfilter","title":"<code>modules.mod_shared_roster_ldap.filter</code>","text":"<ul> <li>Syntax: string</li> <li>Default: <code>\"\"</code></li> <li>Example: <code>filter = \"(objectClass=inetOrgPerson)\"</code></li> </ul> <p>Filter AND-ed with previous filters.</p>"},{"location":"modules/mod_shared_roster_ldap/#example-configuration","title":"Example Configuration","text":"<pre><code>[modules.mod_shared_roster_ldap]\n  base = \"ou=Users,dc=ejd,dc=com\"\n  groupattr = \"ou\"\n  memberattr = \"cn\"\n  userdesc = \"cn\"\n  filter = \"(objectClass=inetOrgPerson)\"\n  rfilter = \"(objectClass=inetOrgPerson)\"\n  group_cache_validity = 1\n  user_cache_validity = 1\n</code></pre>"},{"location":"modules/mod_sic/","title":"mod_sic","text":""},{"location":"modules/mod_sic/#module-description","title":"Module Description","text":"<p>This module implements XEP-0279: Server IP Check. It allows clients to ask the server, what is the client IP and port from the server's perspective.</p>"},{"location":"modules/mod_sic/#options","title":"Options","text":""},{"location":"modules/mod_sic/#modulesmod_siciqdisctype","title":"<code>modules.mod_sic.iqdisc.type</code>","text":"<ul> <li>Syntax: string, one of <code>\"one_queue\"</code>, <code>\"no_queue\"</code>, <code>\"queues\"</code>, <code>\"parallel\"</code></li> <li>Default: <code>\"one_queue\"</code></li> </ul> <p>Strategy to handle incoming stanzas. For details, please refer to IQ processing policies.</p>"},{"location":"modules/mod_sic/#example-configuration","title":"Example Configuration","text":"<pre><code>[modules.mod_sic]\n</code></pre>"},{"location":"modules/mod_smart_markers/","title":"mod_smart_markers","text":""},{"location":"modules/mod_smart_markers/#module-description","title":"Module Description","text":"<p>Smart markers are an experimental feature, described in detail as our Open XMPP Extension for markers.</p>"},{"location":"modules/mod_smart_markers/#options","title":"Options","text":""},{"location":"modules/mod_smart_markers/#modulesmod_smart_markersiqdisc","title":"<code>modules.mod_smart_markers.iqdisc</code>","text":"<ul> <li>Syntax: string, one of <code>\"one_queue\"</code>, <code>\"no_queue\"</code>, <code>\"queues\"</code>, <code>\"parallel\"</code></li> <li>Default: <code>\"no_queue\"</code></li> </ul> <p>Strategy to handle incoming IQ requests. For details, please refer to IQ processing policies.</p>"},{"location":"modules/mod_smart_markers/#modulesmod_smart_markersbackend","title":"<code>modules.mod_smart_markers.backend</code>","text":"<ul> <li>Syntax: string, one of <code>\"rdbms\"</code>, <code>\"rdbms_async\"</code></li> <li>Default: <code>\"rdbms\"</code></li> <li>Example: <code>backend = \"rdbms_async\"</code></li> </ul> <p>Only RDBMS storage is supported, but <code>rdbms</code> means flushes to DB are synchronous with each message, while <code>rdbms_async</code> is instead asynchronous.</p> <p>Regular <code>rdbms</code> has worse performance characteristics, but it has better consistency properties, as events aren't lost nor reordered. <code>rdbms_async</code> processes events asynchronously and potentially unloading a lot of aggregation from the DB. Like the case of the asynchronous workers for MAM, it is the preferred method, with the risk messages being lost on an ungraceful shutdown.</p>"},{"location":"modules/mod_smart_markers/#modulesmod_smart_markerskeep_private","title":"<code>modules.mod_smart_markers.keep_private</code>","text":"<ul> <li>Syntax: boolean</li> <li>Default: <code>false</code></li> <li>Example: <code>keep_private = true</code></li> </ul> <p>This indicates if markers are meant to be private to the sender of the marker (setting <code>keep_private</code> as <code>true</code>), or if they can be public.</p> <p>By default markers are public to the conversation where they are sent, so they'll be routed to all recipients, and anyone in the chat can see where its peers are at any time, i.e., the Facebook Messenger model; but they can be configured private, so markers won't be routed to anyone, and a user who fetches their status will only receive information for markers they have sent alone, i.e., the Slack model.</p>"},{"location":"modules/mod_smart_markers/#example-configuration","title":"Example configuration","text":"<pre><code>[modules.mod_smart_markers]\n  backend = \"rdbms\"\n  iqdisc = \"parallel\"\n</code></pre>"},{"location":"modules/mod_smart_markers/#implementation-details","title":"Implementation details","text":"<p>The current implementation has some limitations:</p> <ul> <li>It does not verify that markers only move forwards, hence a user can, intentionally or accidentally, send a marker to an older message, and this would override newer ones.</li> <li>It stores markers sent only for users served on a local domain. It does not store received markers, so if the peer is reached across federation, this module won't track markers for federated users. Therefore extensions that desire seeing not only the sender's markers but also the peer's markers, won't work with the current implementation across federated users.</li> </ul>"},{"location":"modules/mod_stream_management/","title":"mod_stream_management","text":""},{"location":"modules/mod_stream_management/#module-description","title":"Module Description","text":"<p>Enables XEP-0198: Stream Management. Implements logic regarding session resumption and acknowledgement as well as the management of the session tables and configuration.</p>"},{"location":"modules/mod_stream_management/#options","title":"Options","text":""},{"location":"modules/mod_stream_management/#modulesmod_stream_managementbackend","title":"<code>modules.mod_stream_management.backend</code>","text":"<ul> <li>Syntax: string: <code>\"mnesia\"</code> or <code>\"cets\"</code></li> <li>Default: <code>\"mnesia\"</code></li> <li>Example: <code>backend = \"mnesia\"</code></li> </ul> <p>Backend for in-memory session data stored by this module.</p> <p>Warning</p> <p>The corresponding internal database has to be enabled.</p>"},{"location":"modules/mod_stream_management/#modulesmod_stream_managementbuffer","title":"<code>modules.mod_stream_management.buffer</code>","text":"<ul> <li>Syntax: boolean</li> <li>Default: true</li> <li>Example: <code>buffer = false</code></li> </ul> <p>Enables buffer for messages to be acknowledged.</p>"},{"location":"modules/mod_stream_management/#modulesmod_stream_managementbuffer_max","title":"<code>modules.mod_stream_management.buffer_max</code>","text":"<ul> <li>Syntax: positive integer or string <code>\"infinity\"</code></li> <li>Default: <code>100</code></li> <li>Example: <code>buffer_max = 500</code></li> </ul> <p>Buffer size for messages yet to be acknowledged.</p>"},{"location":"modules/mod_stream_management/#modulesmod_stream_managementack","title":"<code>modules.mod_stream_management.ack</code>","text":"<ul> <li>Syntax: boolean</li> <li>Default: true</li> <li>Example: <code>ack = false</code></li> </ul> <p>Enables ack requests to be sent from the server to the client.</p>"},{"location":"modules/mod_stream_management/#modulesmod_stream_managementack_freq","title":"<code>modules.mod_stream_management.ack_freq</code>","text":"<ul> <li>Syntax: positive integer</li> <li>Default: <code>1</code></li> <li>Example: <code>ack_freq = 3</code></li> </ul> <p>Frequency of ack requests sent from the server to the client, e.g. 1 means a request after each stanza, 3 means a request after each 3 stanzas.</p>"},{"location":"modules/mod_stream_management/#modulesmod_stream_managementresume_timeout","title":"<code>modules.mod_stream_management.resume_timeout</code>","text":"<ul> <li>Syntax: positive integer, value given in seconds</li> <li>Default: <code>600</code></li> <li>Example: <code>resume_timeout = 600</code></li> </ul> <p>Timeout for the session resumption. Sessions will be removed after the specified number of seconds.</p>"},{"location":"modules/mod_stream_management/#stale_h-options","title":"Stale_h options","text":"<p>Enables keeping old server's <code>&lt;h&gt;</code> values after the resumption timed out. Disabled by default. When enabled, parameters for the garbage collection of these tables should be provided.</p>"},{"location":"modules/mod_stream_management/#modulesmod_stream_managementstale_henabled","title":"<code>modules.mod_stream_management.stale_h.enabled</code>","text":"<ul> <li>Syntax: boolean</li> <li>Default: <code>false</code></li> <li>Example: <code>enabled = true</code></li> </ul> <p>Enables <code>stale_h</code> configuration</p>"},{"location":"modules/mod_stream_management/#modulesmod_stream_managementstale_hrepeat_after","title":"<code>modules.mod_stream_management.stale_h.repeat_after</code>","text":"<ul> <li>Syntax: positive integer, value given in seconds</li> <li>Default: <code>1800</code> (half an hour)</li> <li>Example: <code>repeat_after = 1800</code></li> </ul> <p>How often the garbage collection will run in the background to clean this table.</p>"},{"location":"modules/mod_stream_management/#modulesmod_stream_managementstale_hgeriatric","title":"<code>modules.mod_stream_management.stale_h.geriatric</code>","text":"<ul> <li>Syntax: positive integer, value given in seconds</li> <li>Default: <code>3600</code> (one hour)</li> <li>Example: <code>geriatric = 3600</code></li> </ul> <p>The maximum lifespan of a record in memory. After this, they will be chased for cleanup.</p>"},{"location":"modules/mod_stream_management/#example-configuration","title":"Example Configuration","text":"<pre><code>[modules.mod_stream_management]\n  buffer_max = 30\n  ack_freq = 1\n  resume_timeout = 600\n  stale_h.enabled = true\n  stale_h.repeat_after = 1800\n  stale_h.geriatric = 3600\n</code></pre>"},{"location":"modules/mod_stream_management/#implementation-details","title":"Implementation details","text":"<p>Stream management state data is stored under the <code>mod_stream_management</code> key in the <code>#c2s_data.state_mod</code> map. The state data record, <code>sm_state</code>, has the following fields:</p> <ul> <li><code>buffer</code> - buffered stanzas not yet acked by the user</li> <li><code>buffer_size</code> - number of stanzas buffered for the user</li> <li><code>counter_in</code> - number of stanzas received by the server (server's <code>&lt;h&gt;</code>)</li> <li><code>counter_out</code> - number of stanzas delivered to the user and acked by the user (user's <code>&lt;h&gt;</code>)</li> <li><code>buffer_max</code> - server's capacity for buffering</li> <li><code>ack_freq</code> - how often the server requests acks</li> <li><code>peer</code> - in case of stream resumption, the <code>ejabberd_sm:sid()</code> identifiying the old session, or <code>gen_statem:from()</code> identifying the new session.</li> </ul> <p><code>mod_stream_management</code> introduces a new <code>resume_session</code> state to the C2S state machine, that is used by a session being closed to allow stream resumption.</p> <p>This module also has a Mnesia backend keeping a table defined as follows:</p> <pre><code>-record(sm_session,\n        {smid :: smid(),\n         sid :: ejabberd_sm:sid()\n        }).\n</code></pre> <p>where <code>smid</code> is a unique identifier \u2014 in this case a random binary, and <code>sid</code> is an opaque session identifier from <code>ejabberd_sm</code>, which is needed to find the previous session we want to resume from. This module implements hooks that run on connection removals and session cleanups, in order to clean records from a dying session; and it also implements registration callbacks, used when a session is registered for resumption.</p> <p>XEP version 1.6 requires the server to attempt giving the user the value of the server's <code>&lt;h&gt;</code> when a session timed out and cannot be resumed anymore. To be compliant with it, there's a second optional table:</p> <pre><code>-record(stream_mgmt_stale_h,\n        {smid :: smid(),\n         h :: non_neg_integer(),\n         stamp :: non_neg_integer()\n        }).\n</code></pre> <p>This table is created, together with a <code>gen_server</code> responsible for cleaning up the tables, when <code>stale_h</code> is set to true with the proper garbage collection configuration. Then, when removing a record from the <code>sm_session</code> table (which happens when the state of the previous session is also dropped), a new record is added to this new table with the <code>smid</code> and <code>h</code> values of the dropped session, together with a timestamp. Next, when a new session attempting resumption queries <code>mod_stream_management</code> for the data behind a <code>smid</code>, <code>mod_stream_management</code> can answer with one of the following:</p> <pre><code>{sid, ejabberd_sm:sid()} | {stale_h, non_neg_integer()} | {error, smid_not_found}.\n</code></pre> <p>And <code>mod_stream_management</code> will pattern-match and act accordingly.</p>"},{"location":"modules/mod_time/","title":"mod_time","text":""},{"location":"modules/mod_time/#module-description","title":"Module Description","text":"<p>This module enables support for communicating the local time of an entity.  It reports time in UTC according to the entity as well as the offset from UTC.  Protocol is described under XEP-0202: Entity Time.</p>"},{"location":"modules/mod_time/#options","title":"Options","text":""},{"location":"modules/mod_time/#modulesmod_timeiqdisctype","title":"<code>modules.mod_time.iqdisc.type</code>","text":"<ul> <li>Syntax: string, one of <code>\"one_queue\"</code>, <code>\"no_queue\"</code>, <code>\"queues\"</code>, <code>\"parallel\"</code></li> <li>Default: <code>\"one_queue\"</code></li> </ul> <p>Strategy to handle incoming stanzas. For details, please refer to IQ processing policies.</p>"},{"location":"modules/mod_time/#example-configuration","title":"Example Configuration","text":"<pre><code>[modules.mod_time]\n</code></pre>"},{"location":"modules/mod_vcard/","title":"mod_vcard","text":""},{"location":"modules/mod_vcard/#module-description","title":"Module Description","text":"<p>This module provides support for vCards, as specified in XEP-0054: vcard-temp and XEP-0055: Jabber Search.</p>"},{"location":"modules/mod_vcard/#options","title":"Options","text":""},{"location":"modules/mod_vcard/#modulesmod_vcardiqdisctype","title":"<code>modules.mod_vcard.iqdisc.type</code>","text":"<ul> <li>Syntax: string, one of <code>\"one_queue\"</code>, <code>\"no_queue\"</code>, <code>\"queues\"</code>, <code>\"parallel\"</code></li> <li>Default: <code>\"parallel\"</code></li> </ul> <p>Strategy to handle incoming stanzas. For details, please refer to IQ processing policies.</p>"},{"location":"modules/mod_vcard/#modulesmod_vcardhost","title":"<code>modules.mod_vcard.host</code>","text":"<ul> <li>Syntax: string</li> <li>Default: <code>\"vjud.@HOST@\"</code></li> <li>Example: <code>host = \"vjud.@HOST@\"</code></li> </ul> <p>Domain of the vCard User Directory, used for searching. <code>@HOST@</code> is replaced with the domain(s) supported by the cluster.</p>"},{"location":"modules/mod_vcard/#modulesmod_vcardsearch","title":"<code>modules.mod_vcard.search</code>","text":"<ul> <li>Syntax: boolean</li> <li>Default: <code>true</code></li> <li>Example: <code>search = false</code></li> </ul> <p>Enables/disables the domain set in the previous option. <code>false</code> makes searching for users impossible.</p>"},{"location":"modules/mod_vcard/#modulesmod_vcardbackend","title":"<code>modules.mod_vcard.backend</code>","text":"<ul> <li>Syntax: string, one of <code>\"ldap\"</code>, <code>\"rdbms\"</code>, <code>\"mnesia\"</code></li> <li>Default: <code>\"mnesia\"</code></li> <li>Example: <code>backend = \"rdbms\"</code></li> </ul> <p>vCard storage backend.</p> <p>Warning</p> <p>LDAP backend is read-only.</p>"},{"location":"modules/mod_vcard/#modulesmod_vcardmatches","title":"<code>modules.mod_vcard.matches</code>","text":"<ul> <li>Syntax: non-negative integer or the string <code>\"infinity\"</code></li> <li>Default: <code>30</code></li> <li>Example: <code>matches = 10</code></li> </ul> <p>Maximum search results to be returned to the user.</p>"},{"location":"modules/mod_vcard/#ldap-specific-options","title":"LDAP-specific options","text":"<p>The following options are the same as for the LDAP authentication module:</p>"},{"location":"modules/mod_vcard/#modulesmod_vcardldappool_tag","title":"<code>modules.mod_vcard.ldap.pool_tag</code>","text":""},{"location":"modules/mod_vcard/#modulesmod_vcardldapbase","title":"<code>modules.mod_vcard.ldap.base</code>","text":""},{"location":"modules/mod_vcard/#modulesmod_vcardldapuids","title":"<code>modules.mod_vcard.ldap.uids</code>","text":""},{"location":"modules/mod_vcard/#modulesmod_vcardldapfilter","title":"<code>modules.mod_vcard.ldap.filter</code>","text":""},{"location":"modules/mod_vcard/#modulesmod_vcardldapderef","title":"<code>modules.mod_vcard.ldap.deref</code>","text":""},{"location":"modules/mod_vcard/#modulesmod_vcardldapvcard_map","title":"<code>modules.mod_vcard.ldap.vcard_map</code>","text":"<ul> <li>Syntax: Array of TOML tables with the following keys: <code>\"vcard_field\"</code>, <code>\"ldap_pattern\"</code>, <code>\"ldap_field\"</code> and string values.</li> <li>Default: see description</li> <li>Example: <code>vcard_map = [{vcard_field = \"FN\", ldap_pattern = \"%s\", ldap_field = \"displayName\"}]</code></li> </ul> <p>Mappings between VCard and LDAP fields. For the default settings, please see <code>[MongooseIM root]/src/mod_vcard_ldap.erl</code>.</p>"},{"location":"modules/mod_vcard/#modulesmod_vcardldapsearch_fields","title":"<code>modules.mod_vcard.ldap.search_fields</code>","text":"<ul> <li>Syntax: Array of TOML tables with the following keys: <code>\"search_field\"</code>, <code>\"ldap_field\"</code> and string values.</li> <li>Default: see description</li> <li>Example: <code>search_fields = [{search_field = \"User\", ldap_field = \"%u\"}]</code></li> </ul> <p>Mappings between the human-readable search fields and LDAP fields. For the default settings, please see <code>[MongooseIM root]/src/mod_vcard_ldap.erl</code>.</p>"},{"location":"modules/mod_vcard/#modulesmod_vcardldapsearch_reported","title":"<code>modules.mod_vcard.ldap.search_reported</code>","text":"<ul> <li>Syntax: Array of TOML tables with the following keys: <code>\"search_field\"</code>, <code>\"vcard_field\"</code> and string values.</li> <li>Default: see description</li> <li>Example: <code>search_reported = [{search_field = \"Full Name\", vcard_field = \"FN\"}]</code></li> </ul> <p>Mappings between the human-readable search fields and VCard fields. For the default settings, please see <code>[MongooseIM root]/src/mod_vcard_ldap.erl</code>.</p>"},{"location":"modules/mod_vcard/#modulesmod_vcardldapsearch_operator","title":"<code>modules.mod_vcard.ldap.search_operator</code>","text":"<ul> <li>Syntax: string, one of <code>\"or\"</code>, <code>\"and\"</code></li> <li>Default: <code>\"and\"</code></li> <li>Example: <code>search_operator = \"or\"</code></li> </ul> <p>A default operator used for search query items.</p>"},{"location":"modules/mod_vcard/#modulesmod_vcardldapbinary_search_fields","title":"<code>modules.mod_vcard.ldap.binary_search_fields</code>","text":"<ul> <li>Syntax: array of strings</li> <li>Default: <code>[]</code></li> <li>Example: <code>binary_search_fields = [\"User\", \"Full Name\"]</code></li> </ul> <p>An array of search fields, which values should be Base64-encoded by MongooseIM before sending to LDAP.</p>"},{"location":"modules/mod_vcard/#example-configuration","title":"Example Configuration","text":"<pre><code>[modules.mod_vcard]\n  matches = 1\n  search = true\n  host = \"directory.example.com\"\n\n  [[modules.mod_vcard.ldap.vcard_map]]\n    vcard_field = \"FAMILY\"\n    ldap_pattern = \"%s\"\n    ldap_field = \"sn\"\n\n  [[modules.mod_vcard.ldap.vcard_map]]\n    vcard_field = \"FN\"\n    ldap_pattern = \"%s\"\n    ldap_field = \"displayName\"\n\n  [[modules.mod_vcard.ldap.search_fields]]\n    search_field = \"User\"\n    ldap_field = \"%u\"\n\n  [[modules.mod_vcard.ldap.search_fields]]\n    search_field = \"Full Name\"\n    ldap_field = \"displayName\"\n\n  [[modules.mod_vcard.ldap.search_reported]]\n    search_field = \"Full Name\"\n    vcard_field = \"FN\"\n\n  [[modules.mod_vcard.ldap.search_reported]]\n    search_field = \"Given Name\"\n    vcard_field = \"FIRST\"\n</code></pre>"},{"location":"modules/mod_vcard/#metrics","title":"Metrics","text":"<p>If you'd like to learn more about metrics in MongooseIM, please visit MongooseIM metrics page.</p> Backend action Description (when it gets incremented) <code>set_vcard</code> A vCard is set in a DB. <code>get_vcard</code> A specific vCard is retrieved from a DB. <code>search</code> A vCard search is performed."},{"location":"modules/mod_version/","title":"mod_version","text":""},{"location":"modules/mod_version/#module-description","title":"Module description","text":"<p>This module provides the functionality specified in XEP-0092: Software Version.</p>"},{"location":"modules/mod_version/#options","title":"Options","text":""},{"location":"modules/mod_version/#modulesmod_versioniqdisctype","title":"<code>modules.mod_version.iqdisc.type</code>","text":"<ul> <li>Syntax: string, one of <code>\"one_queue\"</code>, <code>\"no_queue\"</code>, <code>\"queues\"</code>, <code>\"parallel\"</code></li> <li>Default: <code>\"no_queue\"</code></li> </ul> <p>Strategy to handle incoming stanzas. For details, please refer to IQ processing policies.</p>"},{"location":"modules/mod_version/#modulesmod_versionos_info","title":"<code>modules.mod_version.os_info</code>","text":"<ul> <li>Syntax: boolean</li> <li>Default: <code>false</code></li> <li>Example: <code>os_info = true</code></li> </ul> <p>Determines whether information about the operating system will be included.</p>"},{"location":"modules/mod_version/#example-configuration","title":"Example configuration","text":"<pre><code>[modules.mod_version]\n  os_info = true\n</code></pre>"},{"location":"open-extensions/inbox/","title":"Inbox","text":"<p>When a messaging client starts, it typically builds a UI showing a list of recent chats, with metadata attached to them like, whether any chat has new messages and how many, or if it is fully read, or if they are for example muted and until when. In MongooseIM this functionality is provided by mod_inbox.</p>"},{"location":"open-extensions/inbox/#terminology","title":"Terminology:","text":""},{"location":"open-extensions/inbox/#the-inbox","title":"The Inbox","text":"<p>It is personal to a given user and represents the current status of the conversations of that user. It's the front-page of the chat feature.</p>"},{"location":"open-extensions/inbox/#inbox-entry","title":"Inbox entry","text":"<p>It is a specific conversation, that the user can identify by the recipient jid, that is, the user jid in case of a one-to-one chat, or the room jid in case of a group-chat.</p>"},{"location":"open-extensions/inbox/#box-also-referred-to-as-folder","title":"Box (also referred to as \"folder\")","text":"<p>A category where entries can be classified. The default box is the active box, simply called inbox. There is a second box, called archive, where entries can be thrown into and not displayed by default. More boxes can be created through configuration.</p>"},{"location":"open-extensions/inbox/#entity-use-cases","title":"Entity Use Cases","text":""},{"location":"open-extensions/inbox/#discovering-inbox-services","title":"Discovering Inbox Services","text":"<p>An entity can discover the inbox service via a Features Discovery request: <pre><code>&lt;!-- Client --&gt;\n&lt;iq type='get' id='a96d4244760853af7b3ae84faa1a40fb' to='localhost'&gt;\n    &lt;query xmlns='http://jabber.org/protocol/disco#info'/&gt;\n&lt;/iq&gt;\n\n&lt;!-- Server --&gt;\n&lt;iq from='localhost' to='alice@localhost/res1' id='a96d4244760853af7b3ae84faa1a40fb' type='result'&gt;\n    &lt;query xmlns='http://jabber.org/protocol/disco#info'&gt;\n        &lt;identity category='server' type='im' name='MongooseIM'/&gt;\n        &lt;feature var='erlang-solutions.com:xmpp:inbox:0'/&gt;\n    &lt;/query&gt;\n&lt;/iq&gt;\n</code></pre></p>"},{"location":"open-extensions/inbox/#fetching-the-inbox","title":"Fetching the inbox","text":""},{"location":"open-extensions/inbox/#querying","title":"Querying","text":"<p>The inbox is fetched using regular XMPP Data Forms. To request the supported form, the client should send: <pre><code>&lt;!-- Client --&gt;\n&lt;iq type='get' id='some_unique_id'&gt;\n  &lt;query xmlns='erlang-solutions.com:xmpp:inbox:0'/&gt;\n&lt;/iq&gt;\n\n&lt;!-- Server --&gt;\n&lt;iq from='alice@localhost' to='alice@localhost/res1' id='some_unique_id' type='result'&gt;\n  &lt;query xmlns='erlang-solutions.com:xmpp:inbox:0'&gt;\n    &lt;x xmlns='jabber:x:data' type='form'&gt;\n      &lt;field type='hidden' var='FORM_TYPE'&gt;&lt;value&gt;erlang-solutions.com:xmpp:inbox:0&lt;/value&gt;&lt;/field&gt;\n      &lt;field var='start' type='text-single'/&gt;\n      &lt;field var='end' type='text-single'/&gt;\n      &lt;field var='order' type='list-single'&gt;\n        &lt;value&gt;desc&lt;/value&gt;\n        &lt;option label='Ascending by timestamp'&gt;&lt;value&gt;asc&lt;/value&gt;&lt;/option&gt;\n        &lt;option label='Descending by timestamp'&gt;&lt;value&gt;desc&lt;/value&gt;&lt;/option&gt;\n      &lt;/field&gt;\n      &lt;field var='hidden_read' type='text-single' value='false'/&gt;\n      &lt;field var='box' type='list-simple' value='all'&gt;\n        &lt;option label='all'&gt;&lt;value&gt;all&lt;/value&gt;&lt;/option&gt;\n        &lt;option label='inbox'&gt;&lt;value&gt;inbox&lt;/value&gt;&lt;/option&gt;\n        &lt;option label='archive'&gt;&lt;value&gt;archive&lt;/value&gt;&lt;/option&gt;\n        &lt;option label='bin'&gt;&lt;value&gt;bin&lt;/value&gt;&lt;/option&gt;\n      &lt;/field&gt;\n      &lt;field var='archive' type='boolean'/&gt;\n    &lt;/x&gt;\n  &lt;/query&gt;\n&lt;/iq&gt;\n</code></pre></p> <p>To fetch the inbox, the client should send: <pre><code>&lt;iq type='set' id='10bca'&gt;\n  &lt;inbox xmlns='erlang-solutions.com:xmpp:inbox:0' queryid='b6'/&gt;\n&lt;/iq&gt;\n</code></pre></p> <p>Then the client should receive: <pre><code>&lt;message from=\"alice@localhost\" to=\"alice@localhost/res1\" id=\"9b759\"&gt;\n  &lt;result xmlns=\"erlang-solutions.com:xmpp:inbox:0\" unread=\"0\" queryid=\"b6\"&gt;\n    &lt;forwarded xmlns=\"urn:xmpp:forward:0\"&gt;\n      &lt;delay xmlns=\"urn:xmpp:delay\" stamp=\"2018-07-10T23:08:25.123456Z\"/&gt;\n      &lt;message xml:lang=\"en\" type=\"chat\" to=\"bob@localhost/res1\" from=\"alice@localhost/res1\" id=\u201d123\u201d&gt;\n        &lt;body&gt;Hello&lt;/body&gt;\n      &lt;/message&gt;\n    &lt;/forwarded&gt;\n    &lt;box&gt;inbox&lt;/box&gt;\n    &lt;archive&gt;false&lt;/archive&gt;\n    &lt;mute&gt;0&lt;/mute&gt;\n  &lt;/result&gt;\n&lt;/message&gt;\n\n&lt;iq from=\"alice@localhost\" to=\"alice@localhost/res1\" id=\"b6\" type=\"result\"&gt;\n  &lt;fin xmlns='erlang-solutions.com:xmpp:inbox:0'&gt;\n    &lt;count&gt;1&lt;/count&gt;\n    &lt;unread-messages&gt;0&lt;/unread-messages&gt;\n    &lt;active-conversations&gt;0&lt;/active-conversations&gt;\n  &lt;/fin&gt;\n&lt;/iq&gt;\n</code></pre> where none-or-many <code>message</code> stanzas are sent to the requesting resource describing each inbox entry, and a final <code>iq-fin</code> stanza marks the end of the inbox query, Inbox query result IQ stanza returns the following values:</p> <ul> <li><code>count</code>: the total number of conversations (if <code>hidden_read</code> value was set   to true, this value will be equal to <code>active_conversations</code>)</li> <li><code>unread-messages</code>: total number of unread messages from all   conversations</li> <li><code>active-conversations</code>: the number of conversations with unread   message(s)</li> </ul> <p>Note that the <code>queryid</code> field is optional, and if not provided, the answers will fall back to the <code>id</code> field of the IQ query.</p>"},{"location":"open-extensions/inbox/#filtering-and-ordering","title":"Filtering and ordering","text":"<p>Inbox query results may be filtered by time range and box, and sorted by timestamp. By default, <code>mod_inbox</code> returns all conversations, listing the ones updated most recently first.</p> <p>A client may specify the following parameters:</p> <ul> <li>variable <code>start</code>: Start date for the result set (value: ISO timestamp)</li> <li>variable <code>end</code>: End date for the result set (value: ISO timestamp)</li> <li>variable <code>order</code>: Order by timestamp (values: <code>asc</code>, <code>desc</code>)</li> <li>variable <code>hidden_read</code>: Show only conversations with unread messages (values: <code>true</code>, <code>false</code>)</li> <li>variable <code>box</code>: Indicate which box is desired. Supported are <code>all</code>, <code>inbox</code>, <code>archive</code> and <code>bin</code>. More boxes can be implemented, see mod_inbox \u2013 Boxes. If not provided, all except the bin are returned.</li> <li>variable <code>archive</code> [deprecated, prefer <code>box</code>]: whether to query the archive inbox. <code>true</code> means querying only the archive box, <code>false</code> means querying only the active box. If the flag is not set, it is assumed all entries are requested. This is kept for backwards compatibility reasons, use the <code>box</code> flag instead.</li> </ul> <p>They are encoded inside a standard XMPP Data Forms format. Dates must be formatted according to XMPP Date and Time Profiles. It is not mandatory to add an empty data form if a client prefers to use default values (<code>&lt;inbox/&gt;</code> element may be empty). However, the IQ type must be \"set\", even when the data form is missing.</p>"},{"location":"open-extensions/inbox/#limiting-the-query","title":"Limiting the query","text":"<p>It can happen that the amount of inbox entries is too big for a given user, even after filtering by <code>start</code> and <code>end</code> as already available in mod_inbox. Hence, we need to set a fixed limit of the number of entries that are requested. For this, we can use a <code>&lt;max&gt;</code> attribute as defined in XEP-0059: #2.1 Limiting the Number of Items: <pre><code>&lt;iq type='set' id='10bca'&gt;\n  &lt;inbox xmlns='erlang-solutions.com:xmpp:inbox:0' queryid='b6'&gt;\n    &lt;x xmlns='jabber:x:data' type='form'&gt;\n      &lt;field type='hidden' var='FORM_TYPE'&gt;&lt;value&gt;erlang-solutions.com:xmpp:inbox:0&lt;/value&gt;&lt;/field&gt;\n      &lt;field type='list-single' var='order'&gt;&lt;value&gt;asc&lt;/value&gt;&lt;/field&gt;\n      &lt;field type='text-single' var='hidden_read'&gt;&lt;value&gt;true&lt;/value&gt;&lt;/field&gt;\n      &lt;field type='list-single' var='box'&gt;&lt;value&gt;inbox&lt;/value&gt;&lt;/field&gt;\n    &lt;/x&gt;\n    &lt;set xmlns='http://jabber.org/protocol/rsm'&gt;\n      &lt;max&gt;Max&lt;/max&gt;\n    &lt;/set&gt;\n  &lt;/inbox&gt;\n&lt;/iq&gt;\n</code></pre> where <code>Max</code> is a non-negative integer.</p> <p>Inbox also has partial support for pagination as described in XEP-0059. Note that therefore there are two ways to denote pages, the standard RSM mechanism and the custom inbox form. If both are used, the RSM marker will override the respective inbox form, as in, <code>before</code> will override <code>start</code>, and <code>after</code> will override <code>end</code>.</p> <p>Note</p> <p>Inbox pagination does not support total count nor indexes as described in XEP-0059: #2.6 Retrieving a Page Out of Order.</p>"},{"location":"open-extensions/inbox/#properties-of-an-entry","title":"Properties of an entry","text":"<p>Given an entry, certain properties are defined for such an entry:</p>"},{"location":"open-extensions/inbox/#box","title":"Box","text":"<p>Clients usually have two different boxes for the inbox: the regular one, simply called the inbox (or the active inbox), and an archive box, where clients can manually throw conversations they don't want displayed in the default UI. A third box is the trash bin, where deleted entries go and are cleaned up in regular intervals.</p> <p>It is expected that entries will reside in the archive until they're either manually moved back to the active box, or they receive a new message: in such case the entry should jump back to the active box automatically.</p> <p>More boxes can be implemented, see mod_inbox#boxes. Movement between boxes can be achieved through the right XMPP IQ, no more automatic movements are developed as in the case of inbox-archive.</p>"},{"location":"open-extensions/inbox/#read","title":"Read","text":"<p>Entries keep a count of unread messages that is incremented automatically upon receiving a new message, and (in the current implementation) set to zero upon receiving either a message by one-self, or an appropriate chat marker as defined in XEP-0333 (which markers reset the count is a matter of configuration, see doc).</p> <p>This property can also be manually set to zero or to one using the appropriate requests as explained below.</p>"},{"location":"open-extensions/inbox/#muted","title":"Muted","text":"<p>Entries can be muted for given periods of time, and likewise, unmuted. This changes the UI representation, and also, means that the user won't get PNs (Push Notifications) for this entry, until the time set expires, or the user sets otherwise. Knowledge of this is necessary to help build the UI.</p> <p>Expected times can be extended before the period has expired, without the need to first unmuting. When muting a conversation, the final timestamp will be calculated by the server as the current time plus the requested period, in seconds, to centralise knowledge of UTC clocks. When muting an already muted conversation, the timestamp is simply overridden following the previous specification.</p>"},{"location":"open-extensions/inbox/#other-properties","title":"Other properties","text":"<p>No more properties are expected, but one could envisage notions of flagging conversations with different colours, for example according to their urgency, or a client-specific category (work, personal, fitness, and whatnot), or pins to denote an entry should be always displayed (possibly in a special format, like on top of the box). The design of the protocol, and the implementation, aims to leave room for future extensions.</p>"},{"location":"open-extensions/inbox/#getting-properties","title":"Getting properties","text":"<p>To fetch all supported properties, a classic Data Form is used. Upon the client sending an iq-get without a jid: <pre><code>&lt;iq id='some_unique_id' type='get'&gt;\n  &lt;query xmlns='erlang-solutions.com:xmpp:inbox:0#conversation'/&gt;\n&lt;/iq&gt;\n</code></pre> The server would respond with: <pre><code>&lt;iq from='alice@localhost' to='alice@localhost/res1' id='some_unique_id' type='result'&gt;\n  &lt;query xmlns='erlang-solutions.com:xmpp:inbox:0#conversation'&gt;\n    &lt;x xmlns='jabber:x:data' type='form'&gt;\n      &lt;field type='hidden' var='FORM_TYPE'&gt;&lt;value&gt;erlang-solutions.com:xmpp:inbox:0&lt;/value&gt;&lt;/field&gt;\n      &lt;field var='archive' type='boolean' value='false'/&gt;\n      &lt;field var='read' type='boolean' value='false'/&gt;\n      &lt;field var='mute' type='text-single' value='0'/&gt;\n      &lt;field var='box' type='list-simple' value='all'&gt;\n        &lt;option label='all'&gt;&lt;value&gt;all&lt;/value&gt;&lt;/option&gt;\n        &lt;option label='inbox'&gt;&lt;value&gt;inbox&lt;/value&gt;&lt;/option&gt;\n        &lt;option label='archive'&gt;&lt;value&gt;archive&lt;/value&gt;&lt;/option&gt;\n        &lt;option label='bin'&gt;&lt;value&gt;bin&lt;/value&gt;&lt;/option&gt;\n      &lt;/field&gt;\n    &lt;/x&gt;\n  &lt;/query&gt;\n&lt;/iq&gt;\n</code></pre></p> <p>If the properties of a certain entry were to be fetched, it can easily be done with: <pre><code>&lt;iq id='some_unique_id' type='get'&gt;\n  &lt;query xmlns='erlang-solutions.com:xmpp:inbox:0#conversation' jid='bob@localhost'/&gt;\n&lt;/iq&gt;\n</code></pre> To which the server will reply, just like before, with: <pre><code>&lt;iq id='some_unique_id' to='alice@localhost/res1' type='result'&gt;\n  &lt;query xmlns='erlang-solutions.com:xmpp:inbox:0#conversation'&gt;\n    &lt;box&gt;inbox&lt;/box&gt;\n    &lt;archive&gt;false&lt;/archive&gt;\n    &lt;mute&gt;0&lt;/mute&gt;\n    &lt;read&gt;true&lt;/read&gt;\n  &lt;/query&gt;\n&lt;/iq&gt;\n</code></pre></p> <p>If an entire entry wanted to be queried, and not only its attributes, a <code>complete='true'</code> can be provided: <pre><code>&lt;iq id='some_unique_id' type='get'&gt;\n  &lt;query xmlns='erlang-solutions.com:xmpp:inbox:0#conversation' jid='bob@localhost' complete='true'/&gt;\n&lt;/iq&gt;\n</code></pre> To which the server will reply, just like before, with: <pre><code>&lt;iq id='some_unique_id' to='alice@localhost/res1' type='result'&gt;\n  &lt;query xmlns='erlang-solutions.com:xmpp:inbox:0#conversation'&gt;\n    &lt;forwarded xmlns=\"urn:xmpp:forward:0\"&gt;\n      &lt;delay xmlns=\"urn:xmpp:delay\" stamp=\"2018-07-10T23:08:25.123456Z\"/&gt;\n      &lt;message xml:lang=\"en\" type=\"chat\" to=\"bob@localhost/res1\" from=\"alice@localhost/res1\" id=\u201d123\u201d&gt;\n        &lt;body&gt;Hello&lt;/body&gt;\n      &lt;/message&gt;\n    &lt;/forwarded&gt;\n    &lt;archive&gt;false&lt;/archive&gt;\n    &lt;mute&gt;0&lt;/mute&gt;\n    &lt;read&gt;true&lt;/read&gt;\n  &lt;/query&gt;\n&lt;/iq&gt;\n</code></pre></p>"},{"location":"open-extensions/inbox/#setting-properties","title":"Setting properties","text":"<p>Setting properties is done using the standard XMPP pattern of <code>iq-query</code> and <code>iq-result</code>, as below: <pre><code>&lt;iq id='some_unique_id' type='set'&gt;\n  &lt;query xmlns='erlang-solutions.com:xmpp:inbox:0#conversation' jid='bob@localhost'&gt;\n    &lt;Property&gt;Value&lt;/Property&gt;\n    &lt;!-- Possibly other properties --&gt;\n  &lt;/query&gt;\n&lt;/iq&gt;\n</code></pre> where <code>Property</code> and <code>Value</code> are a list of key-value pairs as follows:</p> <ul> <li><code>box</code>: <code>inbox</code>, <code>archive</code>, or a custom value if this has been extended.</li> <li><code>archive</code>: <code>true</code> or <code>false</code></li> <li><code>mute</code>: number of seconds to mute for. Choose <code>0</code> for unmuting.</li> <li><code>read</code> (adjective, not verb): <code>true</code> or <code>false</code>. Setting to true essentially sets the unread-count to <code>0</code>, <code>false</code> sets the unread-count to <code>1</code> (if it was equal to <code>0</code>, otherwise it lefts it unchanged). No other possibilities are offered, to reduce the risk of inconsistencies or problems induced by a faulty client.</li> </ul> <p>Note that resetting the inbox count will not be forwarded. While a chat marker will be forwarded to the interlocutor(s), (including the case of a big groupchat with thousands of participants), this reset stanza will not.</p> <p>If the query was successful, the server will answer with two stanzas, following the classic pattern of broadcasting state changes. First, it would send a message with a <code>&lt;x&gt;</code> children containing all new configuration, to the bare-jid of the user: this facilitates broadcasting to all online resources to successfully synchronise their interfaces. <pre><code>&lt;message from='alice@localhost' to='alice@localhost' id='some_unique_id'&gt;\n  &lt;x xmlns='erlang-solutions.com:xmpp:inbox:0#conversation' jid='bob@localhost'&gt;\n    &lt;box&gt;inbox&lt;/box&gt;\n    &lt;archive&gt;false&lt;/archive&gt;\n    &lt;mute&gt;0&lt;/mute&gt;\n    &lt;read&gt;true&lt;/read&gt;\n  &lt;/x&gt;\n&lt;/message&gt;\n</code></pre> where <code>&lt;mute&gt;</code> may contain either a zero, to denote unmuted, or a RFC3339 timestamp, as in <code>2021-02-25T08:44:14.323836Z</code>.</p> <p>To the requesting resource, a simple iq-result would be then sent to notify of success, as required by the iq directives of the XMPP RFCs: <pre><code>&lt;iq id='some_unique_id' to='alice@localhost/res1' type='result'/&gt;\n</code></pre></p> <p>If the request was not successful, the server would then answer as in: <pre><code>&lt;iq to='alice@localhost/res1' type='error'&gt;\n  &lt;error type='Type'&gt;\n    &lt;Condition xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/&gt;\n  &lt;/error&gt;\n&lt;/iq&gt;\n</code></pre> Where <code>Type</code> will usually be <code>modify</code> or <code>cancel</code>, as explained in https://xmpp.org/rfcs/rfc6120.html#stanzas-error-syntax, and <code>Condition</code> is as explained in https://xmpp.org/rfcs/rfc6120.html#stanzas-error-conditions, <code>bad-request</code> being the most common.</p> <p>This final syntax for the protocol has been chosen as it allows for better pipelining of requests, and it remains consistent with how, for example, rooms are configured for MUC-Light.</p>"},{"location":"open-extensions/inbox/#examples-archiving-an-entry","title":"Examples: archiving an entry","text":"<p>To put an entry into the archived box, the client can send: <pre><code>&lt;iq id='some_unique_id' type='set'&gt;\n  &lt;query xmlns='erlang-solutions.com:xmpp:inbox:0#conversation' jid='bob@localhost'&gt;\n    &lt;box&gt;archive&lt;/box&gt;\n  &lt;/query&gt;\n&lt;/iq&gt;\n</code></pre> On success, the server would return (considering the entry has no unread messages and is not muted): <pre><code>&lt;iq id='some_unique_id' to='alice@localhost/res1' type='result'&gt;\n  &lt;query xmlns='erlang-solutions.com:xmpp:inbox:0#conversation' jid='bob@localhost'&gt;\n    &lt;box&gt;archive&lt;/box&gt;\n    &lt;archive&gt;true&lt;/archive&gt;\n    &lt;mute&gt;0&lt;/mute&gt;\n    &lt;read&gt;true&lt;/read&gt;\n  &lt;/query&gt;\n&lt;/iq&gt;\n</code></pre> If the client had sent an invalid number (negative, or NaN), the server would answer: <pre><code>&lt;iq to='alice@localhost/res1' type='error'&gt;\n  &lt;error type='modify'&gt;\n    &lt;bad-request xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/&gt;\n  &lt;/error&gt;\n&lt;/iq&gt;\n</code></pre></p>"},{"location":"open-extensions/inbox/#examples-emptying-the-trash-bin","title":"Examples: emptying the trash bin","text":"<p>A user can empty his trash bin, through the following request: <pre><code>&lt;iq id='some_unique_id' type='set'&gt;\n  &lt;empty-bin xmlns='erlang-solutions.com:xmpp:inbox:0'/&gt;\n&lt;/iq&gt;\n</code></pre> On success, the server would return how many entries where dropped as in: <pre><code>&lt;iq id='some_unique_id' to='alice@localhost/res1' type='result'&gt;\n  &lt;empty-bin xmlns='erlang-solutions.com:xmpp:inbox:0'&gt;\n    &lt;num&gt;2&lt;/num&gt;\n  &lt;/empty-bin&gt;\n&lt;/iq&gt;\n</code></pre> The server might answer with a corresponding error message, might anything go wrong.</p>"},{"location":"open-extensions/inbox/#examples-muting-an-entry","title":"Examples: muting an entry","text":"<p>To mute an entry for a full day (86400 seconds in a day, 604800 in a week, for example), a client can send: <pre><code>&lt;iq id='some_unique_id' type='set'&gt;\n  &lt;query xmlns='erlang-solutions.com:xmpp:inbox:0#conversation' jid='bob@localhost'&gt;\n    &lt;mute&gt;86400&lt;/mute&gt;\n  &lt;/query&gt;\n&lt;/iq&gt;\n</code></pre> On success, the server would return (considering the server receives the timestamp on \"2021-02-26T09:11:05.634232Z\", and the entry is on the active box and completely read): <pre><code>&lt;iq id='some_unique_id' to='alice@localhost/res1' type='result'&gt;\n  &lt;query xmlns='erlang-solutions.com:xmpp:inbox:0#conversation' jid='bob@localhost'&gt;\n    &lt;box&gt;inbox&lt;/box&gt;\n    &lt;archive&gt;false&lt;/archive&gt;\n    &lt;mute&gt;2021-02-27T09:11:05.634232Z&lt;/mute&gt;\n    &lt;read&gt;true&lt;/read&gt;\n  &lt;/query&gt;\n&lt;/iq&gt;\n</code></pre> If the client had sent an invalid number (negative, or NaN), the server would answer: <pre><code>&lt;iq to='alice@localhost/res1' type='error'&gt;\n  &lt;error type='modify'&gt;\n    &lt;bad-request xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/&gt;\n  &lt;/error&gt;\n&lt;/iq&gt;\n</code></pre> To unmute, similarly, the client can send: <pre><code>&lt;iq id='some_unique_id' type='set'&gt;\n  &lt;query xmlns='erlang-solutions.com:xmpp:inbox:0#conversation' jid='bob@localhost'&gt;\n    &lt;mute&gt;0&lt;/mute&gt;\n  &lt;/query&gt;\n&lt;/iq&gt;\n</code></pre> And server responses will be similar.</p>"},{"location":"open-extensions/inbox/#examples-reading-an-entry","title":"Examples: reading an entry","text":"<p>To set an entry as read, the client can send: <pre><code>&lt;iq id='some_unique_id' type='set'&gt;\n  &lt;query xmlns='erlang-solutions.com:xmpp:inbox:0#conversation' jid='bob@localhost'&gt;\n    &lt;read&gt;true&lt;/read&gt;\n  &lt;/query&gt;\n&lt;/iq&gt;\n</code></pre> On success, the server would return (considering the entry is not archived and not muted): <pre><code>&lt;iq id='some_unique_id' to='alice@localhost/res1' type='result'&gt;\n  &lt;query xmlns='erlang-solutions.com:xmpp:inbox:0#conversation' jid='bob@localhost'&gt;\n    &lt;box&gt;inbox&lt;/box&gt;\n    &lt;archive&gt;false&lt;/archive&gt;\n    &lt;mute&gt;0&lt;/mute&gt;\n    &lt;read&gt;true&lt;/read&gt;\n  &lt;/query&gt;\n&lt;/iq&gt;\n</code></pre> On error, as usual, the client would get: <pre><code>&lt;iq to='alice@localhost/res1' type='error'&gt;\n  &lt;error type='modify'&gt;\n    &lt;bad-request xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/&gt;\n  &lt;/error&gt;\n&lt;/iq&gt;\n</code></pre> And similarly, to set a conversation as unread: <pre><code>&lt;iq id='some_unique_id' type='set'&gt;\n  &lt;query xmlns='erlang-solutions.com:xmpp:inbox:0#conversation' jid='bob@localhost'&gt;\n    &lt;read&gt;false&lt;/read&gt;\n  &lt;/query&gt;\n&lt;/iq&gt;\n</code></pre></p>"},{"location":"open-extensions/inbox/#deprecated-reset-entry-stanza","title":"Deprecated reset entry stanza:","text":"<p>You can reset the inbox with the following stanza: <pre><code>&lt;iq type='set'&gt;\n    &lt;reset xmlns='erlang-solutions.com:xmpp:inbox:0#conversation' jid='interlocutor_bare_jid'/&gt;\n&lt;/iq&gt;\n</code></pre> Here <code>jid</code> is the bare jid of the user whose inbox we want to reset. This action does not change the last message stored in inbox; meaning that neither this stanza nor anything given within will be stored; the only change is the inbox <code>unread_count</code> is set to zero.</p>"},{"location":"open-extensions/inbox/#example-request","title":"Example request","text":"<pre><code>&lt;!-- Alice sends: --&gt;\n&lt;message type=\"chat\" to=\"bob@localhost/res1\" id=\u201d123\u201d&gt;\n  &lt;body&gt;Hello&lt;/body&gt;\n&lt;/message&gt;\n\n&lt;!-- Bob receives: --&gt;\n&lt;message from=\"alice@localhost/res1\" to=\"bob@localhost/res1\" id=\u201c123\u201d xml:lang=\"en\" type=\"chat\"&gt;\n  &lt;body&gt;Hello&lt;/body&gt;\n&lt;/message&gt;\n\n&lt;!-- Alice sends: --&gt;\n&lt;iq type=\"set\" id=\"10bca\"&gt;\n  &lt;inbox xmlns=\"erlang-solutions.com:xmpp:inbox:0\" queryid=\"b6\"&gt;\n    &lt;x xmlns='jabber:x:data' type='form'&gt;\n      &lt;field type='hidden' var='FORM_TYPE'&gt;&lt;value&gt;erlang-solutions.com:xmpp:inbox:0&lt;/value&gt;&lt;/field&gt;\n      &lt;field type='text-single' var='start'&gt;&lt;value&gt;2018-07-10T12:00:00Z&lt;/value&gt;&lt;/field&gt;\n      &lt;field type='text-single' var='end'&gt;&lt;value&gt;2018-07-11T12:00:00Z&lt;/value&gt;&lt;/field&gt;\n      &lt;field type='list-single' var='order'&gt;&lt;value&gt;asc&lt;/value&gt;&lt;/field&gt;\n    &lt;/x&gt;\n  &lt;/inbox&gt;\n&lt;/iq&gt;\n\n&lt;!-- Alice receives: --&gt;\n&lt;message from=\"alice@localhost\" to=\"alice@localhost\" id=\"9b759\"&gt;\n  &lt;result xmlns=\"erlang-solutions.com:xmpp:inbox:0\" unread=\"0\" queryid=\"b6\"&gt;\n    &lt;forwarded xmlns=\"urn:xmpp:forward:0\"&gt;\n      &lt;delay xmlns=\"urn:xmpp:delay\" stamp=\"2018-07-10T23:08:25.123456Z\"/&gt;\n      &lt;message xml:lang=\"en\" type=\"chat\" to=\"bob@localhost/res1\" from=\"alice@localhost/res1\" id=\u201d123\u201d&gt;\n        &lt;body&gt;Hello&lt;/body&gt;\n      &lt;/message&gt;\n    &lt;/forwarded&gt;\n    &lt;box&gt;inbox&lt;/box&gt;\n    &lt;archive&gt;false&lt;/archive&gt;\n    &lt;mute&gt;0&lt;/mute&gt;\n  &lt;/result&gt;\n&lt;/message&gt;\n\n&lt;iq from=\"alice@localhost\" to=\"alice@localhost/res1\" id=\"10bca\" type=\"result\"&gt;\n  &lt;fin xmlns='erlang-solutions.com:xmpp:inbox:0'&gt;\n    &lt;count&gt;1&lt;/count&gt;\n    &lt;unread-messages&gt;0&lt;/unread-messages&gt;\n    &lt;active-conversations&gt;0&lt;/active-conversations&gt;\n  &lt;/fin&gt;\n&lt;/iq&gt;\n</code></pre>"},{"location":"open-extensions/inbox/#example-error-response","title":"Example error response","text":"<pre><code>&lt;!--Alice sends request with invalid value of start field: --&gt;\n&lt;iq type='set' id='a78478f20103ff8354d7834d0ba2fdb2'&gt;\n  &lt;inbox xmlns='erlang-solutions.com:xmpp:inbox:0'&gt;\n    &lt;x xmlns='jabber:x:data' type='submit'&gt;\n      &lt;field type='text-single' var='start'&gt;\n        &lt;value&gt;invalid&lt;/value&gt;\n      &lt;/field&gt;\n    &lt;/x&gt;\n  &lt;/inbox&gt;\n&lt;/iq&gt;\n\n&lt;!--Alice receives an error with description of the first encountered invalid value: --&gt;\n&lt;iq from='alice@localhost' to='alice@localhost/res1'\n    id='a78478f20103ff8354d7834d0ba2fdb2' type='error'&gt;\n  &lt;error code='400' type='modify'&gt;\n    &lt;bad-rquest xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/&gt;\n    &lt;text xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'&gt;\n      Invalid inbox form field value, field=start, value=invalid\n    &lt;/text&gt;\n  &lt;/error&gt;\n&lt;/iq&gt;\n</code></pre>"},{"location":"open-extensions/mam/","title":"Message Archive Management extensions","text":""},{"location":"open-extensions/mam/#new-mam-filtering-fields","title":"New MAM filtering fields","text":"<p>The new fields allow to improve the performance of the counting queries for very big archives by changing how count and index functions work.</p> <ul> <li><code>from-id</code> - returns and counts messages with ids <code>id &gt;= from-id</code> only (<code>from-id</code> is included into the set).</li> <li><code>to-id</code> - returns and counts messages with ids <code>id &lt;= to-id</code> only (<code>to-id</code> is included into the set).</li> <li><code>after-id</code> - returns and counts messages with ids <code>id &gt; after-id</code> only (<code>after-id</code> is not included into the set).</li> <li><code>before-id</code> - returns and counts messages with ids <code>id &lt; before-id</code> only (<code>before-id</code> is not included into the set).</li> <li><code>simple</code> - do not return count and offset fields in the result.</li> </ul> <p>The fields could be combined together. If two filters are provided, both would be applied to the result.</p>"},{"location":"open-extensions/mam/#get-new-messages-oldest-first","title":"Get new messages, oldest first","text":"<p>Example from <code>pagination_first_page_after_id4</code> testcase:</p> <p>The client has downloaded his archive and got disconnected. He knows, that the last message he has on his device has id=BO7CH1JOF801. He wants to receive new messages that were sent while he has been disconnected using a page size 5.</p> <p>In this mode, the client would get the oldest messages first.</p> <p>Testcase: the client has messages 1-15 in his archive.</p> <pre><code>&lt;!-- Client sends --&gt;\n&lt;iq type='set' id='req1'&gt;\n    &lt;query xmlns='urn:xmpp:mam:1' queryid='first_page_after_id4'&gt;\n        &lt;x xmlns='jabber:x:data'&gt;\n            &lt;field var='after-id'&gt;\n                &lt;value&gt;BO7CH1JOF801&lt;/value&gt; &lt;!-- id of the Message #4 --&gt;\n            &lt;/field&gt;\n        &lt;/x&gt;\n        &lt;set&gt;\n            &lt;max&gt;5&lt;/max&gt;\n        &lt;/set&gt;\n    &lt;/query&gt;\n&lt;/iq&gt;\n\n&lt;!-- Server sends --&gt;\n&lt;message from='alice@localhost' to='alice@localhost/res1' id='323372af-7d69-4f36-803d-110272066373'&gt;\n    &lt;result queryid='first_page_after_id4' xmlns='urn:xmpp:mam:1' id='BO7CH1JQR9O1'&gt;\n        &lt;forwarded xmlns='urn:xmpp:forward:0'&gt;\n            &lt;delay xmlns='urn:xmpp:delay' stamp='2022-06-08T09:43:08.952999Z' from='alice@localhost/res1'/&gt;\n            &lt;message from='alice@localhost/res1' xmlns='jabber:client' xml:lang='en' to='bob@localhost/res1' type='chat'&gt;\n                &lt;body&gt;Message #5&lt;/body&gt;\n            &lt;/message&gt;\n        &lt;/forwarded&gt;\n    &lt;/result&gt;\n&lt;/message&gt;\n&lt;!-- ... Messages 6, 7, 8  ... --&gt;\n&lt;message from='alice@localhost' to='alice@localhost/res1' id='a44d83f3-de47-4e71-a1e6-62100437fe2c'&gt;\n    &lt;result queryid='first_page_after_id4' xmlns='urn:xmpp:mam:1' id='BO7CH1K3TU01'&gt;\n        &lt;forwarded xmlns='urn:xmpp:forward:0'&gt;\n            &lt;delay xmlns='urn:xmpp:delay' stamp='2022-06-08T09:43:08.990200Z' from='alice@localhost/res1'/&gt;\n            &lt;message from='alice@localhost/res1' xmlns='jabber:client' xml:lang='en' to='bob@localhost/res1' type='chat'&gt;\n                &lt;body&gt;Message #9&lt;/body&gt;\n            &lt;/message&gt;\n        &lt;/forwarded&gt;\n    &lt;/result&gt;\n&lt;/message&gt;\n\n&lt;iq from='alice@localhost' to='alice@localhost/res1' id='req1' type='result'&gt;\n    &lt;fin xmlns='urn:xmpp:mam:1'&gt;\n        &lt;set xmlns='http://jabber.org/protocol/rsm'&gt;\n            &lt;first index='0'&gt;BO7CH1JQR9O1&lt;/first&gt; &lt;!-- Id of the message #5 --&gt;\n            &lt;last&gt;BO7CH1K3TU01&lt;/last&gt; &lt;!-- Id of the message #9 --&gt;\n            &lt;count&gt;11&lt;/count&gt; &lt;!-- messages 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 --&gt;\n        &lt;/set&gt;\n    &lt;/fin&gt;\n&lt;/iq&gt;\n</code></pre> <p>Messages 1-4 are completely ignored in the count and in the index fields. If the client asked for 5 messages, but count is 11, he should ask for more messages.</p> <pre><code>&lt;!-- Client sends --&gt;\n&lt;iq type='set' id='req2'&gt;\n    &lt;query xmlns='urn:xmpp:mam:1' queryid='first_page_after_id9'&gt;\n        &lt;x xmlns='jabber:x:data'&gt;\n            &lt;field var='after-id'&gt;\n                &lt;value&gt;BO7CH1K3TU01&lt;/value&gt; &lt;!-- id of the Message #9 --&gt;\n            &lt;/field&gt;\n        &lt;/x&gt;\n        &lt;set&gt;\n            &lt;max&gt;5&lt;/max&gt;\n        &lt;/set&gt;\n    &lt;/query&gt;\n&lt;/iq&gt;\n...\n</code></pre>"},{"location":"open-extensions/mam/#get-new-messages-newest-first","title":"Get new messages, newest first","text":"<p>Sometimes we want to render the newest messages as fast as possible.</p> <p>Though, if the client caches messages, he has to track which pages are still need to be requested, when using this method.</p> <p>Example <code>pagination_last_page_after_id4</code>.</p> <pre><code>&lt;!-- Client sends --&gt;\n&lt;iq type='set' id='req3'&gt;\n    &lt;query xmlns='urn:xmpp:mam:1' queryid='last_page_after_id4'&gt;\n        &lt;x xmlns='jabber:x:data'&gt;\n            &lt;field var='after-id'&gt;\n                &lt;value&gt;BO7CUCVVS6O1&lt;/value&gt;\n            &lt;/field&gt;\n        &lt;/x&gt;\n        &lt;set&gt;\n            &lt;max&gt;5&lt;/max&gt;\n            &lt;before/&gt;\n        &lt;/set&gt;\n    &lt;/query&gt;\n&lt;/iq&gt;\n\n&lt;!-- Server sends --&gt;\n&lt;message from='alice@localhost' to='alice@localhost/res1' id='4917656e-a5cb-4f4a-9718-ed525a1202ee'&gt;\n    &lt;result queryid='last_page_after_id4' xmlns='urn:xmpp:mam:1' id='BO7CUD0L8B81'&gt;\n        &lt;forwarded xmlns='urn:xmpp:forward:0'&gt;\n            &lt;delay xmlns='urn:xmpp:delay' stamp='2022-06-08T10:13:01.601837Z' from='alice@localhost/res1'/&gt;\n            &lt;message from='alice@localhost/res1' xmlns='jabber:client' xml:lang='en' to='bob@localhost/res1' type='chat'&gt;\n                &lt;body&gt;Message #11&lt;/body&gt;\n            &lt;/message&gt;\n        &lt;/forwarded&gt;\n    &lt;/result&gt;\n&lt;/message&gt;\n\n...\n\n&lt;message from='alice@localhost' to='alice@localhost/res1' id='09987901-d53d-4b57-8b3c-5f3aaa2de99b'&gt;\n    &lt;result queryid='last_page_after_id4' xmlns='urn:xmpp:mam:1' id='BO7CUD0U4301'&gt;\n        &lt;forwarded xmlns='urn:xmpp:forward:0'&gt;\n            &lt;delay xmlns='urn:xmpp:delay' stamp='2022-06-08T10:13:01.638156Z' from='alice@localhost/res1'/&gt;\n            &lt;message from='alice@localhost/res1' xmlns='jabber:client' xml:lang='en' to='bob@localhost/res1' type='chat'&gt;\n                &lt;body&gt;Message #15&lt;/body&gt;\n            &lt;/message&gt;\n        &lt;/forwarded&gt;\n    &lt;/result&gt;\n&lt;/message&gt;\n&lt;iq from='alice@localhost' to='alice@localhost/res1' id='req3' type='result'&gt;\n    &lt;fin xmlns='urn:xmpp:mam:1'&gt;\n        &lt;set xmlns='http://jabber.org/protocol/rsm'&gt;\n            &lt;first index='6'&gt;BO7CUD0L8B81&lt;/first&gt; &lt;!-- id of the message 11 --&gt;\n            &lt;last&gt;BO7CUD0U4301&lt;/last&gt; &lt;!-- id of the message 15 --&gt;\n            &lt;count&gt;11&lt;/count&gt; &lt;!-- messages 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 --&gt;\n        &lt;/set&gt;\n    &lt;/fin&gt;\n&lt;/iq&gt;\n</code></pre> <p>Because index is not zero, the client would have to send more queries to get all missing messages.</p>"},{"location":"open-extensions/mam/#disable-message-counting","title":"Disable message counting","text":"<p>Sometimes, we don't want to count messages at all. It would improve performance.</p> <p>For example, if we want to request another page of the result set, we already would know the total number of messages from the first query.</p> <p>Sometimes, total and offset values are not visible in the UI.</p> <pre><code>&lt;!-- Client sends --&gt;\n&lt;iq type='set' id='req5'&gt;\n    &lt;query xmlns='urn:xmpp:mam:1' queryid='before10'&gt;\n        &lt;x xmlns='jabber:x:data'&gt;\n            &lt;field var='simple'&gt;\n                &lt;value&gt;true&lt;/value&gt;\n            &lt;/field&gt;\n        &lt;/x&gt;\n        &lt;set&gt;\n            &lt;max&gt;5&lt;/max&gt;\n            &lt;before&gt;BO7DD6KDP0O1&lt;/before&gt;\n        &lt;/set&gt;\n    &lt;/query&gt;\n&lt;/iq&gt;\n\n...skip messages...\n&lt;!-- Server returns messages and the final IQ --&gt;\n&lt;iq from='alice@localhost' to='alice@localhost/res1' id='req5' type='result'&gt;\n    &lt;fin xmlns='urn:xmpp:mam:1'&gt;\n        &lt;set xmlns='http://jabber.org/protocol/rsm'&gt;\n            &lt;first&gt;BO7DD6K1E8G1&lt;/first&gt;\n            &lt;last&gt;BO7DD6KBAAG1&lt;/last&gt;\n        &lt;/set&gt;\n    &lt;/fin&gt;\n&lt;/iq&gt;\n</code></pre>"},{"location":"open-extensions/muc_light/","title":"MUC light","text":""},{"location":"open-extensions/muc_light/#1-introduction","title":"1. Introduction","text":"<p>Classic Multi-User chat, as described in XEP-0045, adds an IRC-like functionality to XMPP. It distinguishes between the affiliation list and the occupant list, where the latter is based on presences routed to the room from the client resource. While perfectly sufficient for desktop applications and relatively stable network connection, it does not exactly meet the challenges the mobile world it is facing. Modern mobile applications do not rely on presence information, as it can frequently change. The expected user experience not only differs from the IRC model, but also uses only a small subset of XEP-0045 features. The service described in this specification attempts to provide a complete solution for all common use cases of mobile group chats.</p>"},{"location":"open-extensions/muc_light/#2-requirements","title":"2. Requirements","text":"<p>Here are some high-level features required from a new variant of MUC</p> <ol> <li>The service allows any user to create a room for group communication.</li> <li>Users cannot join rooms on their own. They have to be added by the room owner or (if configured by service administrator) any other occupant.</li> <li>Only the owner can remove other occupants from the room.</li> <li>Every occupant can leave the room.</li> <li>A user may block the attempts of being added to the specific room or by specific user.</li> <li>The message sent in the room is always broadcasted to every occupant.</li> <li>The full occupant list is always available to all occupants.</li> <li>The occupant is always visible on the list, even if they do not have any resources online.</li> <li>Occupants can only have two affiliations: owner and member.</li> <li>There MUST be at most one owner in the room (the service can choose to treat all users equally).</li> <li>If the room becomes empty, it is destroyed.</li> <li>Occupants cannot hide behind nicks. Their real bare JID is always visible to everyone</li> <li>No exchange of any <code>&lt;presence/&gt;</code> stanza inside the room.</li> <li>The user MUST be able to retrieve the list of rooms they occupy.</li> <li>The owner can modify the room configuration at any time; members may also be allowed to set configuration.</li> <li>All occupants can get the full room configuration at any time.</li> <li>Room history is available only in Message Archive Management.</li> </ol>"},{"location":"open-extensions/muc_light/#3-entity-use-cases","title":"3. Entity Use Cases","text":""},{"location":"open-extensions/muc_light/#31-discovering-a-muc-light-service","title":"3.1. Discovering a MUC Light Service","text":"<p>An entity often discovers a MUC service by sending a Service Discovery items (\"disco#items\") request to its own server.</p> <p>Entity Queries the Server for Associated Services</p> <pre><code>&lt;iq from='hag66@shakespeare.lit/pda'\n    id='h7ns81g'\n    to='shakespeare.lit'\n    type='get'&gt;\n    &lt;query xmlns='http://jabber.org/protocol/disco#items'/&gt;\n&lt;/iq&gt;\n</code></pre> <p>The server then returns the services that are associated with it.</p> <p>Server Returns a Disco Items Result</p> <pre><code>&lt;iq from='shakespeare.lit'\n    id='h7ns81g'\n    to='hag66@shakespeare.lit/pda'\n    type='result'&gt;\n    &lt;query xmlns='http://jabber.org/protocol/disco#items'&gt;\n        &lt;item jid='muclight.shakespeare.lit' name='MUC Light Service'/&gt;\n    &lt;/query&gt;\n&lt;/iq&gt;\n</code></pre>"},{"location":"open-extensions/muc_light/#32-discovering-the-features-supported-by-a-muc-light-service","title":"3.2. Discovering the Features Supported by a MUC Light Service","text":"<p>An entity may wish to discover if a service implements the Multi-User Chat protocol; in order to do so, it sends a service discovery information (\"disco#info\") query to the MUC service's JID.</p> <p>Entity Queries Chat Service for MUC Light Support via Disco</p> <pre><code>&lt;iq from='hag66@shakespeare.lit/pda'\n    id='lx09df27'\n    to='muclight.shakespeare.lit' type='get'&gt;\n    &lt;query xmlns='http://jabber.org/protocol/disco#info'/&gt;\n&lt;/iq&gt;\n</code></pre> <p>The service MUST return its identity and the features it supports.</p> <p>Service Returns a Disco Info Result</p> <pre><code>&lt;iq from='muclight.shakespeare.lit'\n    id='lx09df27'\n    to='hag66@shakespeare.lit/pda'\n    type='result'&gt;\n    &lt;query xmlns='http://jabber.org/protocol/disco#info'&gt;\n        &lt;identity category='conference' name='Shakespearean Chat Service' type='text'/&gt;\n        &lt;feature var='urn:xmpp:muclight:0'/&gt;\n    &lt;/query&gt;\n&lt;/iq&gt;\n</code></pre>"},{"location":"open-extensions/muc_light/#33-discovering-occupied-rooms","title":"3.3. Discovering Occupied Rooms","text":"<p>The service discovery items (\"disco#items\") protocol enables an entity to query a service for a list of associated items, which in the case of a chat service would consist of the specific chat rooms the entity occupies.</p> <p>Entity Queries Chat Service for Rooms</p> <pre><code>&lt;iq from='hag66@shakespeare.lit/pda'\n    id='zb8q41f4'\n    to='muclight.shakespeare.lit'\n    type='get'&gt;\n    &lt;query xmlns='http://jabber.org/protocol/disco#items'/&gt;\n&lt;/iq&gt;\n</code></pre> <p>The service MUST return a full list of the rooms the entity occupies. The server SHOULD include room name and version in each item.</p> <p>Service Returns a Disco Items Result</p> <pre><code>&lt;iq from='muclight.shakespeare.lit'\n    id='zb8q41f4'\n    to='hag66@shakespeare.lit/pda'\n    type='result'&gt;\n    &lt;query xmlns='http://jabber.org/protocol/disco#items'&gt;\n        &lt;item jid='heath@muclight.shakespeare.lit' name='A Lonely Heath' version='1'/&gt;\n        &lt;item jid='coven@muclight.shakespeare.lit' name='A Dark Cave' version='2'/&gt;\n        &lt;item jid='forres@muclight.shakespeare.lit' name='The Palace' version='3'/&gt;\n        &lt;item jid='inverness@muclight.shakespeare.lit'\n              name='Macbeth&amp;apos;s Castle'\n              version='4'/&gt;\n    &lt;/query&gt;\n&lt;/iq&gt;\n</code></pre> <p>If the full list of rooms is large (see XEP-0030 for details), the service MAY return only a partial list of rooms. If it does, it MUST include a <code>&lt;set/&gt;</code> element qualified by the 'http://jabber.org/protocol/rsm' namespace (as defined in Result Set Management (XEP-0059) [1]) to indicate that the list is not the full result set.</p> <p>Service Returns a Limited List of Disco Items Result</p> <pre><code>&lt;iq from='muclight.shakespeare.lit'\n    id='hx51v49s'\n    to='hag66@shakespeare.lit/pda'\n    type='result'&gt;\n    &lt;query xmlns='http://jabber.org/protocol/disco#items'&gt;\n        &lt;item jid='alls-well-that-ends-well@muclight.shakespeare.lit'\n              name='Everybody dies'\n              version='1'/&gt;\n        &lt;item jid='as-you-like-it@muclight.shakespeare.lit'\n              name='As you like it'\n              version='2'/&gt;\n        &lt;item jid='cleopatra@muclight.shakespeare.lit' name='Cleo fans' version='3'/&gt;\n        &lt;item jid='comedy-of-errors@muclight.shakespeare.lit'\n              name='404 Comedy not found'\n              version='4'/&gt;\n        &lt;item jid='coriolanus@muclight.shakespeare.lit'\n              name='What is Coriolanus?'\n              version='5'/&gt;\n        &lt;item jid='cymbeline@muclight.shakespeare.lit' name='Music room' version='6'/&gt;\n        &lt;item jid='hamlet@muclight.shakespeare.lit'\n              name='To chat or not to chat?'\n              version='7'/&gt;\n        &lt;item jid='henry-the-fourth-one@muclight.shakespeare.lit'\n              name='Royal Room 1'\n              version='8'/&gt;\n        &lt;item jid='henry-the-fourth-two@muclight.shakespeare.lit'\n              name='Royal Room 2'\n              version='9'/&gt;\n        &lt;item jid='henry-the-fifth@muclight.shakespeare.lit'\n              name='Royal Room Prime'\n              version='10'/&gt;\n        &lt;set xmlns='http://jabber.org/protocol/rsm'&gt;\n            &lt;first index='0'&gt;alls-well-that-ends-well@muclight.shakespeare.lit&lt;/first&gt;\n            &lt;last&gt;henry-the-fifth@muclight.shakespeare.lit&lt;/last&gt;\n            &lt;count&gt;37&lt;/count&gt;\n        &lt;/set&gt;\n    &lt;/query&gt;\n&lt;/iq&gt;\n</code></pre>"},{"location":"open-extensions/muc_light/#4-occupant-use-cases","title":"4. Occupant Use Cases","text":""},{"location":"open-extensions/muc_light/#41-sending-a-message-to-a-room","title":"4.1. Sending a message to a room","text":"<p>Every occupant in the room MAY broadcast messages to other occupants. In order to do so, the client MUST send a groupchat message to the room bare JID.</p> <p>The room automatically assumes that occupants' nicks are equal to their bare JIDs. MUC light is designed for applications where it is not important to hide behind nicknames. On the contrary - it is up to the client to replace pure JIDs with user-friendly names like phone numbers or full names if necessary.</p> <p>The room MUST route all messages of the 'groupchat' type.</p> <p>Client sends a message to the room</p> <pre><code>&lt;message from='hag66@shakespeare.lit/pda'\n         id='msg111'\n         to='coven@muclight.shakespeare.lit'\n         type='groupchat'&gt;\n    &lt;body&gt;Harpier cries: 'tis time, 'tis time.&lt;/body&gt;\n&lt;/message&gt;\n</code></pre> <p>Server broadcasts a groupchat message</p> <pre><code>&lt;message id='msg111' type='groupchat'\n    from='coven@muclight.shakespeare.lit/hag66@shakespeare.lit'\n    to='crone1@shakespeare.lit'&gt;\n    &lt;body&gt;Harpier cries: 'tis time, 'tis time.&lt;/body&gt;\n&lt;/message&gt;\n</code></pre> <pre><code>&lt;message id='msg111' type='groupchat'\n    from='coven@muclight.shakespeare.lit/hag66@shakespeare.lit'\n    to='crone2@shakespeare.lit'&gt;\n    &lt;body&gt;Harpier cries: 'tis time, 'tis time.&lt;/body&gt;\n&lt;/message&gt;\n</code></pre> <p>Note the message is sent to all the room occupants including the original sender.</p> <pre><code>&lt;message id='msg111' type='groupchat'\n    from='coven@muclight.shakespeare.lit/hag66@shakespeare.lit'\n    to='hag66@shakespeare.lit'&gt;\n    &lt;body&gt;Harpier cries: 'tis time, 'tis time.&lt;/body&gt;\n&lt;/message&gt;\n</code></pre>"},{"location":"open-extensions/muc_light/#42-changing-a-room-subject","title":"4.2. Changing a room subject","text":"<p>The service MAY allow room occupants to set the room subject by changing the \"subject\" configuration field. A standard configuration stanza is used in this case. Subject change is announced like an ordinary configuration change.</p> <p>Client sends a message to the room</p> <pre><code>&lt;iq from='hag66@shakespeare.lit/pda'\n    id='subject1'\n    to='coven@muclight.shakespeare.lit'\n    type='set'&gt;\n    &lt;query xmlns='urn:xmpp:muclight:0#configuration'&gt;\n        &lt;subject&gt;To be or not to be?&lt;/subject&gt;\n    &lt;/query&gt;\n&lt;/iq&gt;\n</code></pre> <pre><code>&lt;message from='coven@muclight.shakespeare.lit'\n         to='crone1@shakespeare.lit'\n         type='groupchat'\n         id='newsubject'&gt;\n    &lt;x xmlns='urn:xmpp:muclight:0#configuration'&gt;\n        &lt;prev-version&gt;asdfghj000&lt;/prev-version&gt;\n        &lt;version&gt;asdfghj&lt;/version&gt;\n        &lt;subject&gt;To be or not to be?&lt;/subject&gt;\n    &lt;/x&gt;\n    &lt;body /&gt;\n&lt;/message&gt;\n</code></pre> <pre><code>&lt;message from='coven@muclight.shakespeare.lit'\n         to='hag66@shakespeare.lit'\n         type='groupchat'\n         id='newsubject'&gt;\n    &lt;x xmlns='urn:xmpp:muclight:0#configuration'&gt;\n        &lt;prev-version&gt;asdfghj000&lt;/prev-version&gt;\n        &lt;version&gt;asdfghj&lt;/version&gt;\n        &lt;subject&gt;To be or not to be?&lt;/subject&gt;\n    &lt;/x&gt;\n    &lt;body /&gt;\n&lt;/message&gt;\n</code></pre> <pre><code>&lt;iq to='hag66@shakespeare.lit/pda'\n    id='subject1'\n    from='coven@muclight.shakespeare.lit'\n    type='result' /&gt;\n</code></pre>"},{"location":"open-extensions/muc_light/#43-requesting-room-information","title":"4.3. Requesting room information","text":"<p>Room occupants may request room information (configuration and/or occupants list) by an information version. It is up to the service to define the version string, the only requirement for it, is to be unique per room. Please note there are no separate versions for configuration and occupant list alone.</p> <p>If the server side version does not match the one provided by the client (or if the client does not provide one, i.e. the 'version' element is empty), the service MUST respond with a current version string and full configuration and/or occupant list.</p> <p>If the version strings match, server MUST reply with an empty result.</p> <p>Only room occupants can get room information.</p> <p>Matching versions</p> <pre><code>&lt;iq from='crone1@shakespeare.lit/desktop'\n    id='config0'\n    to='coven@muclight.shakespeare.lit'\n    type='get'&gt;\n    &lt;query xmlns='urn:xmpp:muclight:0#configuration'&gt;\n        &lt;version&gt;abcdefg&lt;/version&gt;\n    &lt;/query&gt;\n&lt;/iq&gt;\n</code></pre> <pre><code>&lt;iq from='coven@muclight.shakespeare.lit'\n    id='config0'\n    to='crone1@shakespeare.lit/desktop'\n    type='result' /&gt;\n</code></pre>"},{"location":"open-extensions/muc_light/#431-getting-the-room-configuration","title":"4.3.1. Getting the room configuration","text":"<p>Client gets configuration from the server</p> <pre><code>&lt;iq from='crone1@shakespeare.lit/desktop'\n    id='getconfig1'\n    to='coven@muclight.shakespeare.lit'\n    type='get'&gt;\n    &lt;query xmlns='urn:xmpp:muclight:0#configuration'&gt;\n        &lt;version&gt;abcdefg&lt;/version&gt;\n    &lt;/query&gt;\n&lt;/iq&gt;\n</code></pre> <pre><code>&lt;iq from='coven@muclight.shakespeare.lit'\n    id='getconfig1'\n    to='crone1@shakespeare.lit/desktop'\n    type='result'&gt;\n    &lt;query xmlns='urn:xmpp:muclight:0#configuration'&gt;\n        &lt;version&gt;123456&lt;/version&gt;\n        &lt;roomname&gt;A Dark Cave&lt;/roomname&gt;\n    &lt;/query&gt;\n&lt;/iq&gt;\n</code></pre>"},{"location":"open-extensions/muc_light/#432-requesting-a-user-list","title":"4.3.2. Requesting a user list","text":"<p>Client requests a user list</p> <pre><code>&lt;iq from='crone1@shakespeare.lit/desktop'\n    id='getmembers'\n    to='coven@muclight.shakespeare.lit'\n    type='get'&gt;\n    &lt;query xmlns='urn:xmpp:muclight:0#affiliations'&gt;\n        &lt;version&gt;abcdefg&lt;/version&gt;\n    &lt;/query&gt;\n&lt;/iq&gt;\n</code></pre> <pre><code>&lt;iq from='coven@muclight.shakespeare.lit'\n    id='getmembers'\n    to='crone1@shakespeare.lit/desktop'\n    type='result'&gt;\n    &lt;query xmlns='urn:xmpp:muclight:0#affiliations'&gt;\n        &lt;version&gt;123456&lt;/version&gt;\n        &lt;user affiliation='owner'&gt;user1@shakespeare.lit&lt;/user&gt;\n        &lt;user affiliation='member'&gt;user2@shakespeare.lit&lt;/user&gt;\n        &lt;user affiliation='member'&gt;user3@shakespeare.lit&lt;/user&gt;\n    &lt;/query&gt;\n&lt;/iq&gt;\n</code></pre>"},{"location":"open-extensions/muc_light/#433-requesting-full-room-information","title":"4.3.3. Requesting full room information","text":"<p>Room occupants may request both lists (configuration + occupants) with a single request.</p> <p>Client requests room information</p> <pre><code>&lt;iq from='crone1@shakespeare.lit/desktop'\n    id='getinfo1'\n    to='coven@muclight.shakespeare.lit'\n    type='get'&gt;\n    &lt;query xmlns='urn:xmpp:muclight:0#info'&gt;\n        &lt;version&gt;abcdefg&lt;/version&gt;\n    &lt;/query&gt;\n&lt;/iq&gt;\n</code></pre> <pre><code>&lt;iq from='coven@muclight.shakespeare.lit'\n    id='getinfo1'\n    to='crone1@shakespeare.lit/desktop'\n    type='result'&gt;\n    &lt;query xmlns='urn:xmpp:muclight:0#info'&gt;\n        &lt;version&gt;123456&lt;/version&gt;\n        &lt;configuration&gt;\n            &lt;roomname&gt;A Dark Cave&lt;/roomname&gt;\n        &lt;/configuration&gt;\n        &lt;occupants&gt;\n            &lt;user affiliation='owner'&gt;user1@shakespeare.lit&lt;/user&gt;\n            &lt;user affiliation='member'&gt;user2@shakespeare.lit&lt;/user&gt;\n            &lt;user affiliation='member'&gt;user3@shakespeare.lit&lt;/user&gt;\n        &lt;/occupants&gt;\n    &lt;/query&gt;\n&lt;/iq&gt;\n</code></pre>"},{"location":"open-extensions/muc_light/#44-leaving-the-room","title":"4.4. Leaving the room","text":"<p>Every occupant is allowed to leave the room at any time. It is done by modifying their own affiliation.</p> <p>Occupant leaves the room</p> <pre><code>&lt;iq from='crone1@shakespeare.lit/desktop'\n    id='leave1'\n    to='coven@muclight.shakespeare.lit'\n    type='set'&gt;\n    &lt;query xmlns='urn:xmpp:muclight:0#affiliations'&gt;\n        &lt;user affiliation='none'&gt;crone1@shakespeare.lit&lt;/user&gt;\n    &lt;/query&gt;\n&lt;/iq&gt;\n</code></pre> <pre><code>&lt;message from='coven@muclight.shakespeare.lit'\n         to='crone1@shakespeare.lit'\n         type='groupchat'\n         id='leave1'&gt;\n    &lt;x xmlns='urn:xmpp:muclight:0#affiliations'&gt;\n        &lt;user affiliation='none'&gt;crone1@shakespeare.lit&lt;/user&gt;\n    &lt;/x&gt;\n    &lt;body /&gt;\n&lt;/message&gt;\n</code></pre> <pre><code>&lt;message from='coven@muclight.shakespeare.lit'\n         to='hag77@shakespeare.lit'\n         type='groupchat'\n         id='leave1'&gt;\n    &lt;x xmlns='urn:xmpp:muclight:0#affiliations'&gt;\n        &lt;prev-version&gt;1111111&lt;/prev-version&gt;\n        &lt;version&gt;aaaaaaa&lt;/version&gt;\n        &lt;user affiliation='none'&gt;crone1@shakespeare.lit&lt;/user&gt;\n    &lt;/x&gt;\n    &lt;body /&gt;\n&lt;/message&gt;\n</code></pre> <pre><code>&lt;message from='coven@muclight.shakespeare.lit'\n         to='hag88@shakespeare.lit'\n         type='groupchat'\n         id='leave1'&gt;\n    &lt;x xmlns='urn:xmpp:muclight:0#affiliations'&gt;\n        &lt;prev-version&gt;1111111&lt;/prev-version&gt;\n        &lt;version&gt;aaaaaaa&lt;/version&gt;\n        &lt;user affiliation='none'&gt;crone1@shakespeare.lit&lt;/user&gt;\n    &lt;/x&gt;\n    &lt;body /&gt;\n&lt;/message&gt;\n</code></pre> <pre><code>&lt;iq to='crone1@shakespeare.lit/desktop'\n    id='leave1'\n    from='coven@muclight.shakespeare.lit'\n    type='result' /&gt;\n</code></pre>"},{"location":"open-extensions/muc_light/#45-blocking-functionality","title":"4.5. Blocking functionality","text":"<p>A user MAY choose to automatically deny being added to the room. All stanzas must be directed to MUC Light service. User MAY send more than one item in a single request and mix both 'user' and 'room' elements.</p> <p>If the occupant tries to add another user to the room, and this user has set a blocking policy, the server MUST ignore the attempt. No error is returned, this user is simply skipped when processing affiliation change query.</p> <p>Service denies adding blocking user</p> <pre><code>&lt;iq from='crone2@shakespeare.lit/desktop'\n    id='blocked1'\n    to='coven@muclight.shakespeare.lit'\n    type='set'&gt;\n    &lt;query xmlns='urn:xmpp:muclight:0#affiliations'&gt;\n        &lt;user affiliation='member'&gt;crone1@shakespeare.lit&lt;/user&gt;\n        &lt;user affiliation='member'&gt;crone3@shakespeare.lit&lt;/user&gt;\n    &lt;/query&gt;\n&lt;/iq&gt;\n</code></pre> <pre><code>&lt;message from='coven@muclight.shakespeare.lit'\n         to='crone2@shakespeare.lit'\n         type='groupchat'\n         id='blockedadd1'&gt;\n    &lt;x xmlns='urn:xmpp:muclight:0#affiliations'&gt;\n        &lt;user affiliation='member'&gt;crone3@shakespeare.lit&lt;/user&gt;\n    &lt;/x&gt;\n    &lt;body /&gt;\n&lt;/message&gt;\n</code></pre> <pre><code>&lt;message from='coven@muclight.shakespeare.lit'\n         to='hag88@@shakespeare.lit'\n         type='groupchat'\n         id='blockedadd1'&gt;\n    &lt;x xmlns='urn:xmpp:muclight:0#affiliations'&gt;\n        &lt;user affiliation='member'&gt;crone3@shakespeare.lit&lt;/user&gt;\n    &lt;/x&gt;\n    &lt;body /&gt;\n&lt;/message&gt;\n</code></pre> <pre><code>&lt;iq to='crone2@shakespeare.lit/desktop'\n    id='blocked1'\n    from='coven@muclight.shakespeare.lit'\n    type='result' /&gt;\n</code></pre>"},{"location":"open-extensions/muc_light/#451-requesting-a-blocking-list","title":"4.5.1. Requesting a blocking list","text":"<p>In order to get the current blocking list in the MUC Light service, the client sends an empty IQ get query with a proper namespace.</p> <p>The list includes only items with a 'deny' action, since the 'allow' behaviour is default for MUC Light and is only used for the list modification.</p> <p>User retrieves a blocking list</p> <pre><code>&lt;iq from='crone1@shakespeare.lit/desktop'\n    id='getblock1'\n    to='muclight.shakespeare.lit'\n    type='get'&gt;\n    &lt;query xmlns='urn:xmpp:muclight:0#blocking'&gt;\n    &lt;/query&gt;\n&lt;/iq&gt;\n</code></pre> <pre><code>&lt;iq type='result'\n    id='getblock1'\n    to='crone1@shakespeare.lit/desktop'\n    from='muclight.shakespeare.lit'&gt;\n    &lt;query xmlns='urn:xmpp:muclight:0#blocking'&gt;\n        &lt;room action='deny'&gt;coven@muclight.shakespeare.lit&lt;/room&gt;\n        &lt;user action='deny'&gt;hag77@shakespeare.lit&lt;/user&gt;\n    &lt;/query&gt;\n&lt;/iq&gt;\n</code></pre>"},{"location":"open-extensions/muc_light/#452-blocking-a-room","title":"4.5.2. Blocking a room","text":"<p>In order to block a room, a query must contain at least one 'room' item with a 'deny' action and a room bare JID in the content.</p> <p>User blocks a room</p> <pre><code>&lt;iq from='crone1@shakespeare.lit/desktop'\n    id='block1'\n    to='muclight.shakespeare.lit'\n    type='set'&gt;\n    &lt;query xmlns='urn:xmpp:muclight:0#blocking'&gt;\n        &lt;room action='deny'&gt;coven@muclight.shakespeare.lit&lt;/room&gt;\n        &lt;room action='deny'&gt;chapel@shakespeare.lit&lt;/room&gt;\n    &lt;/query&gt;\n&lt;/iq&gt;\n</code></pre> <pre><code>&lt;iq type='result'\n    id='block1'\n    to='crone1@shakespeare.lit/desktop'\n    from='muclight.shakespeare.lit' /&gt;\n</code></pre>"},{"location":"open-extensions/muc_light/#453-blocking-a-user","title":"4.5.3. Blocking a user","text":"<p>In order to block a user, a query must contain at least one 'user' item with a 'deny' action and a user bare JID in the content.</p> <p>User blocks another user</p> <pre><code>&lt;iq from='crone1@shakespeare.lit/desktop'\n    id='block2'\n    to='muclight.shakespeare.lit'\n    type='set'&gt;\n    &lt;query xmlns='urn:xmpp:muclight:0#blocking'&gt;\n        &lt;user action='deny'&gt;hag66@shakespeare.lit&lt;/user&gt;\n        &lt;user action='deny'&gt;hag77@shakespeare.lit&lt;/user&gt;\n    &lt;/query&gt;\n&lt;/iq&gt;\n</code></pre> <pre><code>&lt;iq type='result'\n    id='block2'\n    to='crone1@shakespeare.lit/desktop'\n    from='muclight.shakespeare.lit' /&gt;\n</code></pre>"},{"location":"open-extensions/muc_light/#454-unblocking","title":"4.5.4. Unblocking","text":"<p>In order to cancel a blocking, a query must contain at least one 'room' or 'user' item with an 'allow' action and an appropriate bare JID in the content.</p> <p>Unblocking a JID that is not blocked does not trigger any error. The server MUST return an empty IQ result in such case.</p> <p>User cancels blocking</p> <pre><code>&lt;iq from='crone1@shakespeare.lit/desktop'\n    id='unblock1'\n    to='muclight.shakespeare.lit'\n    type='set'&gt;\n    &lt;query xmlns='urn:xmpp:muclight:0#blocking'&gt;\n        &lt;room action='allow'&gt;coven@muclight.shakespeare.lit&lt;/room&gt;\n        &lt;user action='allow'&gt;hag66@shakespeare.lit&lt;/user&gt;\n    &lt;/query&gt;\n&lt;/iq&gt;\n</code></pre> <pre><code>&lt;iq type='result'\n    id='unblock1'\n    to='crone1@shakespeare.lit/desktop'\n    from='muclight.shakespeare.lit' /&gt;\n</code></pre>"},{"location":"open-extensions/muc_light/#5-owner-use-cases","title":"5. Owner Use Cases","text":""},{"location":"open-extensions/muc_light/#51-creating-a-new-room","title":"5.1. Creating a new room","text":"<p>A room is created by submitting a dedicated stanza. The client application should pick a random room node name, since a human-readable room name is in configuration.</p> <p>For rules that apply to the configuration options, please see \"Setting room configuration\" chapter.</p> <p>The client MAY include initial configuration and occupant list (the list MUST NOT include the creator). The server MAY allow sending an incomplete configuration form. In such case the server MUST use the default values for missing fields. The server MAY enforce a minimal occupant list length.</p> <p>The service MAY either give the creator the 'owner' or 'member' status. In the latter case all users are equal.</p> <p>Upon room creation success, the service MUST reply with an empty IQ result.</p> <p>The following rules (similar to the ones relevant to the affiliation change request) apply to the occupant list:</p> <ul> <li>'none' affiliation cannot be used.</li> <li>All user bare JIDs must be unique</li> <li>At most one owner can be chosen. If none is chosen, the room creator will become \"just\" a 'member'.</li> </ul> <p>After the room is created (but before receiving IQ result), new occupants (including the creator) receive <code>&lt;message/&gt;</code> from the room with their affiliations (the stanza MUST include only recipient's affiliation) and the initial room version. <code>&lt;prev-version/&gt;</code> element MUST NOT be included.</p> <p>Client requests room creation</p> <pre><code>&lt;iq from='crone1@shakespeare.lit/desktop'\n    id='create1'\n    to='coven@muclight.shakespeare.lit'\n    type='set'&gt;\n    &lt;query xmlns='urn:xmpp:muclight:0#create'&gt;\n        &lt;configuration&gt;\n            &lt;roomname&gt;A Dark Cave&lt;/roomname&gt;\n        &lt;/configuration&gt;\n        &lt;occupants&gt;\n            &lt;user affiliation='member'&gt;user1@shakespeare.lit&lt;/user&gt;\n            &lt;user affiliation='member'&gt;user2@shakespeare.lit&lt;/user&gt;\n        &lt;/occupants&gt;\n    &lt;/query&gt;\n&lt;/iq&gt;\n</code></pre> <pre><code>&lt;message from='coven@muclight.shakespeare.lit'\n         to='crone1@shakespeare.lit'\n         type='groupchat'\n         id='createnotif'&gt;\n    &lt;x xmlns='urn:xmpp:muclight:0#affiliations'&gt;\n        &lt;version&gt;aaaaaaa&lt;/version&gt;\n        &lt;user affiliation='owner'&gt;crone1@shakespeare.lit&lt;/user&gt;\n    &lt;/x&gt;\n    &lt;body /&gt;\n&lt;/message&gt;\n</code></pre> <pre><code>&lt;message from='coven@muclight.shakespeare.lit'\n         to='user1@shakespeare.lit'\n         type='groupchat'\n         id='createnotif'&gt;\n    &lt;x xmlns='urn:xmpp:muclight:0#affiliations'&gt;\n        &lt;version&gt;aaaaaaa&lt;/version&gt;\n        &lt;user affiliation='member'&gt;user1@shakespeare.lit&lt;/user&gt;\n    &lt;/x&gt;\n    &lt;body /&gt;\n&lt;/message&gt;\n</code></pre> <pre><code>&lt;message from='coven@muclight.shakespeare.lit'\n         to='user2@shakespeare.lit'\n         type='groupchat'\n         id='createnotif'&gt;\n    &lt;x xmlns='urn:xmpp:muclight:0#affiliations'&gt;\n        &lt;version&gt;aaaaaaa&lt;/version&gt;\n        &lt;user affiliation='member'&gt;user2@shakespeare.lit&lt;/user&gt;\n    &lt;/x&gt;\n    &lt;body /&gt;\n&lt;/message&gt;\n</code></pre> <pre><code>&lt;iq to='crone1@shakespeare.lit/desktop'\n    id='create1'\n    from='coven@muclight.shakespeare.lit'\n    type='result' /&gt;\n</code></pre>"},{"location":"open-extensions/muc_light/#511-requesting-a-new-room-with-a-unique-name","title":"5.1.1. Requesting a new room with a unique name","text":"<p>If a client would like to avoid a room JID conflict, it MAY request creating a new room with a server-side generated name, that is verfied to be unique. In order to do so, the client MUST send a creation request to service JID, not room bare JID. The IQ result will originate from the new room bare JID</p> <p>The messages with affiliation change notifications MUST have the same ID as IQ set and result.</p> <p>Client requests room creation</p> <pre><code>&lt;iq from='crone1@shakespeare.lit/desktop'\n    id='createrandom'\n    to='muclight.shakespeare.lit'\n    type='set'&gt;\n    &lt;query xmlns='urn:xmpp:muclight:0#create'&gt;\n        &lt;configuration&gt;\n            &lt;roomname&gt;Random Cave&lt;/roomname&gt;\n        &lt;/configuration&gt;\n    &lt;/query&gt;\n&lt;/iq&gt;\n</code></pre> <pre><code>&lt;message from='randomcave@muclight.shakespeare.lit'\n         to='crone1@shakespeare.lit'\n         type='groupchat'\n         id='createrandom'&gt;\n    &lt;x xmlns='urn:xmpp:muclight:0#affiliations'&gt;\n        &lt;version&gt;aaaaaaa&lt;/version&gt;\n        &lt;user affiliation='owner'&gt;crone1@shakespeare.lit&lt;/user&gt;\n    &lt;/x&gt;\n    &lt;body /&gt;\n&lt;/message&gt;\n</code></pre> <pre><code>&lt;iq to='crone1@shakespeare.lit/desktop'\n    id='createrandom'\n    from='muclight.shakespeare.lit'\n    type='result' /&gt;\n</code></pre>"},{"location":"open-extensions/muc_light/#512-room-already-exists","title":"5.1.2. Room already exists","text":"<p>If the chosen room name already exists, the service MUST return a 'conflict' error.</p> <p>Client requests room creation with existing name</p> <pre><code>&lt;iq from='crone1@shakespeare.lit/desktop'\n    id='conflict1'\n    to='castle@muclight.shakespeare.lit'\n    type='set'&gt;\n    &lt;query xmlns='urn:xmpp:muclight:0#create'&gt;\n        &lt;configuration&gt;\n            &lt;roomname&gt;A Dark Cave&lt;/roomname&gt;\n        &lt;/configuration&gt;\n    &lt;/query&gt;\n&lt;/iq&gt;\n</code></pre> <pre><code>&lt;iq to='crone1@shakespeare.lit/desktop'\n    id='conflict1'\n    from='castle@muclight.shakespeare.lit'\n    type='error'&gt;\n    &lt;error type='cancel'&gt;\n        &lt;conflict xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/&gt;\n    &lt;/error&gt;\n&lt;/iq&gt;\n</code></pre>"},{"location":"open-extensions/muc_light/#52-destroying-a-room","title":"5.2. Destroying a room","text":"<p>A room is automatically destroyed when its occupant list becomes empty or the room owner explicitly sends an IQ with a room destroy request.</p> <p>Before sending an IQ result, every occupant is notified that its affiliation has changed to 'none'. These notifications include an <code>&lt;x/&gt;</code> element qualified with a \"urn:xmpp:muclight:0#destroy\" namespace.</p> <p>Only the room owner is allowed to destroy it.</p> <p>Room destruction notification SHOULD NOT contain version (or \"prev-version\" information).</p> <p>Client requests room destruction</p> <pre><code>&lt;iq from='crone1@shakespeare.lit/desktop'\n    id='destroy1'\n    to='coven@muclight.shakespeare.lit'\n    type='set'&gt;\n    &lt;query xmlns='urn:xmpp:muclight:0#destroy' /&gt;\n&lt;/iq&gt;\n</code></pre> <pre><code>&lt;message from='coven@muclight.shakespeare.lit'\n         to='crone1@shakespeare.lit'\n         type='groupchat'\n         id='destroynotif'&gt;\n    &lt;x xmlns='urn:xmpp:muclight:0#affiliations'&gt;\n        &lt;user affiliation='none'&gt;crone1@shakespeare.lit&lt;/user&gt;\n    &lt;/x&gt;\n    &lt;x xmlns='urn:xmpp:muclight:0#destroy' /&gt;\n    &lt;body /&gt;\n&lt;/message&gt;\n</code></pre> <pre><code>&lt;message from='coven@muclight.shakespeare.lit'\n         to='hag77@shakespeare.lit'\n         type='groupchat'\n         id='destroynotif'&gt;\n    &lt;x xmlns='urn:xmpp:muclight:0#affiliations'&gt;\n        &lt;user affiliation='none'&gt;hag77@shakespeare.lit&lt;/user&gt;\n    &lt;/x&gt;\n    &lt;x xmlns='urn:xmpp:muclight:0#destroy' /&gt;\n    &lt;body /&gt;\n&lt;/message&gt;\n</code></pre> <pre><code>&lt;message from='coven@muclight.shakespeare.lit'\n         to='hag88@shakespeare.lit'\n         type='groupchat'\n         id='destroynotif'&gt;\n    &lt;x xmlns='urn:xmpp:muclight:0#affiliations'&gt;\n        &lt;user affiliation='none'&gt;hag88@shakespeare.lit&lt;/user&gt;\n    &lt;/x&gt;\n    &lt;x xmlns='urn:xmpp:muclight:0#destroy' /&gt;\n    &lt;body /&gt;\n&lt;/message&gt;\n</code></pre> <pre><code>&lt;iq to='crone1@shakespeare.lit/desktop'\n    id='create1'\n    from='coven@muclight.shakespeare.lit'\n    type='result' /&gt;\n</code></pre>"},{"location":"open-extensions/muc_light/#53-setting-room-configuration","title":"5.3. Setting room configuration","text":"<p>Only room owners can modify the room configuration but the service MAY allow members to change it too.</p> <p>All room occupants MUST be notified about a configuration change and both the new and old room version string (<code>&lt;version /&gt;</code> and <code>&lt;prev-version /&gt;</code> respectively).</p> <p>\"version\" and \"prev-version\" configuration field names are NOT ALLOWED - they are reserved for room versioning.</p> <p>The service MAY allow the client to set the configuration fields with any name but it is NOT RECOMMENDED.</p> <p>The Data Forms are not used for the configuration. Instead, the config fields are encoded in XML elements with names equal to the key and content equal to the value.</p> <p>Client configuration request to the server</p> <pre><code>&lt;iq from='crone1@shakespeare.lit/desktop'\n    id='conf2'\n    to='coven@muclight.shakespeare.lit'\n    type='set'&gt;\n    &lt;query xmlns='urn:xmpp:muclight:0#configuration'&gt;\n        &lt;roomname&gt;A Darker Cave&lt;/roomname&gt;\n    &lt;/query&gt;\n&lt;/iq&gt;\n</code></pre> <pre><code>&lt;message from='coven@muclight.shakespeare.lit'\n         to='crone1@shakespeare.lit'\n         type='groupchat'\n         id='configchange'&gt;\n    &lt;x xmlns='urn:xmpp:muclight:0#configuration'&gt;\n        &lt;prev-version&gt;zaqwsx&lt;/prev-version&gt;\n        &lt;version&gt;zxcvbnm&lt;/version&gt;\n        &lt;roomname&gt;A Darker Cave&lt;/roomname&gt;\n    &lt;/x&gt;\n    &lt;body /&gt;\n&lt;/message&gt;\n</code></pre> <pre><code>&lt;message from='coven@muclight.shakespeare.lit'\n         to='hag66@shakespeare.lit'\n         type='groupchat'\n         id='configchange'&gt;\n    &lt;x xmlns='urn:xmpp:muclight:0#configuration'&gt;\n        &lt;prev-version&gt;zaqwsx&lt;/prev-version&gt;\n        &lt;version&gt;zxcvbnm&lt;/version&gt;\n        &lt;roomname&gt;A Darker Cave&lt;/roomname&gt;\n    &lt;/x&gt;\n    &lt;body /&gt;\n&lt;/message&gt;\n</code></pre> <pre><code>&lt;iq to='crone1@shakespeare.lit/desktop'\n    id='conf2'\n    from='coven@muclight.shakespeare.lit'\n    type='result' /&gt;\n</code></pre> <p>The server SHOULD accept incomplete (i.e. delta) configuration forms. In such case, values of the missing fields SHOULD be preserved.</p>"},{"location":"open-extensions/muc_light/#54-changing-the-occupant-list","title":"5.4. Changing the occupant list","text":"<p>The occupant list is modified by a direct affiliation change. Following rules apply:</p> <ol> <li>There are only 3 affiliations.<ul> <li>owner - can do everything in the room</li> <li>member - can send messages to the room and if the service allows it, can also change configuration or change others' affiliations</li> <li>none - not in the room; it's a keyword for marking a user for removal from a room</li> </ul> </li> <li>Every occupant can change its own affiliation to none in order to leave the room.</li> <li>The only way to join the room is being added by other occupant.</li> <li>The owner can change affiliations at will.</li> <li>If the owner leaves, the server MAY use any strategy to choose a new one.</li> <li>The room can have at most one owner. Giving someone else the 'owner' status effectively causes the current one to lose it.</li> <li>The owner can choose a new owner when leaving by including both 'none' and 'owner' items in affiliation change request.</li> <li>Every user JID can be used in the request at most once.</li> <li>A single request MAY change multiple affiliations.</li> <li>All changes must be meaningful, e.g. setting member's affiliation to 'member' is considered a bad request.</li> <li>Server MAY allow members to add new members but they still cannot make anyone an 'owner' or remove other users from the room.</li> <li>On success the server will reply with a result IQ with all the changed items. BEFORE returning the IQ result, the service MUST route a message with the affiliation change to all relevant users.</li> </ol> <p>Newcomers, i.e. users that were not occupants before the change, SHOULD receive only their own affiliation and SHOULD NOT receive a <code>&lt;prev-version /&gt;</code> element.</p> <p>The notifications must include both the new and old room version (<code>&lt;version /&gt;</code> and <code>&lt;prev-version /&gt;</code> respectively) string (except for the ones directed to users that have been removed from the room).</p> <p>The notifications contain a list of items. The item list may be different from the list in the IQ set, because some of the changes may require additional operations, e.g. choosing new owner when the old one leaves. Users, that are still in the room after the change, will receive the full change list. Users, that have been removed from the room with the request, will get only one item: themselves with affiliation 'none'.</p> <p>Affiliations change request</p> <p>Let's consider a room <code>coven</code> with following members:</p> <ul> <li><code>crone1</code> - <code>owner</code></li> <li><code>hag77</code> - <code>member</code></li> <li><code>hag88</code> - <code>member</code></li> </ul> <p><code>hag66</code> is not in the room yet.</p> <p>User <code>crone1</code> wants to add <code>hag66</code> to the room, kick <code>hag88</code> out and make <code>hag77</code> the room owner.</p> <pre><code>&lt;iq from='crone1@shakespeare.lit/desktop'\n    id='member1'\n    to='coven@muclight.shakespeare.lit'\n    type='set'&gt;\n    &lt;query xmlns='urn:xmpp:muclight:0#affiliations'&gt;\n        &lt;user affiliation='member'&gt;hag66@shakespeare.lit&lt;/user&gt;\n        &lt;user affiliation='owner'&gt;hag77@shakespeare.lit&lt;/user&gt;\n        &lt;user affiliation='none'&gt;hag88@shakespeare.lit&lt;/user&gt;\n    &lt;/query&gt;\n&lt;/iq&gt;\n</code></pre> <p>Now each user will receive an update. As you can see, affiliations have changed accordingly to <code>crone1</code> request. However, this request implies one more update. Since <code>hag77</code> has been promoted to a new owner, <code>crone1</code> is automatically degraded to <code>member</code>.</p> <pre><code>&lt;message from='coven@muclight.shakespeare.lit'\n         to='crone1@shakespeare.lit'\n         type='groupchat'\n         id='memberchange'&gt;\n    &lt;x xmlns='urn:xmpp:muclight:0#affiliations'&gt;\n        &lt;prev-version&gt;njiokm&lt;/prev-version&gt;\n        &lt;version&gt;qwerty&lt;/version&gt;\n        &lt;user affiliation='member'&gt;crone1@shakespeare.lit&lt;/user&gt;\n        &lt;user affiliation='member'&gt;hag66@shakespeare.lit&lt;/user&gt;\n        &lt;user affiliation='owner'&gt;hag77@shakespeare.lit&lt;/user&gt;\n        &lt;user affiliation='none'&gt;hag88@shakespeare.lit&lt;/user&gt;\n    &lt;/x&gt;\n    &lt;body&gt;&lt;/body&gt;\n&lt;/message&gt;\n</code></pre> <p>Because <code>hag66</code> was not a member of this room before, they only receive their own affiliation and no prev-version element.</p> <pre><code>&lt;message from='coven@muclight.shakespeare.lit'\n         to='hag66@shakespeare.lit'\n         type='groupchat'\n         id='memberchange'&gt;\n    &lt;x xmlns='urn:xmpp:muclight:0#affiliations'&gt;\n        &lt;version&gt;qwerty&lt;/version&gt;\n        &lt;user affiliation='member'&gt;hag66@shakespeare.lit&lt;/user&gt;\n    &lt;/x&gt;\n    &lt;body&gt;&lt;/body&gt;\n&lt;/message&gt;\n</code></pre> <p><code>hag77</code> receives an ordinary update, just like <code>crone1</code>.</p> <pre><code>&lt;message from='coven@muclight.shakespeare.lit'\n         to='hag77@shakespeare.lit'\n         type='groupchat'\n         id='memberchange'&gt;\n    &lt;x xmlns='urn:xmpp:muclight:0#affiliations'&gt;\n        &lt;prev-version&gt;njiokm&lt;/prev-version&gt;\n        &lt;version&gt;qwerty&lt;/version&gt;\n        &lt;user affiliation='member'&gt;crone1@shakespeare.lit&lt;/user&gt;\n        &lt;user affiliation='member'&gt;hag66@shakespeare.lit&lt;/user&gt;\n        &lt;user affiliation='owner'&gt;hag77@shakespeare.lit&lt;/user&gt;\n        &lt;user affiliation='none'&gt;hag88@shakespeare.lit&lt;/user&gt;\n    &lt;/x&gt;\n    &lt;body&gt;&lt;/body&gt;\n&lt;/message&gt;\n</code></pre> <p><code>hag88</code> has been kicked out of the room and therefore gets only their own affiliation change of type 'none'.</p> <pre><code>&lt;message from='coven@muclight.shakespeare.lit'\n         to='hag88@shakespeare.lit'\n         type='groupchat'\n         id='memberchange'&gt;\n    &lt;x xmlns='urn:xmpp:muclight:0#affiliations'&gt;\n        &lt;user affiliation='none'&gt;hag88@shakespeare.lit&lt;/user&gt;\n    &lt;/x&gt;\n    &lt;body&gt;&lt;/body&gt;\n&lt;/message&gt;\n</code></pre> <p><code>crone1</code> gets the result IQ after the change. <pre><code>&lt;iq to='crone1@shakespeare.lit/desktop'\n    id='member1'\n    from='coven@muclight.shakespeare.lit'\n    type='result' /&gt;\n</code></pre></p>"},{"location":"open-extensions/muc_light/#6-interactions-with-rfcs-and-other-xeps","title":"6. Interactions with RFCs and other XEPs","text":""},{"location":"open-extensions/muc_light/#61-user-rosters","title":"6.1. User rosters","text":"<p>The service MAY add user's rooms to its roster. It allows the client to skip the separate Disco request to the service. Roster items with rooms MUST belong to the group \"urn:xmpp:muclight:0\" (MUC Light namespace) and include the <code>&lt;version/&gt;</code> element. Their subscription type MUST be 'to'.</p> <p>Entity requests the roster and receives a reply that includes a room item</p> <pre><code>&lt;iq type='get' id='roster1' to='shakespeare.lit'&gt;\n    &lt;query xmlns='jabber:iq:roster'/&gt;\n&lt;/iq&gt;\n</code></pre> <pre><code>&lt;iq id='roster1' to='hag66@shakespeare.lit/tablet' type='result'&gt;\n    &lt;query xmlns='jabber:iq:roster' ver='ver7'&gt;\n        &lt;item jid='hag77@shakespeare.lit' subscription='both'/&gt;\n        &lt;item jid='hag88@shakespeare.lit' subscription='both'/&gt;\n        &lt;item jid='coven@muclight.shakespeare.lit' name='The Coven' subscription='to'&gt;\n            &lt;group&gt;urn:xmpp:muclight:0&lt;/group&gt;\n            &lt;version&gt;1234345&lt;/version&gt;\n        &lt;/item&gt;\n    &lt;/query&gt;\n&lt;/iq&gt;\n</code></pre>"},{"location":"open-extensions/muc_light/#62-xep-0313-message-archive-management","title":"6.2. XEP-0313 Message Archive Management","text":"<p>This section defines the rules for archiving MUC Light events and messages. Stanzas described in the subsections below MUST be archived by the server. The stanzas not included here MUST NOT be archived.</p> <p>The <code>&lt;message/&gt;</code> element inside <code>&lt;forwarded/&gt;</code> MUST include a \"from\" attribute and MUST NOT include a \"to\" attribute. \"id\" SHOULD be archived as well.</p> <p>In case of regular groupchat messages, the \"from\" attribute MUST consist of a room full JID with a sender bare JID in the resource part. As for room notification, e.g. create event, \"from\" MUST be equal to room bare JID.</p> <p>Examples below use MAM v0.4 protocol. The archive can be fetched only from a specific room, the client MUST NOT query MUC Light service directly.</p>"},{"location":"open-extensions/muc_light/#621-groupchat-message-from-occupant","title":"6.2.1. Groupchat message from occupant","text":"<p>Message from a user MUST be archived with all child elements.</p> <p>Occupant queries MAM and receives regular groupchat message</p> <pre><code>&lt;iq type='set' id='mamget1' to='coven@muclight.shakespeare.lit'&gt;\n    &lt;query xmlns='urn:xmpp:mam:1' queryid='f27' /&gt;\n&lt;/iq&gt;\n</code></pre> <pre><code>&lt;message id='aeb213' to='hag66@shakespeare.lit/pda'&gt;\n    &lt;result xmlns='urn:xmpp:mam:1' queryid='f27' id='28482-98726-73623'&gt;\n        &lt;forwarded xmlns='urn:xmpp:forward:0'&gt;\n            &lt;delay xmlns='urn:xmpp:delay' stamp='2010-07-10T23:08:25Z'/&gt;\n            &lt;message from=\"coven@muclight.shakespeare.lit/hag77@shakespeare.lit\"\n                     id=\"msgid11\"&gt;\n                &lt;body&gt;Welcome!&lt;/body&gt;\n                &lt;x xmlns=\"elixir:ingredient\"&gt;bat-wing&lt;/x&gt;\n            &lt;/message&gt;\n        &lt;/forwarded&gt;\n    &lt;/result&gt;\n&lt;/message&gt;\n</code></pre> <pre><code>&lt;iq type='result' id='mamget1' from='coven@muclight.shakespeare.lit'/&gt;\n</code></pre>"},{"location":"open-extensions/muc_light/#622-affiliation-change","title":"6.2.2. Affiliation change","text":"<p>Every archived affiliation change notification MUST include the <code>&lt;version/&gt;</code> element and MUST NOT contain the <code>&lt;prev-version/&gt;</code> element.</p> <p>Occupant queries MAM and receives an affiliation change notification</p> <pre><code>&lt;iq type='set' id='mamget2' to='muclight.shakespeare.lit'&gt;\n    &lt;query xmlns='urn:xmpp:mam:1' queryid='f37' /&gt;\n&lt;/iq&gt;\n</code></pre> <pre><code>&lt;message id='aef2133' to='hag66@shakespeare.lit/pda'&gt;\n    &lt;result xmlns='urn:xmpp:mam:1' queryid='f37' id='21482-98726-71623'&gt;\n        &lt;forwarded xmlns='urn:xmpp:forward:0'&gt;\n            &lt;delay xmlns='urn:xmpp:delay' stamp='2013-07-10T21:08:25Z'/&gt;\n            &lt;message from=\"coven@muclight.shakespeare.lit\" id=\"notifid11\"&gt;\n                &lt;x xmlns='urn:xmpp:muclight:0#affiliations'&gt;\n                    &lt;version&gt;b9uf13h98f13&lt;/version&gt;\n                    &lt;user affiliation='owner'&gt;hag66@shakespeare.lit&lt;/user&gt;\n                    &lt;user affiliation='member'&gt;user1@shakespeare.lit&lt;/user&gt;\n                    &lt;user affiliation='member'&gt;user2@shakespeare.lit&lt;/user&gt;\n                &lt;/x&gt;\n            &lt;/message&gt;\n        &lt;/forwarded&gt;\n    &lt;/result&gt;\n&lt;/message&gt;\n</code></pre> <pre><code>&lt;iq type='result' id='mamget12'/&gt;\n</code></pre>"},{"location":"open-extensions/muc_light/#623-room-creation","title":"6.2.3. Room creation","text":"<p>Room creation is archived as an affiliation change that includes ALL initial occupants (including the room creator).</p>"},{"location":"open-extensions/muc_light/#7-general-error-cases","title":"7. General Error Cases","text":""},{"location":"open-extensions/muc_light/#71-client-sends-an-unauthorized-stanza-to-a-room","title":"7.1. Client sends an unauthorized stanza to a room","text":"<p>If a client sends a stanza to the room, that it does not occupy, the service MUST reply with the 'item-not-found' error.</p> <p>Unauthorized IQ</p> <pre><code>&lt;iq from='crone1@shakespeare.lit/desktop'\n    id='member1'\n    to='coven@muclight.shakespeare.lit'\n    type='set'&gt;\n    &lt;query xmlns='urn:xmpp:muclight:0#affiliations'&gt;\n        &lt;user affiliation='member'&gt;hag66@shakespeare.lit&lt;/user&gt;\n    &lt;/query&gt;\n&lt;/iq&gt;\n</code></pre> <pre><code>&lt;iq to='crone1@shakespeare.lit/desktop'\n    id='member1'\n    from='coven@muclight.shakespeare.lit'\n    type='error'&gt;\n    &lt;error type='cancel'&gt;\n        &lt;item-not-found xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/&gt;\n    &lt;/error&gt;\n&lt;/iq&gt;\n</code></pre> <p>Unauthorized message</p> <pre><code>&lt;message from='hag66@shakespeare.lit/pda'\n         id='unauth2'\n         to='coven@muclight.shakespeare.lit'\n         type='groupchat'&gt;\n    &lt;body&gt;Harpier cries: 'tis time, 'tis time.&lt;/body&gt;\n&lt;/message&gt;\n</code></pre> <pre><code>&lt;message to='hag66@shakespeare.lit/pda'\n         id='unauth2'\n         from='coven@muclight.shakespeare.lit'\n         type='error'&gt;\n    &lt;error type='cancel'&gt;\n        &lt;item-not-found xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/&gt;\n    &lt;/error&gt;\n&lt;/message&gt;\n</code></pre>"},{"location":"open-extensions/muc_light/#72-client-sends-a-presence-stanza-to-the-service","title":"7.2. Client sends a &lt;presence/&gt; stanza to the service","text":"<p>The service MUST ignore all <code>&lt;presence/&gt;</code> stanzas sent by the client.</p>"},{"location":"open-extensions/muc_light/#73-client-sends-an-invalid-stanza-to-the-service","title":"7.3. Client sends an invalid stanza to the service","text":"<p>If service receives an invalid stanza it MUST reply with a 'bad-request' error.</p> <p>Invalid IQ</p> <pre><code>&lt;iq from='crone1@shakespeare.lit/desktop'\n    id='bad1'\n    to='coven@muclight.shakespeare.lit'\n    type='set'&gt;\n    &lt;query xmlns='urn:xmpp:muclight:0#affiliations'&gt;\n        &lt;item role='participant'&gt;hag66@shakespeare.lit&lt;/item&gt;\n    &lt;/query&gt;\n&lt;/iq&gt;\n</code></pre> <pre><code>&lt;iq to='crone1@shakespeare.lit/desktop'\n    id='bad1'\n    from='coven@muclight.shakespeare.lit'\n    type='error'&gt;\n    &lt;error type='modify'&gt;\n        &lt;bad-request xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/&gt;\n    &lt;/error&gt;\n&lt;/iq&gt;\n</code></pre> <p>Invalid message</p> <pre><code>&lt;message from='hag66@shakespeare.lit/pda'\n         id='bad2'\n         to='coven@muclight.shakespeare.lit'\n         type='chat'&gt;\n    &lt;body&gt;Harpier cries: 'tis time, 'tis time.&lt;/body&gt;\n&lt;/message&gt;\n</code></pre> <pre><code>&lt;message to='hag66@shakespeare.lit/pda'\n         id='bad2'\n         from='coven@muclight.shakespeare.lit'\n         type='error'&gt;\n    &lt;error type='modify'&gt;\n        &lt;bad-request xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/&gt;\n    &lt;/error&gt;\n&lt;/message&gt;\n</code></pre>"},{"location":"open-extensions/muc_light/#74-request-sender-has-insufficient-privileges","title":"7.4. Request sender has insufficient privileges","text":"<p>If the request sender does not have sufficient privileges (but is a room occupant), the service MUST reply with a 'not-allowed' error.</p> <p>It occurs in the following cases:</p> <ul> <li>A member tries to change the configuration but the service is not configured to allow it.   It does not apply to the subject change,   although it has to be performed by sending <code>&lt;message/&gt;</code> with <code>&lt;subject/&gt;</code>,   not configuration <code>&lt;iq/&gt;</code>.</li> <li>A member tries to change anyone's affiliation to 'none' or 'owner'.</li> <li>A member tries to change someone's affiliation to 'member' but the service is not configured to allow it.</li> </ul> <p>Prohibited IQ</p> <pre><code>&lt;iq from='minion@shakespeare.lit/desktop'\n    id='privileges1'\n    to='coven@muclight.shakespeare.lit'\n    type='set'&gt;\n    &lt;query xmlns='urn:xmpp:muclight:0#affiliations'&gt;\n        &lt;user role='owner'&gt;minion@shakespeare.lit&lt;/user&gt;\n    &lt;/query&gt;\n&lt;/iq&gt;\n</code></pre> <pre><code>&lt;iq to='minion@shakespeare.lit/desktop'\n    id='privileges1'\n    from='coven@muclight.shakespeare.lit'\n    type='error'&gt;\n    &lt;error type='cancel'&gt;\n        &lt;not-allowed xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/&gt;\n    &lt;/error&gt;\n&lt;/iq&gt;\n</code></pre>"},{"location":"open-extensions/muc_light/#8-implementation-notes","title":"8. Implementation Notes","text":""},{"location":"open-extensions/muc_light/#81-xep-0045-mappings-aka-legacy-mode","title":"8.1. XEP-0045 mappings a.k.a. legacy mode","text":"<p>Some client-side developers might choose to use existing XEP-0045 Multi-User Chat implementations to interface with the new MUC Light. There may be various reasons to do so: using a familiar protocol, avoiding additional implementation, quick prototyping etc. This section provides suggestions of mappings between XEP-0045 stanzas and the new ones described in this document. These mappings are ONLY available to use in the legacy mode, which allows using a subset of classic MUC stanzas but comes with the drawback that some of the functions are limited.</p> <p>Operations not described here SHOULD remain unmodified.</p>"},{"location":"open-extensions/muc_light/#811-discovering-the-features-supported-by-a-muc-service","title":"8.1.1. Discovering the Features Supported by a MUC Service","text":"<p>A Disco result MAY either include a new <code>&lt;feature/&gt;</code> element with an \"http://jabber.org/protocol/muc\" namespace next to MUC Light one, or completely replace it, which is the RECOMMENDED behaviour.</p> <p>Returning a MUC namespace in Disco</p> <pre><code>&lt;iq from='hag66@shakespeare.lit/pda'\n    id='lx09df27'\n    to='muclight.shakespeare.lit'\n    type='get'&gt;\n    &lt;query xmlns='http://jabber.org/protocol/disco#info'/&gt;\n&lt;/iq&gt;\n</code></pre> <pre><code>&lt;iq from='muclight.shakespeare.lit'\n    id='lx09df27'\n    to='hag66@shakespeare.lit/pda'\n    type='result'&gt;\n    &lt;query xmlns='http://jabber.org/protocol/disco#info'&gt;\n        &lt;identity category='conference'\n                  name='Shakespearean Chat Service'\n                  type='text'/&gt;\n        &lt;feature var='http://jabber.org/protocol/muc'/&gt;\n    &lt;/query&gt;\n&lt;/iq&gt;\n</code></pre>"},{"location":"open-extensions/muc_light/#812-discovering-occupied-rooms","title":"8.1.2. Discovering Occupied Rooms","text":"<p>The room list MUST NOT include room versions.</p> <p>Service Returns Disco Items Result</p> <pre><code>&lt;iq from='muclight.shakespeare.lit'\n    id='zb8q41f4'\n    to='hag66@shakespeare.lit/pda'\n    type='result'&gt;\n    &lt;query xmlns='http://jabber.org/protocol/disco#items'&gt;\n        &lt;item jid='heath@muclight.shakespeare.lit'\n              name='A Lonely Heath'/&gt;\n        &lt;item jid='coven@muclight.shakespeare.lit'\n              name='A Dark Cave'/&gt;\n        &lt;item jid='forres@muclight.shakespeare.lit'\n              name='The Palace'/&gt;\n        &lt;item jid='inverness@muclight.shakespeare.lit'\n              name='Macbeth&amp;apos;s Castle'/&gt;\n    &lt;/query&gt;\n&lt;/iq&gt;\n</code></pre>"},{"location":"open-extensions/muc_light/#813-changing-a-room-subject","title":"8.1.3. Changing a room subject","text":"<p>Instead of distributing the configuration change notifications, the room MUST route <code>&lt;message/&gt;</code> with a <code>&lt;subject/&gt;</code> like a classic MUC would. The client MUST send a classic message <code>&lt;subject/&gt;</code> as well. The room SHOULD save a new subject in the room configuration.</p> <p>New subject is routed as an ordinary message</p> <pre><code>&lt;message from='hag66@shakespeare.lit/pda'\n         id='compsubject'\n         to='coven@muclight.shakespeare.lit'\n         type='groupchat'&gt;\n    &lt;subject&gt;To be or not to be?&lt;/subject&gt;\n&lt;/message&gt;\n</code></pre> <pre><code>&lt;message from='coven@muclight.shakespeare.lit'\n         to='crone1@shakespeare.lit'\n         type='groupchat'\n         id='compsubject'&gt;\n    &lt;subject&gt;To be or not to be?&lt;/subject&gt;\n&lt;/message&gt;\n</code></pre> <pre><code>&lt;message from='coven@muclight.shakespeare.lit'\n         to='hag66@shakespeare.lit'\n         type='groupchat'\n         id='compsubject'&gt;\n    &lt;subject&gt;To be or not to be?&lt;/subject&gt;\n&lt;/message&gt;\n</code></pre>"},{"location":"open-extensions/muc_light/#814-getting-a-room-configuration","title":"8.1.4. Getting a room configuration","text":"<p>Room configuration is encoded in a Data Form, that simulates the XEP-0045 config form.</p> <p>Getting the room configuration does not benefit from room versioning.</p> <p>Requesting room configuration</p> <pre><code>&lt;iq from='crone1@shakespeare.lit/desktop'\n    id='comp-config'\n    to='coven@muclight.shakespeare.lit'\n    type='get'&gt;\n    &lt;query xmlns='http://jabber.org/protocol/muc#owner'/&gt;\n&lt;/iq&gt;\n</code></pre> <pre><code>&lt;iq from='coven@muclight.shakespeare.lit'\n    id='comp-config'\n    to='crone1@shakespeare.lit/desktop'\n    type='result'&gt;\n    &lt;query xmlns='http://jabber.org/protocol/muc#owner'&gt;\n        &lt;x xmlns='jabber:x:data' type='form'&gt;\n            &lt;title&gt;Configuration for \"coven\" Room&lt;/title&gt;\n            &lt;field type='hidden' var='FORM_TYPE'&gt;\n                &lt;value&gt;http://jabber.org/protocol/muc#roomconfig&lt;/value&gt;\n            &lt;/field&gt;\n            &lt;field label='Natural-Language Room Name'\n                   type='text-single'\n                   var='muc#roomconfig_roomname'&gt;\n                &lt;value&gt;A Dark Cave&lt;/value&gt;\n            &lt;/field&gt;\n            &lt;field label='Room subject'\n                   type='text-single'\n                   var='muc#roomconfig_subject'&gt;\n                &lt;value&gt;To be or not to be?&lt;/value&gt;\n            &lt;/field&gt;\n        &lt;/x&gt;\n    &lt;/query&gt;\n&lt;/iq&gt;\n</code></pre>"},{"location":"open-extensions/muc_light/#815-requesting-a-user-list","title":"8.1.5. Requesting a user list","text":"<p>A user list is retrieved with an affiliation IQ get.</p> <p>Requesting affiliation list</p> <pre><code>&lt;iq from='crone1@shakespeare.lit/desktop'\n    id='comp-getaff'\n    to='coven@muclight.shakespeare.lit' type='get'&gt;\n    &lt;query xmlns='http://jabber.org/protocol/muc#admin'&gt;\n        &lt;item affiliation='owner'/&gt;\n        &lt;item affiliation='member'/&gt;\n    &lt;/query&gt;\n&lt;/iq&gt;\n</code></pre> <pre><code>&lt;iq from='coven@muclight.shakespeare.lit'\n    id='comp-getaff'\n    to='crone1@shakespeare.lit/desktop'\n    type='result'&gt;\n    &lt;query xmlns='http://jabber.org/protocol/muc#admin'&gt;\n        &lt;item affiliation='owner'\n              jid='crone1@shakespeare.lit'\n              nick='crone1@shakespeare.lit'\n              role='moderator'/&gt;\n        &lt;item affiliation='member'\n              jid='hag66@shakespeare.lit'\n              nick='hag66@shakespeare.lit'\n              role='participant'/&gt;\n    &lt;/query&gt;\n&lt;/iq&gt;\n</code></pre>"},{"location":"open-extensions/muc_light/#816-requesting-room-information","title":"8.1.6. Requesting room information","text":"<p>There is no XEP-0045 equivalent for getting full room information.</p>"},{"location":"open-extensions/muc_light/#817-leaving-the-room","title":"8.1.7. Leaving the room","text":"<p>Leaving the room is performed by setting the own affiliation to 'none'. The service uses <code>&lt;presence/&gt;</code> to notify all occupants (and former occupant) about the change. <code>&lt;presence/&gt;</code> to the leaving occupant MUST be of the type \"unavailable\" and MUST include a status code 321 (i.e. user leaving due to affiliation change).</p> <p>Leaving the room</p> <pre><code>&lt;iq from='crone1@shakespeare.lit/desktop'\n    id='comp-leave'\n    to='coven@muclight.shakespeare.lit'\n    type='set'&gt;\n    &lt;query xmlns='http://jabber.org/protocol/muc#admin'&gt;\n        &lt;item affiliation='none' jid='crone1@shakespeare.lit'/&gt;\n    &lt;/query&gt;\n&lt;/iq&gt;\n</code></pre> <pre><code>&lt;presence from='coven@muclight.shakespeare.lit/crone1@shakespeare.lit'\n          to='crone1@shakespeare.lit'\n          type='unavailable'&gt;\n    &lt;x xmlns='http://jabber.org/protocol/muc#user'&gt;\n        &lt;item affiliation='none' jid='crone1@shakespeare.lit/pda' role='none'/&gt;\n        &lt;status code='321'/&gt;\n    &lt;/x&gt;\n&lt;/presence&gt;\n</code></pre> <pre><code>&lt;presence from='coven@muclight.shakespeare.lit/crone1@shakespeare.lit'\n          to='hag66@shakespeare.lit/desktop'&gt;\n    &lt;x xmlns='http://jabber.org/protocol/muc#user'&gt;\n        &lt;item affiliation='none' jid='crone1@shakespeare.lit/pda' role='none'/&gt;\n        &lt;status code='321'/&gt;\n    &lt;/x&gt;\n&lt;/presence&gt;\n</code></pre> <pre><code>&lt;iq from='coven@muclight.shakespeare.lit'\n    id='comp-leave'\n    to='crone1@shakespeare.lit/desktop'\n    type='result'/&gt;\n</code></pre>"},{"location":"open-extensions/muc_light/#818-blocking-functionality","title":"8.1.8. Blocking functionality","text":"<p>The blocking functionality uses a small subset of the Privacy Lists protocol. Stanzas MUST be addressed to the sender's bare JID (the <code>to</code> attribute may be skipped). The privacy list name MUST be equal to \"urn:xmpp:muclight:0\". Obviously, this method won't work properly in XMPP Server Federation, because privacy stanzas are handled by sender's server and the MUC Light Blocking functionality is handled by a MUC Light service server. As opposed to XEP-0016, it is allowed to send \"delta\" privacy lists.</p>"},{"location":"open-extensions/muc_light/#8181-request-blocking-list","title":"8.1.8.1. Request blocking list","text":"<p>Retrieving blocking list</p> <pre><code>&lt;iq from='crone1@shakespeare.lit/desktop' type='get' id='comp-getlist'&gt;\n    &lt;query xmlns='jabber:iq:privacy'&gt;\n        &lt;list name='urn:xmpp:muclight:0'/&gt;\n    &lt;/query&gt;\n&lt;/iq&gt;\n</code></pre> <pre><code>&lt;iq type='result' id='comp-getlist' to='crone1@shakespeare.lit/desktop'&gt;\n    &lt;query xmlns='jabber:iq:privacy'&gt;\n        &lt;list name='urn:xmpp:muclight:0'&gt;\n            &lt;item type='jid'\n                  value='coven@muclight.shakespeare.lit'\n                  action='deny'\n                  order='1'/&gt;\n            &lt;item type='jid'\n                  value='muclight.shakespeare.lit/hag66@shakespeare.lit'\n                  action='deny'\n                  order='1'/&gt;\n        &lt;/list&gt;\n    &lt;/query&gt;\n&lt;/iq&gt;\n</code></pre>"},{"location":"open-extensions/muc_light/#8182-blocking-a-room","title":"8.1.8.2. Blocking a room","text":"<p>In order to block a room, the client MUST deny a room bare JID in privacy list.</p> <p>Blocking a room</p> <pre><code>&lt;iq from='crone1@shakespeare.lit/desktop' type='set' id='comp-blockroom'&gt;\n    &lt;query xmlns='jabber:iq:privacy'&gt;\n        &lt;list name='urn:xmpp:muclight:0'&gt;\n            &lt;item type='jid'\n                  value='coven@muclight.shakespeare.lit'\n                  action='deny'\n                  order='1'/&gt;\n        &lt;/list&gt;\n    &lt;/query&gt;\n&lt;/iq&gt;\n</code></pre> <pre><code>&lt;iq type='result' id='comp-blockroom' to='crone1@shakespeare.lit/desktop' /&gt;\n</code></pre>"},{"location":"open-extensions/muc_light/#8183-blocking-a-user","title":"8.1.8.3. Blocking a user","text":"<p>In order to block a room, the client MUST deny a service JID with user's bare JID in the resource.</p> <p>Blocking a user</p> <pre><code>&lt;iq from='crone1@shakespeare.lit/desktop' type='set' id='comp-blockuser'&gt;\n    &lt;query xmlns='jabber:iq:privacy'&gt;\n        &lt;list name='urn:xmpp:muclight:0'&gt;\n            &lt;item type='jid'\n                  value='muclight.shakespeare.lit/hag66@shakespeare.lit'\n                  action='deny'\n                  order='1'/&gt;\n        &lt;/list&gt;\n    &lt;/query&gt;\n&lt;/iq&gt;\n</code></pre> <pre><code>&lt;iq type='result' id='comp-blockuser' to='crone1@shakespeare.lit/desktop' /&gt;\n</code></pre>"},{"location":"open-extensions/muc_light/#8184-unblocking","title":"8.1.8.4. Unblocking","text":"<p>Unblocking</p> <pre><code>&lt;iq from='crone1@shakespeare.lit/desktop' type='get' id='comp-getlist'&gt;\n    &lt;query xmlns='jabber:iq:privacy'&gt;\n        &lt;list name='urn:xmpp:muclight:0'&gt;\n            &lt;item type='jid'\n                  value='coven@muclight.shakespeare.lit'\n                  action='allow'\n                  order='1'/&gt;\n            &lt;item type='jid'\n                  value='muclight.shakespeare.lit/hag66@shakespeare.lit'\n                  action='allow'\n                  order='1'/&gt;\n        &lt;/list&gt;\n    &lt;/query&gt;\n&lt;/iq&gt;\n</code></pre> <pre><code>&lt;iq type='result' id='comp-getlist' to='crone1@shakespeare.lit/desktop' /&gt;\n</code></pre>"},{"location":"open-extensions/muc_light/#819-creating-a-room","title":"8.1.9. Creating a room","text":"<p>The room is created in a standard XEP-0045 way. Client MUST use a nick equal to their own bare JID.</p> <p>Compatibility mode MUST NOT support a unique room name generation.</p> <p>Creating a room</p> <pre><code>&lt;presence from='crone1@shakespeare.lit/desktop'\n          to='coven@muclight.shakespeare.lit/crone1@shakespeare.lit'&gt;\n    &lt;x xmlns='http://jabber.org/protocol/muc'/&gt;\n&lt;/presence&gt;\n</code></pre> <pre><code>&lt;presence from='coven@chat.shakespeare.lit/crone1@shakespeare.lit'\n          to='crone1@shakespeare.lit/desktop'&gt;\n    &lt;x xmlns='http://jabber.org/protocol/muc#user'&gt;\n        &lt;item affiliation='owner' role='moderator'/&gt;\n        &lt;status code='110'/&gt;\n        &lt;status code='201'/&gt;\n    &lt;/x&gt;\n&lt;/presence&gt;\n</code></pre>"},{"location":"open-extensions/muc_light/#8191-room-already-exists","title":"8.1.9.1. Room already exists","text":"<p>If the client attempts to create a room that is already used, it will receive an error <code>&lt;presence/&gt;</code> informing that registration is required (like in the case of members-only rooms in XEP-0045).</p> <p>Creating a room</p> <pre><code>&lt;presence from='coven@muclight.shakespeare.lit/crone1@shakespeare.lit'\n          to='crone1@shakespeare.lit/desktop'\n          type='error'&gt;\n    &lt;x xmlns='http://jabber.org/protocol/muc'/&gt;\n    &lt;error by='coven@muclight.shakespeare.lit' type='auth'&gt;\n        &lt;registration-required xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/&gt;\n    &lt;/error&gt;\n&lt;/presence&gt;\n</code></pre>"},{"location":"open-extensions/muc_light/#8110-destroying-the-room","title":"8.1.10. Destroying the room","text":"<p>A classic XEP-0045 method is used but the service SHOULD NOT forward reason and alternate venue JID.</p> <p>Destroying the room</p> <pre><code>&lt;iq from='crone1@shakespeare.lit/desktop'\n    id='begone'\n    to='heath@muclight.shakespeare.lit'\n    type='set'&gt;\n    &lt;query xmlns='http://jabber.org/protocol/muc#owner'&gt;\n        &lt;destroy jid='coven@muclight.shakespare.lit'&gt;\n            &lt;reason&gt;Some reason.&lt;/reason&gt;\n        &lt;/destroy&gt;\n    &lt;/query&gt;\n&lt;/iq&gt;\n</code></pre> <pre><code>&lt;presence from='heath@chat.shakespeare.lit/crone1@shakespeare.lit'\n    to='crone1@shakespeare.lit/desktop' type='unavailable'&gt;\n    &lt;x xmlns='http://jabber.org/protocol/muc#user'&gt;\n        &lt;item affiliation='none' role='none'/&gt;\n        &lt;destroy /&gt;\n    &lt;/x&gt;\n&lt;/presence&gt;\n</code></pre> <pre><code>&lt;presence\n    from='heath@chat.shakespeare.lit/wiccarocks@shakespeare.lit'\n    to='wiccarocks@shakespeare.lit/laptop' type='unavailable'&gt;\n    &lt;x xmlns='http://jabber.org/protocol/muc#user'&gt;\n        &lt;item affiliation='none' role='none'/&gt;\n        &lt;destroy /&gt;\n    &lt;/x&gt;\n&lt;/presence&gt;\n</code></pre> <pre><code>&lt;presence\n    from='heath@chat.shakespeare.lit/hag66@shakespeare.lit'\n    to='hag66@shakespeare.lit/pda'\n    type='unavailable'&gt;\n    &lt;x xmlns='http://jabber.org/protocol/muc#user'&gt;\n        &lt;item affiliation='none' role='none'/&gt;\n        &lt;destroy /&gt;\n    &lt;/x&gt;\n&lt;/presence&gt;\n</code></pre> <pre><code>&lt;iq from='heath@chat.shakespeare.lit'\n    id='begone'\n    to='crone1@shakespeare.lit/desktop'\n    type='result'/&gt;\n</code></pre>"},{"location":"open-extensions/muc_light/#8111-setting-room-configuration","title":"8.1.11. Setting room configuration","text":"<p>Room occupants can use a standard XEP-0045 configuration modification method. The service MUST broadcast only the notification about the configuration change with a status code 104, so every occupant can retrieve the new room configuration in a separate request. The client is allowed to send a config delta in a form.</p> <p>Setting room configuration</p> <pre><code>&lt;iq to='coven@muclight.shakespeare.lit'\n    id='comp-setconfig'\n    from='crone1@shakespeare.lit/desktop'\n    type='set'&gt;\n    &lt;query xmlns='http://jabber.org/protocol/muc#owner'&gt;\n        &lt;x xmlns='jabber:x:data' type='form'&gt;\n            &lt;field type='hidden' var='FORM_TYPE'&gt;\n                &lt;value&gt;http://jabber.org/protocol/muc#roomconfig&lt;/value&gt;\n            &lt;/field&gt;\n            &lt;field label='Natural-Language Room Name'\n                   type='text-single'\n                   var='muc#roomconfig_roomname'&gt;\n                &lt;value&gt;A Darker Cave&lt;/value&gt;\n            &lt;/field&gt;\n            &lt;field label='Room subject'\n                   type='text-single'\n                   var='muc#roomconfig_subject'&gt;\n                &lt;value&gt;To be!&lt;/value&gt;\n            &lt;/field&gt;\n        &lt;/x&gt;\n    &lt;/query&gt;\n&lt;/iq&gt;\n</code></pre> <pre><code>&lt;message from='coven@muclight.shakespeare.lit'\n         id='comp-confchange'\n         to='crone1@shakespeare.lit/desktop'\n         type='groupchat'&gt;\n    &lt;x xmlns='http://jabber.org/protocol/muc#user'&gt;\n        &lt;status code='104'/&gt;\n    &lt;/x&gt;\n&lt;/message&gt;\n</code></pre> <pre><code>&lt;message from='coven@muclight.shakespeare.lit'\n         id='comp-confchange'\n         to='crone2@shakespeare.lit/desktop'\n         type='groupchat'&gt;\n    &lt;x xmlns='http://jabber.org/protocol/muc#user'&gt;\n        &lt;status code='104'/&gt;\n    &lt;/x&gt;\n&lt;/message&gt;\n</code></pre> <pre><code>&lt;iq from='coven@muclight.shakespeare.lit'\n    id='comp-setconfig'\n    to='crone1@shakespeare.lit/desktop'\n    type='result'/&gt;\n</code></pre>"},{"location":"open-extensions/muc_light/#8112-changing-occupant-list","title":"8.1.12. Changing occupant list","text":"<p>The service MUST send an affiliation change notification to all participants. Leaving users MUST NOT receive any information except for their own \"none\" affiliation. New users MUST receive an invitation message.</p> <p>Changing occupant list</p> <pre><code>&lt;iq from='crone1@shakespeare.lit/desktop'\n    id='comp-setaff'\n    to='coven@muclight.shakespeare.lit'\n    type='set'&gt;\n    &lt;query xmlns='http://jabber.org/protocol/muc#admin'&gt;\n        &lt;item affiliation='none' jid='hag66@shakespeare.lit'/&gt;\n        &lt;item affiliation='member' jid='hecate@shakespeare.lit'/&gt;\n    &lt;/query&gt;\n&lt;/iq&gt;\n</code></pre> <pre><code>&lt;presence from='coven@chat.shakespeare.lit/hag66@shakespeare.lit'\n          to='hag66@shakespeare.lit'\n          type='unavailable'&gt;\n    &lt;x xmlns='http://jabber.org/protocol/muc#user'&gt;\n        &lt;item affiliation='none' jid='hag66@shakespeare.lit' role='none'/&gt;\n        &lt;status code='321'/&gt;\n    &lt;/x&gt;\n&lt;/presence&gt;\n</code></pre> <pre><code>&lt;message from='coven@muclight.shakespeare.lit'\n         id='comp-invite0'\n         to='hecate@shakespeare.lit'&gt;\n    &lt;x xmlns='http://jabber.org/protocol/muc#user'&gt;\n        &lt;invite from='crone1@shakespeare.lit'/&gt;\n    &lt;/x&gt;\n&lt;/message&gt;\n</code></pre> <pre><code>&lt;presence from='coven@chat.shakespeare.lit/hag66@shakespeare.lit'\n          to='crone1@shakespeare.lit'\n          type='unavailable'&gt;\n    &lt;x xmlns='http://jabber.org/protocol/muc#user'&gt;\n        &lt;item affiliation='none' jid='hag66@shakespeare.lit' role='none'/&gt;\n        &lt;status code='321'/&gt;\n    &lt;/x&gt;\n&lt;/presence&gt;\n</code></pre> <pre><code>&lt;presence from='coven@chat.shakespeare.lit/hecate@shakespeare.lit'\n          to='crone1@shakespeare.lit'&gt;\n    &lt;x xmlns='http://jabber.org/protocol/muc#user'&gt;\n        &lt;item affiliation='member'\n              jid='hecate@shakespeare.lit'\n              role='participant'\n              nick='hecate@shakespeare.lit'/&gt;\n    &lt;/x&gt;\n&lt;/presence&gt;\n</code></pre> <pre><code>&lt;iq from='coven@muclight.shakespeare.lit'\n    id='comp-setaff'\n    to='crone1@shakespeare.lit/desktop'\n    type='result'/&gt;\n</code></pre>"},{"location":"open-extensions/muc_light/#82-service-limits-and-configuration","title":"8.2. Service limits and configuration","text":"<p>The MUC Light service may be abused by a malicious users, e.g. due to replicating a single message for every room occupant. The list below contains suggested configurable limits that SHOULD be implemented.</p> <p>The service features that might vary depending on a specific application are included as well.</p> <ul> <li>Maximum number of rooms the user occupies.</li> <li>Blocking feature enabled/disabled.</li> <li>XEP-0045 compatibility mode enabled/disabled.</li> <li>Room creator's initial affiliation: owner/member.</li> <li>Room configuration may be changed by owner/occupants.</li> <li>New members can be invited by owner/occupants.</li> <li>Maximal room size.</li> </ul>"},{"location":"open-extensions/smart-markers/","title":"Smart Markers","text":"<p>This module allows the client to query for the most recent chat markers.</p> <p>When a client enters a conversation after being offline for a while, such client might want to know what was the last message-id that was marked according to the rules defined in XEP-0333 - Chat Markers, in order to know where he left of, and build an enhanced UI.</p> <p>MongooseIM provides such functionality, using mod_smart_markers</p>"},{"location":"open-extensions/smart-markers/#namespace","title":"Namespace","text":"<pre><code>esl:xmpp:smart-markers:0\n</code></pre>"},{"location":"open-extensions/smart-markers/#fetching-a-conversations-latest-markers","title":"Fetching a conversation's latest markers","text":"<p>Given a peer, i.e., another user or a muc room, we can fetch the marker we last sent, to the main thread or any other sub-thread, with an IQ like the following: <pre><code>&lt;iq id='iq-unique-id' type='get'&gt;\n  &lt;query xmlns='esl:xmpp:smart-markers:0' peer='&lt;peer-bare-jid&gt;' [thread='&lt;thread-id&gt;' after='&lt;RFC3339-timestamp&gt;'] /&gt;\n&lt;/iq&gt;\n</code></pre> where:</p> <ul> <li><code>&lt;peer-bare-jid&gt;</code> MUST be the bare jid of the peer whose last marker wants to be checked. It can be the bare jid of a user, or of MUC room.</li> <li><code>&lt;thread&gt;</code> is an optional attribute that indicates if the check refers to specific a thread in the conversation. If not provided, defaults to the main conversation thread.</li> <li><code>&lt;after&gt;</code> is an optional attribute indicating whether markers sent only after a certain timestamp are desired. This most often makes sense for big groupchats, as a potential filter to reduce the amount of markers that will be returned.</li> </ul> <p>Then the following would be received, was there to be any marker: <pre><code>&lt;iq from='user-bare-jid' to='user-jid' id='iq-unique-id' type='result'&gt;\n  &lt;query xmlns='esl:xmpp:smart-markers:0' peer='peer-bare-jid'&gt;\n    &lt;marker from='&lt;sender-bare-jid&gt;' id='&lt;message-id&gt;' type='&lt;type&gt;' timestamp='&lt;RFC3339&gt;' [thread='&lt;thread-id&gt;']/&gt;\n  &lt;/query&gt;\n&lt;/iq&gt;\n</code></pre> where <code>peer-bare-jid</code> matches the requested bare jid and the subelements are <code>marker</code> xml payloads with the following attributes:</p> <ul> <li><code>&lt;id&gt;</code> is the message id associated to this marker.</li> <li><code>&lt;type&gt;</code> is a marker as described in XEP-0333.</li> <li><code>&lt;timestamp&gt;</code> contains an RFC3339 timestamp indicating when the marker was sent</li> <li><code>&lt;thread&gt;</code> is an optional attribute that indicates if the marker refers to specific a thread in the conversation, or the main conversation if absent.</li> <li><code>&lt;sender-bare-jid&gt;</code> is the bare jid of the peer who sent the marker, which can be the requester itself, or any peer in the conversation, for both 1:1 chats or groupchats.</li> </ul>"},{"location":"open-extensions/smart-markers/#example-11","title":"Example: 1:1","text":"<pre><code>&lt;!-- Alice fetches markers in her conversation with Bob --&gt;\n&lt;iq id='iq-unique-id' type='get'&gt;\n  &lt;query xmlns='esl:xmpp:smart-markers:0' peer='bob@localhost' /&gt;\n&lt;/iq&gt;\n\n&lt;!-- She receives as an answer --&gt;\n&lt;iq from='alice@localhost' to='alice@localhost/res1' id='iq-unique-id' type='result'&gt;\n  &lt;query xmlns='esl:xmpp:smart-markers:0' peer='bob@localhost'&gt;\n    &lt;marker from='alice@localhost' id='ABCDEFGHIJ' type='displayed' timestamp='2022-02-26T09:11:05.634232Z'/&gt;\n    &lt;marker from='bob@localhost' id='KLMNOPQRST' type='displayed' timestamp='2022-02-26T09:11:07.382923Z'/&gt;\n  &lt;/query&gt;\n&lt;/iq&gt;\n</code></pre>"},{"location":"open-extensions/smart-markers/#example-groupchats","title":"Example: groupchats","text":"<pre><code>&lt;!-- Alice fetches markers in a groupchat --&gt;\n&lt;iq id='iq-unique-id' type='get'&gt;\n  &lt;query xmlns='esl:xmpp:smart-markers:0' peer='room@muc.localhost' /&gt;\n&lt;/iq&gt;\n\n&lt;!-- She receives as an answer --&gt;\n&lt;iq from='alice@localhost' to='alice@localhost/res1' id='iq-unique-id' type='result'&gt;\n  &lt;query xmlns='esl:xmpp:smart-markers:0' peer='room@muc.localhost'&gt;\n    &lt;marker from='alice@localhost' id='XOLWEMUNTO' type='displayed' timestamp='2022-02-26T09:11:05.634232Z'/&gt;\n    &lt;marker from='bob@localhost' id='NNTMWMKSOE' type='displayed' timestamp='2022-02-26T09:11:07.382923Z'/&gt;\n    &lt;marker from='mike@localhost' id='OSNTETNHUR' type='displayed' timestamp='2022-02-26T09:13:07.382923Z'/&gt;\n    &lt;marker from='kate@localhost' id='SNWMENSTUH' type='displayed' timestamp='2022-02-26T09:12:07.382923Z'/&gt;\n  &lt;/query&gt;\n&lt;/iq&gt;\n</code></pre>"},{"location":"open-extensions/token-reconnection/","title":"Token-based reconnection","text":""},{"location":"open-extensions/token-reconnection/#introduction","title":"Introduction","text":"<p>Automatic reconnection after spurious disconnection is a must-have feature in modern IM applications.  One way of providing this feature is storing the user login information on the disk.  Here you need to balance two values - security and convenience for the end-user.  To put it simply: storing passwords in plaintext is inherently insecure while protecting the XMPP password with a master-password damages the user experience. With a token-based authentication mechanism, the user has to provide login information only once, for the initial connection to the XMPP server, and can later rely on the application's automatic use of tokens for subsequent reconnections.</p> <p>Reconnecting to the XMPP server, usually means that the client has to go through the same long process of SASL challenge-response exchange which may cause noticeable lags, especially while using SCRAM-based mechanisms.  Providing a token to the XMPP server is secure and doesn't require multiple challenge-response roundtrips, therefore might significantly speed up reconnection times.</p>"},{"location":"open-extensions/token-reconnection/#requirements","title":"Requirements","text":"<p>This extension requires the client application to authenticate to the XMPP server using a regular XMPP authentication mechanism like SCRAM-SHA-1 at least once.</p> <p>After that, the following authentications may be done using X-OAUTH SASL mechanism with a token obtained from the server.</p> <p>To enable the feature, modules <code>mod_auth_token</code> and <code>mod_keystore</code> have to be enabled on the server. For more details regarding the configuration see mod_auth_token documentation and mod_keystore.</p>"},{"location":"open-extensions/token-reconnection/#token-types","title":"Token types","text":"Token Type Description Access token These are short lived tokens whose grants aren't tracked by the server (i.e. there's no need to store anything in a database). Access tokens can be used as a payload for the X-OAUTH authentication mechanism and grant access to the system. Access tokens can't be revoked. An access token is valid only until its expiry date is reached. Refresh token These are longer lived tokens which are tracked by the server, and therefore require persistent storage. Refresh tokens can be used as a payload for the X-OAUTH authentication mechanism and grant access to the system, as well as result in a new set of tokens being returned upon successful authentication. Refresh tokens can be revoked. A refresh token is valid until it has expired, unless it has been revoked. On revocation, it immediately becomes invalid. As the server stores information about granted tokens, it can also persistently mark them as revoked. <p>While only two token types have been described above, implementations might use other token types for specific purposes.  For example, a particular token type could limit the access privileges of a user logged into the system or denote an affiliation with a Multi User Chat room.  None of such capability grants are a subject of this specification though.</p>"},{"location":"open-extensions/token-reconnection/#use-cases","title":"Use cases","text":""},{"location":"open-extensions/token-reconnection/#obtaining-a-token","title":"Obtaining a token","text":"<p>After authenticating with some other mechanism like SCRAM-SHA-1, a client may request a token from the server by sending the following iq get to its own bare JID:</p> <p>Client requests tokens</p> <pre><code>&lt;iq type='get' to='alice@wonderland.com' id='123'&gt;\n    &lt;query xmlns='erlang-solutions.com:xmpp:token-auth:0'/&gt;\n&lt;/iq&gt;\n</code></pre> <p>Server responds with a tokens</p> <pre><code>&lt;iq from=\"alice@wonderland.com\" type=\"result\" to=\"alice@wonderland.com/resource\" id=\"123\"&gt;\n  &lt;items xmlns=\"erlang-solutions.com:xmpp:token-auth:0\"&gt;\n    &lt;access_token&gt;YWNjZXNzAGFsaWNlQHdvbmRlcmxhbmQuY29tL01pY2hhbC1QaW90cm93c2tpcy1NYWNCb29rLVBybwA2MzYyMTg4Mzc2NAA4M2QwNzNiZjBkOGJlYzVjZmNkODgyY2ZlMzkyZWM5NGIzZjA4ODNlNDI4ZjQzYjc5MGYxOWViM2I2ZWJlNDc0ODc3MDkxZTIyN2RhOGMwYTk2ZTc5ODBhNjM5NjE1Zjk=&lt;/access_token&gt;\n    &lt;refresh_token&gt;cmVmcmVzaABhbGljZUB3b25kZXJsYW5kLmNvbS9NaWNoYWwtUGlvdHJvd3NraXMtTWFjQm9vay1Qcm8ANjM2MjMwMDYxODQAMQAwZGQxOGJjODhkMGQ0N2MzNTBkYzAwYjcxZjMyZDVmOWIwOTljMmI1ODU5MmNhN2QxZGFmNWFkNGM0NDQ2ZGU2MWYxYzdhNTJjNDUyMGI5YmIxNGIxNTMwMTE4YTM1NTc=&lt;/refresh_token&gt;\n  &lt;/items&gt;\n&lt;/iq&gt;\n</code></pre>"},{"location":"open-extensions/token-reconnection/#authentication-with-an-access-token","title":"Authentication with an access token","text":"<p>Client authenticates with an access token</p> <p><pre><code>&lt;auth xmlns=\"urn:ietf:params:xml:ns:xmpp-sasl\" mechanism=\"X-OAUTH\"&gt;\nYWNjZXNzAGFsaWNlQHdvbmRlcmxhbmQuY29tL01pY2hhbC1QaW90cm93c2tpcy1NYWNCb29rLVBybwA2MzYyMTg4Mzc2NAA4M2QwNzNiZjBkOGJlYzVjZmNkODgyY2ZlMzkyZWM5NGIzZjA4ODNlNDI4ZjQzYjc5MGYxOWViM2I2ZWJlNDc0ODc3MDkxZTIyN2RhOGMwYTk2ZTc5ODBhNjM5NjE1Zjk=\n&lt;/auth&gt;\n</code></pre> Server responds with a success</p> <pre><code>&lt;success xmlns=\"urn:ietf:params:xml:ns:xmpp-sasl\"/&gt;\n</code></pre>"},{"location":"open-extensions/token-reconnection/#authentication-with-a-refresh-token","title":"Authentication with a refresh token","text":"<p>In this situation server will respond with a new refresh token which SHOULD be used in future authentication.</p> <p>Client authenticates with a refresh token</p> <pre><code>&lt;auth xmlns=\"urn:ietf:params:xml:ns:xmpp-sasl\" mechanism=\"X-OAUTH\"&gt;\ncmVmcmVzaABhbGljZUB3b25kZXJsYW5kLmNvbS9NaWNoYWwtUGlvdHJvd3NraXMtTWFjQm9vay1Qcm8ANjM2MjMwMDYxODQAMQAwZGQxOGJjODhkMGQ0N2MzNTBkYzAwYjcxZjMyZDVmOWIwOTljMmI1ODU5MmNhN2QxZGFmNWFkNGM0NDQ2ZGU2MWYxYzdhNTJjNDUyMGI5YmIxNGIxNTMwMTE4YTM1NTc=\n&lt;/auth&gt;\n</code></pre> <p>Server responds with a success and a new refresh token</p> <pre><code>&lt;success xmlns=\"urn:ietf:params:xml:ns:xmpp-sasl\"&gt;\ncmVmcmVzaABhbGljZUB3b25kZXJsYW5kLmNvbS9NaWNoYWwtUGlvdHJvd3NraXMtTWFjQm9vay1Qcm8ANjM2MjMwMDYxODQAMgAwZGQxOGJjODhkMGQ0N2MzNTBkYzAwYjcxZjMyZDVmOWIwOTljMmI1ODU5MmNhN2QxZGFmNWFkNGM0NDQ2ZGU2MWYxYzdhNTJjNDUyMGI5YmIxNGIxNTMwMTE4YTM1NTc=\n&lt;/success&gt;\n</code></pre>"},{"location":"open-extensions/token-reconnection/#token-format","title":"Token format","text":"<p>All tokens are exchanged as Base64 encoded binary data.  Serialization format of the token before encoding with Base64 is dependent on its type.  Common parts in every token are <code>BARE_JID</code> and <code>EXPIRES_AT</code>. <code>EXPIRES_AT</code> is a timestamp saying when a given token will expire. <code>\\0</code> stands for the ASCII null character (i.e. byte 0). Text in single quotes ('example') is literal.  <code>ALL_CAPS</code> denote parameters.</p>"},{"location":"open-extensions/token-reconnection/#access-token-format","title":"Access token format","text":"<pre><code>BASE64_encode\n        ('access', \\0, BARE_JID, \\0, EXPIRES_AT, \\0, DATA)\n</code></pre> <p>Example (please note the line break was added only for readability):</p> <pre><code>'access' \\0 Q8@wonderland.com \\0 64875466454\n    \\0 0acd0a66d06934791d046060cf9f1ad3c2abb3274cc7e7d7b2bc7e2ac4453ed774b6c6813b40ebec2bbc3774d59d4087\n</code></pre>"},{"location":"open-extensions/token-reconnection/#refresh-token-format","title":"Refresh token format","text":"<pre><code>BASE64_encode\n        ('refresh', \\0, BARE_JID, \\0, EXPIRES_AT, \\0, SEQUENCE_NO, \\0, DATA)\n</code></pre> <p>Example (please note the line break was added only for readability):</p> <pre><code>'refresh' \\0 qp@wonderland.com \\0 64875466457 \\0 6\n    \\0 8f57cb019cd6dc6e7779be165b9558611baf71ee4a40d03e77b78b069f482f96c9d23b1ac1ef69f64c1a1db3d36a96ad\n</code></pre>"},{"location":"operation-and-maintenance/Cluster-configuration-and-node-management/","title":"Cluster configuration and node management","text":""},{"location":"operation-and-maintenance/Cluster-configuration-and-node-management/#environment-configuration","title":"Environment configuration","text":""},{"location":"operation-and-maintenance/Cluster-configuration-and-node-management/#file-descriptors","title":"File descriptors","text":"<p>To handle large traffic, some of the system variables need to be tuned. Number one on that list is the maximum number of file descriptors which often is set to 1024. Each MongooseIM connection consumes ~1 file descriptor, so the default value will not suffice for larger installations - when it is exceeded, emfile errors will appear in logs.</p> <p>To check the current limit execute: <code>ulimit -n</code>.</p> <p>To list all limits execute: <code>ulimit -a</code>.</p> <p>In the example below we set limits for a <code>mongooseim</code> user. To increase the limit the following entries should be added in <code>/etc/security/limits.conf</code>:</p> <pre><code>mongooseim   soft   nofile   1000000\nmongooseim   hard   nofile   1000000\n</code></pre> <p>If you are using Ubuntu, all <code>/etc/pam.d/common-session*</code> files should include <code>session required pam_limits.so</code>.</p>"},{"location":"operation-and-maintenance/Cluster-configuration-and-node-management/#vmargs-file","title":"<code>vm.args</code> file","text":"<p>This file contains Erlang options used when starting the VM. It is located in <code>REL_ROOT/etc/vm.args</code> where <code>REL_ROOT</code> is the path to a MongooseIM release (ie. <code>_build/prod/rel/mongooseim</code> if you build MongooseIM from source).</p> <p>When using an SSL/TLS connection we advise to increase <code>ERL_MAX_PORTS</code> to <code>350000</code>. This value specifies how many ports (files, drivers, sockets etc) can be used by the Erlang VM. Be cautious - it preallocates some structures inside the VM and will have impact on the memory usage. We suggest 350000 for 100\u00a0k users when using an SSL/TLS connection or 250000 in other cases.</p> <p>To check how memory consumption changes depending on <code>ERL_MAX_PORTS</code>, use the following command:</p> <pre><code>env ERL_MAX_PORTS=[given value] erl -noinput -eval 'io:format(\"~p~n\",[erlang:memory(system)]).' -s erlang halt\n</code></pre> <p>Another change you need to make when building a MongooseIM cluster is setting the <code>-sname</code>. To do it, just set the <code>-sname</code> option in <code>vm.args</code> with node's hostname, which must be resolvable on other nodes in the cluster.</p>"},{"location":"operation-and-maintenance/Cluster-configuration-and-node-management/#port-range","title":"Port range","text":"<p>To connect to other nodes, a freshly started node uses a port from the range <code>inet_dist_listen_min</code> to <code>inet_dist_listen_max</code>.</p> <p>To enable this, add the following line to the <code>vm.args</code> file:</p> <pre><code>-kernel inet_dist_listen_min 50000 inet_dist_listen_max 50010\n</code></pre> <p>Make sure that the range you set provides enough ports for all the nodes in the cluster.</p> <p>Remember to keep an epmd port open (port 4369) if any firewall restrictions are required. Epmd keeps track of which Erlang node is using which ports on the local machine.</p>"},{"location":"operation-and-maintenance/Cluster-configuration-and-node-management/#connecting-nodes","title":"Connecting nodes","text":"<p>Checklist:</p> <ul> <li>working directory <code>rel/mongooseim</code> (root of a MongooseIM release or installation)</li> <li>the same cookie across all nodes (<code>vm.args</code> <code>-setcookie</code> parameter)</li> <li>each node should be able to ping other nodes using its sname    (ex. <code>net_adm:ping('mongoose@localhost')</code>)</li> <li>RDBMS backend is configured, so CETS could discover nodes</li> </ul>"},{"location":"operation-and-maintenance/Cluster-configuration-and-node-management/#initial-node","title":"Initial node","text":"CETSMnesia <p>Clustering is automatic. There is no difference between nodes.</p> <p>There is no action required on the initial node.</p> <p>Just start MongooseIM using <code>mongooseim start</code> or <code>mongooseim live</code>.</p>"},{"location":"operation-and-maintenance/Cluster-configuration-and-node-management/#new-node-joining-cluster","title":"New node - joining cluster","text":"CETSMnesia <p>Clustering is automatic.</p> <pre><code>mongooseimctl start\nmongooseimctl started #waits until MongooseIM starts\nmongooseimctl join_cluster ClusterMember\n</code></pre> <p><code>ClusterMember</code> is the name of a running node set in <code>vm.args</code> file, for example <code>mongooseim@localhost</code>. This node has to be part of the cluster we'd like to join.</p> <p>First, MongooseIM will display a warning and a question if the operation should proceed:</p> <pre><code>Warning. This will drop all current connections and will discard all persistent data from Mnesia. Do you want to continue? (yes/no)\n</code></pre> <p>If you type <code>yes</code> MongooseIM will start joining the cluster. Successful output may look like the following:</p> <pre><code>You have successfully joined the node mongooseim2@localhost to the cluster with node member mongooseim@localhost\n</code></pre> <p>In order to skip the question you can add option <code>-f</code> which will perform the action without displaying the warning and waiting for the confirmation.</p>"},{"location":"operation-and-maintenance/Cluster-configuration-and-node-management/#leaving-cluster","title":"Leaving cluster","text":"CETSMnesia <p>Stopping the node is enough to leave the cluster. If you want to avoid the node joining the cluster again, you have to specify a different <code>cluster_name</code> option in the CETS backend configuration. A different Erlang cookie is a good idea too.</p> <p>To leave a running node from the cluster, call:</p> <pre><code>mongooseimctl leave_cluster\n</code></pre> <p>It only makes sense to use it if the node is part of a cluster, e.g <code>join_cluster</code> was called on that node before.</p> <p>Similarly to <code>join_cluster</code> a warning and a question will be displayed unless the option <code>-f</code> is added to the command.</p> <p>The successful output from the above command may look like the following:</p> <pre><code>The node mongooseim2@localhost has successfully left the cluster\n</code></pre>"},{"location":"operation-and-maintenance/Cluster-configuration-and-node-management/#removing-a-node-from-the-cluster","title":"Removing a node from the cluster","text":"CETSMnesia <p>A stopped node would be automatically removed from the node discovery table in RDBMS database after some time. It is needed so other nodes would not try to connect to the stopped node.</p> <p>To remove another node from the cluster, call the following command from one of the cluster members:</p> <pre><code>mongooseimctl remove_from_cluster RemoteNodeName\n</code></pre> <p>where <code>RemoteNodeName</code> is the name of the node that we'd like to remove from our cluster. This command could be useful when the node is dead and not responding and we'd like to remove it remotely. The successful output from the above command may look like the following:</p> <pre><code>The node mongooseim2@localhost has been removed from the cluster\n</code></pre>"},{"location":"operation-and-maintenance/Cluster-configuration-and-node-management/#cluster-status","title":"Cluster status","text":"CETSMnesia <p>Run the command:</p> <pre><code>mongooseimctl cets systemInfo\n</code></pre> <p><code>joinedNodes</code> should contain a list of properly joined nodes:</p> <pre><code>\"joinedNodes\" : [\n  \"mongooseim@node1\",\n  \"mongooseim@node2\"\n]\n</code></pre> <p>It should generally be equal to the list of <code>discoveredNodes</code>.</p> <p>If it is not equal, you could have some configuration or networking issues. You can check the <code>unavailableNodes</code>, <code>remoteNodesWithUnknownTables</code>, and <code>remoteNodesWithMissingTables</code> lists for more information (generally, these lists should be empty). You can read the description for other fields of <code>systemInfo</code> in the GraphQL API reference.</p> <p>For a properly configured 2 nodes cluster the metrics would show something like that:</p> <pre><code>mongooseimctl metric getMetrics --name '[\"global\", \"cets\", \"system\"]'\n{\n  \"data\" : {\n    \"metric\" : {\n      \"getMetrics\" : [\n        {\n          \"unavailable_nodes\" : 0,\n          \"type\" : \"cets_system\",\n          \"remote_unknown_tables\" : 0,\n          \"remote_nodes_without_disco\" : 0,\n          \"remote_nodes_with_unknown_tables\" : 0,\n          \"remote_nodes_with_missing_tables\" : 0,\n          \"remote_missing_tables\" : 0,\n          \"name\" : [\n            \"global\",\n            \"cets\",\n            \"system\"\n          ],\n          \"joined_nodes\" : 2,\n          \"discovery_works\" : 1,\n          \"discovered_nodes\" : 2,\n          \"conflict_tables\" : 0,\n          \"conflict_nodes\" : 0,\n          \"available_nodes\" : 2\n        }\n      ]\n    }\n  }\n}\n</code></pre> <p>You can use the following commands on any of the running nodes to examine the cluster or to see if a newly added node is properly clustered:</p> <pre><code>mongooseimctl mnesia info | grep \"running db nodes\"\n</code></pre> <p>This command shows all running nodes. A healthy cluster should contain all nodes here. For example: <pre><code>running db nodes = [mongooseim@node1, mongooseim@node2]\n</code></pre> To see stopped or misbehaving nodes the following command can be useful:</p> <pre><code>mongooseimctl mnesia info | grep \"stopped db nodes\"\n</code></pre> <p>This command shows which nodes are considered stopped. This does not necessarily indicate that they are down but might be a symptom of a communication problem.</p>"},{"location":"operation-and-maintenance/Cluster-configuration-and-node-management/#load-balancing","title":"Load Balancing","text":""},{"location":"operation-and-maintenance/Cluster-configuration-and-node-management/#elastic-load-balancer-elb","title":"Elastic Load Balancer (ELB)","text":"<p>When using ELB please be advised that some warm-up time may be needed before the load balancer works efficiently for a big load.</p>"},{"location":"operation-and-maintenance/Cluster-configuration-and-node-management/#software-load-balancer","title":"Software load balancer","text":"<p>A good example of load balancing on the application layer are HAProxy and Nginx.</p>"},{"location":"operation-and-maintenance/Cluster-configuration-and-node-management/#dns-based-load-balancing","title":"DNS-based load balancing","text":"<p>Load balancing can be performed on a DNS level. A DNS response can have a number of IP addresses that can be returned to the client side in a random order.</p> <p>On the AWS stack this type of balancing is provided by Route53. The description of their service can be found in the Route53 Developer's Guide.</p>"},{"location":"operation-and-maintenance/Cluster-configuration-and-node-management/#other","title":"Other","text":"<p>The approaches described above can be mixed - we can use DNS load balancing to pick a software load balancer which will select one of the nodes.</p>"},{"location":"operation-and-maintenance/Cluster-management-considerations/","title":"Cluster management considerations","text":"<p>These apply to bare metal, virtualization, hypervisor, containers and other technologies.</p>"},{"location":"operation-and-maintenance/Cluster-management-considerations/#single-node-mongooseim","title":"Single-node MongooseIM","text":"<p>With a single-node MongooseIM, one can set up a vertically scalable system, that is a function of the server resources. MongooseIM can scale from hundreds to tens of thousands of concurrent users.</p> <p>Note that in a single-node MongooseIM, there is no load distribution, and no fallback or failover in case of a failure.</p> <p>This architecture is suitable for low-scale deployments, such as testing and development environments on embedded devices, personal computers, or servers.</p>"},{"location":"operation-and-maintenance/Cluster-management-considerations/#dual-node-mongooseim","title":"Dual-node MongooseIM","text":"<p>With a dual-node MongooseIM, one can set up a vertically scalable system, that is a function of the servers' resources. We recommend that servers with the same power are used. Both nodes can handle different sets of services, given that these non-MongooseIM services consume roughly the same resources on both servers. In this setup, MongooseIM can scale up to hundred of thousands of concurrent users.</p> <p>In a dual-node MongooseIM, there is a 50-50 load distribution - there is a possible fallback or failover in case of a node failure. Please keep in mind that to avoid degrading the service the remaining node should be able to handle the full load when necessary.</p> <p>This setup is applicable to low to mid-scale deployments used f.e. for functional and load testing. We recommend using real dedicated servers, although MongooseIM could run in a cluster mode with low-power machines, such as embedded devices.</p> <p>This setup provides better fault tolerance and robustness than the single-node but it's not recommended for production environments. The minimum recommended production setup is 3 nodes.</p>"},{"location":"operation-and-maintenance/Cluster-management-considerations/#multi-node-mongooseim","title":"Multi-node MongooseIM","text":"<p>With a multi-node MongooseIM, one can set up a system that is highly scalable both vertically and horizontally and that is still a function of the servers' resources. We recommend that servers with the same power are used. We also recommend that all the nodes handle the same set of services. In this setup, MongooseIM can scale up to tens of millions of concurrent users.</p> <p>In a multi-node MongooseIM, with <code>n</code> nodes, there is a <code>1/n</code> load distribution - there is a possible fallback or failover in case of a node failure. To avoid degrading the service the remaining nodes should be able to handle  <code>1/(n-1)</code> load when necessary.</p> <p>This setup fits mid and large-scale deployments, such as production environments. We recommend using real dedicated, powerful servers.</p>"},{"location":"operation-and-maintenance/Cluster-management-considerations/#multi-datacenter-mongooseim","title":"Multi-datacenter MongooseIM","text":"<p>With a multi-datacenter MongooseIM, one can set up a system that is highly scalable both vertically and horizontally. The MongooseIM clusters are simply distributed across continents for local, low-lag client connections, and the clusters are interconnected via high-speed links. In this setup, MongooseIM can scale up to hundreds of millions of concurrent users.</p> <p>This applies to large and very large-scale deployments.</p> <p>We advise contacting us in case of such a big deployment.</p>"},{"location":"operation-and-maintenance/Cluster-management-considerations/#summary-table","title":"Summary table","text":"<p>Setup: reflects the number of nodes in your cluster.  Purpose: is the goal and use of this cluster.  Low-end: number of concurrent users on low-power machines, such as laptops, embedded devices, entry-level cloud or bare metal. High-end: number of concurrent users on powerful machines, with lots of memory, multi-core CPU, whether in cloud or bare metal.</p> Setup Purpose Low-end High-end Single-node Functional testing, development 100  to  10k 100k to 500k Dual-node Low-end system, load testing 1k to 100k 1M to   3M Multi-node High-end production system 10k to   1M 2M to  10M Multi-datacenter Very large scale production system 100k to  10M 10M to 100M"},{"location":"operation-and-maintenance/Cluster-management-considerations/#important-notes","title":"Important notes","text":"<p>Scalability highly depends on variables such as:</p> <ul> <li>machine's power, such as memory, CPU, I/O</li> <li>the type of concurrent users:<ul> <li>most iOS apps are not connected in the background, they use APNS to push info to the device</li> <li>web clients use websockets, with fallback on BOSH (HTTP long-polling)</li> <li>client-side and backend-side REST API</li> </ul> </li> <li>how much archiving is needed and the latency for storage and querying, which depends a lot on storage backend architecture</li> <li>message throughput:<ul> <li>one-to-one</li> <li>MUC</li> <li>MUC light</li> <li>PubSub</li> <li>Presences</li> <li>HTTP notifications (may include queuing systems such as RabbitMQ or Kafka)</li> </ul> </li> <li>latency of messaging, both real-time and archived messages</li> </ul>"},{"location":"operation-and-maintenance/Cluster-management-considerations/#os-configuration","title":"OS configuration","text":"<p>To achieve high scalability you have to adjust the configuration of your operating system.</p> <p>First, set some network related parameters - this is what we use for load testing:</p> Parameter Value net.ipv4.ip_local_port_range 1024 65535 net.ipv4.tcp_mem 16777216 16777216 16777216 net.ipv4.tcp_wmem 4096 87380 16777216 net.ipv4.tcp_rmem 4096 87380 16777216 <p>Then, you have to increase the number of file descriptors allowed for the user running your MongooseIM server process. In Linux, this is most commonly done in <code>/etc/security/limits.conf</code>. You should remember, though, that there is a limit to it \u2014 you can't increase it above an upper bound which is set by the <code>fs.file-max</code> kernel parameter. And there is a limit to a possible increase in <code>fs.file-max</code> as well \u2014 you can't increase it beyond 1048576, which is 2^20 and is set by another kernel parameter, <code>fs.nr_open</code>. Once you increase that one, you are good to go. </p>"},{"location":"operation-and-maintenance/Cluster-restart/","title":"Cluster restart","text":"<p>When you are using a MongooseIM cluster that is using Mnesia backend for any extensions, there could occur an issue related to the distributed Mnesia nodes.</p>"},{"location":"operation-and-maintenance/Cluster-restart/#how-to-restart-a-cluster","title":"How to restart a cluster:","text":"<p>Having Node A and Node B, the cluster restart procedure should occur in the following way:</p> <p></p> <p>Start the nodes in the opposite order to the one in which they were stopped. The first node you restart should be the last one to go down. For cluster with 3 nodes, after stopping the nodes <code>ABC</code>, they should be started in <code>CBA</code> order.</p>"},{"location":"operation-and-maintenance/Cluster-restart/#how-not-to-restart-a-cluster","title":"How NOT to restart a cluster:","text":"<p>Having Node A and Node B.</p> <p></p> <p>When the nodes are stopped in <code>AB</code> order, starting the node <code>A</code> first can result in issues related to the distributed Mnesia nodes and not bring up a node that is fully operational.</p> <p>Changing the order of the restarted nodes can cause issues with distributed Mnesia. Make sure to follow the recommendations if you are using Mnesia backend for any of the extensions. Please note that for some of the extensions, the Mnesia backend is set by default without having that configured explicitly in the configuration file.</p> <p>For more information related to the cluster configuration and maintenance, please see Cluster configuration and node management section.</p>"},{"location":"operation-and-maintenance/Humio/","title":"Humio and MongooseIM","text":""},{"location":"operation-and-maintenance/Humio/#getting-humios-ingest-token","title":"Getting Humio's ingest token","text":"<p>Visit this url to create a new sandbox's ingest token.</p> <p>The URL is:</p> <pre><code>https://cloud.humio.com/YOUR_REPOSITORY_NAME_HERE/settings/ingest-tokens\n</code></pre>"},{"location":"operation-and-maintenance/Humio/#configure-filebeat","title":"Configure Filebeat","text":"<p>Configure Filebeat, using this config file priv/filebeat.mongooseim.humio.yml.</p> <p>We recommend to use the Filebeat docker container. You have to use an open-source version of Filebeat, which has the <code>oss</code> suffix.</p> <p>This example mounts a log directory <code>$(pwd)/_build/mim1/rel/mongooseim/log</code> as a volume for Filebeat. It also mounts a configuration file <code>$(pwd)/priv/filebeat.mongooseim.humio.yml</code>. Most likely these paths would be different on your machine.</p> <p>Pass your Humio ingest token as a password argument. Or uncomment and change it inside the <code>filebeat.mongooseim.humio.yml</code> file.</p> <pre><code>docker run -d \\\n    --name mongooseim-filebeat \\\n    -v \"$(pwd)/_build/mim1/rel/mongooseim/log:/usr/lib/mongooseim/log\" \\\n    -v \"$(pwd)/priv/filebeat.mongooseim.humio.yml:/usr/share/filebeat/filebeat.yml:ro\" \\\n    docker.elastic.co/beats/filebeat-oss:7.9.2 \\\n    filebeat -e -E output.elasticsearch.password=\"abc12345-xxxx-yyyy-zzzz-123456789abc\"\n</code></pre> <p>Argument <code>-e</code> enables debugging information for Filebeat that can be visible using the <code>docker logs mongooseim-filebeat</code> command.</p>"},{"location":"operation-and-maintenance/Humio/#viewing-logs","title":"Viewing logs","text":"<p>Navigate to https://cloud.humio.com/sandbox/search to see the Sandbox's dashboard.</p> <p>A list of log messages:</p> <p></p> <p>Structured log message:</p> <p></p>"},{"location":"operation-and-maintenance/Logging-%26-monitoring/","title":"Logging & monitoring","text":""},{"location":"operation-and-maintenance/Logging-%26-monitoring/#logs","title":"Logs","text":"<p>We strongly recommend storing logs in one centralized place when working in a clustered environment. MongooseIM uses the standard OTP logging framework: Logger. Its handlers can be replaced and customised, according to Logger's documentation.</p>"},{"location":"operation-and-maintenance/Logging-%26-monitoring/#syslog-integration","title":"Syslog integration","text":"<p>MongooseIM uses <code>syslogger</code> as a Logger handler for syslog. To activate it you have to add <code>syslogger</code> to the applications section in <code>src/mongooseim/app.src</code>:</p> <pre><code>%% syslogger, % uncomment to enable a logger handler for syslog\n</code></pre> <p>You also need to edit <code>rel/files/app.config</code> and uncomment the lines:</p> <pre><code> % Uncomment these lines to enable logging to syslog.\n % Remember to add syslogger as a dependency in mongooseim.app.src.\n%% {syslogger, [\n%%     {ident, \"mongooseim\"},\n%%     {logger, [\n%%         {handler, sys_log, syslogger,\n%%          #{formatter =&gt; {logger_formatter, #{single_line =&gt; true}}}}]}]\n%% },\n</code></pre> <p>You can provide different parameters to change the handler's behaviour as described in the <code>syslogger's</code> GitHub page:</p> <ul> <li><code>ident</code> - a string to tag all the syslog messages with.  The default is <code>mongooseim</code>.</li> <li><code>facility</code> -  the facility to log to (see the syslog documentation).</li> <li><code>log_opts</code> - see the syslog documentation for the description.</li> </ul> <p>Depending on the system you use, remember to also add the appropriate line in the syslog config file. For example, if the facility <code>local0</code> is set:</p> <pre><code>local0.info                     /var/log/mongooseim.log\n</code></pre> <p>All the logs of level <code>info</code> should be passed to the <code>/var/log/mongooseim.log</code> file.</p> <p>Example log (e.g <code>tail -f /var/log/mongooseim.log</code>):</p> <pre><code>Apr  1 12:36:49 User.local mongooseim[6068]: [info] &lt;0.7.0&gt; Application mnesia started on node mongooseim@localhost\n</code></pre>"},{"location":"operation-and-maintenance/Logging-%26-monitoring/#further-multiserver-integration","title":"Further / multiserver integration","text":"<p>For more advanced processing and analysis of logs, including gathering logs from multiple machines, you can use one of the many available systems (e.g. logstash/elasticsearch/kibana, graylog, splunk), by redirecting mongoose logs to such service with an appropriate Logger's handler.</p> <p>Check Logging for more information.</p>"},{"location":"operation-and-maintenance/Logging-%26-monitoring/#monitoring","title":"Monitoring","text":""},{"location":"operation-and-maintenance/Logging-%26-monitoring/#wombatoam","title":"WombatOAM","text":"<p>WombatOAM is an operations and maintenance framework for Erlang based systems. Its Web Dashboard displays this data in an aggregated manner. Additionally, WombatOAM provides interfaces to feed the data to other OAM tools such as Graphite, Nagios or Zabbix.</p> <p>For more information see: WombatOAM.</p>"},{"location":"operation-and-maintenance/Logging-%26-monitoring/#graphite-collectd","title":"graphite-collectd","text":"<p>To monitor MongooseIM during load testing, we recommend the following open source applications:</p> <ul> <li>Grafana is used for data presentation.</li> <li>Graphite is a server used for metrics storage.</li> <li>collectd is a daemon running on the monitored nodes capturing data related to CPU and Memory usage, IO etc.</li> </ul>"},{"location":"operation-and-maintenance/Logging-%26-monitoring/#plug-in-exometer-reporters","title":"Plug-in Exometer reporters","text":"<p>MongooseIM uses a fork of Exometer library for collecting metrics. Exometer has many plug-in reporters that can send metrics to external services. We maintain exometer_report_graphite and exometer_report_statsd for Graphite and StatsD respectively. It is possible to enable them in MongooseIM via the <code>app.config</code> file. The file sits next to the <code>mongooseim.toml</code> file in the <code>rel/files</code> and <code>_REL_DIR_/etc</code> directories.</p> <p>Below you can find a sample configuration. It shows setting up a reporter connecting to graphite running on localhost.</p> <p>You can see an additional option not listed in the Exometer docs - <code>mongooseim_report_interval</code>, which sets the metrics' resolution, i.e. how often Exometer gathers and sends metrics through reporters. By default, the resolution is set to 60 seconds.</p> <pre><code>...\n{exometer_core, [\n    {mongooseim_report_interval, 60000}, %% 60 seconds\n    {report, [\n        {reporters, [\n                     {exometer_report_graphite, [\n                                                 {prefix, \"mongooseim\"},\n                                                 {connect_timeout, 5000},\n                                                 {host, \"127.0.0.1\"},\n                                                 {port, 2003},\n                                                 {api_key, \"\"}\n                                                ]}\n                    ]}\n    ]}\n  ]}\n...\n</code></pre>"},{"location":"operation-and-maintenance/Logging-%26-monitoring/#run-graphite-grafana-in-docker-quick-start","title":"Run Graphite &amp; Grafana in Docker - quick start","text":"<p>The following commands will download the latest version of <code>kamon/grafana_graphite</code> docker image that contains both Grafana and Graphite, and start them while mounting the local directory <code>./docker-grafana-graphite-master/data</code> for metric persistence:</p> <pre><code>curl -SL https://github.com/kamon-io/docker-grafana-graphite/archive/master.tar.gz | tar -xzf -\nmake -C docker-grafana-graphite-master up\n</code></pre> <p>Go to http://localhost:80 to view the Grafana dashboard that's already set up to use metrics from Graphite.</p>"},{"location":"operation-and-maintenance/Logging-%26-monitoring/#add-metrics-to-grafana-dashboard","title":"Add metrics to Grafana dashboard","text":"<p>We recommend the following metrics as a baseline for tracking your MongooseIM installation. For time-based metrics, you can choose to display multiple calculated values for a reporting period - we recommend tracking at least <code>max</code>, <code>median</code> and <code>mean</code>.</p> <pre><code>Session count:                   &lt;prefix&gt;.global.totalSessionCount.value\nXMPP messages received:          &lt;prefix&gt;.&lt;domain&gt;.xmppMessageReceived.one\nXMPP messages sent:              &lt;prefix&gt;.&lt;domain&gt;.xmppMessageSent.one\nSuccessful logins:               &lt;prefix&gt;.&lt;domain&gt;.sessionSuccessfulLogins.one\nLogouts:                         &lt;prefix&gt;.&lt;domain&gt;.sessionLogouts.one\nAuthorization time:              &lt;prefix&gt;.&lt;domain&gt;.backends.auth.authorize.&lt;value-type&gt;\nRDBMS \"simple\" query time:       &lt;prefix&gt;.&lt;domain&gt;.backends.mongoose_rdbms.query.&lt;value-type&gt;\nRDBMS prepared query time:       &lt;prefix&gt;.&lt;domain&gt;.backends.mongoose_rdbms.execute.&lt;value-type&gt;\nMAM lookups:                     &lt;prefix&gt;.&lt;domain&gt;.mam_lookup_messages.one\nMAM archivization time:          &lt;prefix&gt;.&lt;domain&gt;.backends.mod_mam_pm.archive.&lt;value-type&gt;\nMAM lookup time:                 &lt;prefix&gt;.&lt;domain&gt;.backends.mod_mam_pm.lookup.&lt;value-type&gt;\nMAM private messages flush time: &lt;prefix&gt;.&lt;domain&gt;.mod_mam_rdbms_async_pool_writer.flush_time.&lt;value-type&gt;\nMAM MUC messages flush time:     &lt;prefix&gt;.&lt;domain&gt;.mod_mam_muc_rdbms_async_pool_writer.flush_time.&lt;value-type&gt;\n</code></pre> <p>Note that RDBMS metrics are only relevant if MongooseIM is configured with an RDBMS backend, MAM metrics when mod_mam is enabled and MAM flush times when MAM is configured with an RDBMS backend with <code>async_writer</code> option (default).</p>"},{"location":"operation-and-maintenance/Logging-%26-monitoring/#example-graph-in-grafana","title":"Example graph in Grafana","text":"<p>This screenshot shows a graph plotting the RDBMS simple query time metric mentioned above. The graph is plotted for three nodes with each node having a different prefix: <code>mongoose.node1</code>, <code>mongoose.node2</code> and <code>mongoose.node3</code>.</p> <p>The queries take metrics for all nodes and all domains (<code>**</code> is a wildcard for multiple parts of the metric name) and group them per-node and per-value-type (respectively <code>1</code>st and <code>-1</code>st part of the metric's name). Parts of the names are indexed from <code>0</code>.</p> <p>Time-based metrics in MongooseIM are given in microseconds, so to display human-readable values in graph's legend, the Y-axis unit has to be edited on the <code>Axes</code> tab.</p>"},{"location":"operation-and-maintenance/Logging-fields/","title":"Fields","text":"<ul> <li><code>reason</code>, <code>class</code>, <code>stacktrace</code>: standard error catching fields.</li> <li><code>module</code>, <code>function</code>, <code>line</code>, <code>timestamp</code>, <code>node</code>, <code>when</code>, <code>pid</code>: reserved fields (could be used by logger itself).</li> <li>When logging IQs, adding the <code>acc</code> field should be enough. If <code>acc</code> not available, <code>iq</code> can be used.   If <code>iq</code> is not available, <code>sub_el</code> could be logged as a last option.</li> <li><code>what</code>: why we are logging. We often use the function name as the <code>what</code> field.<ul> <li>Suffixes: If something goes wrong, use a <code>_failed</code> suffix (instead of <code>unable_to</code> and <code>_error</code>).   The most common suffixes are <code>_starting</code>, <code>_started</code>, <code>_stopping</code>, <code>_stopped</code>, and <code>_result</code>.</li> <li>Prefixes: We sometimes add prefixes to <code>what</code> to signal where we are logging from.   Such prefixes should be short. Please, don't prefix with the complete module name.   Some examples for prefixes are: <code>mam_</code>, <code>sm_</code>, <code>muc_</code>, <code>auth_</code>, <code>s2s_</code>, <code>pool_</code>.</li> </ul> </li> </ul> <p>When checking the final event name, remove duplicates from it.</p> Bad event names Good event names Why <code>s2s_dns_error</code> <code>s2s_dns_lookup_failed</code> Not <code>_failed</code> prefix <code>s2s_dns_error</code> <code>s2s_dns_lookup_timeout</code> More specific failure reason <code>mod_mam_starting</code> <code>mam_starting</code> Use <code>mam_</code> prefix for MAM modules <code>mongoose_wpool_mgr_pool_starting</code> <code>pool_starting</code> Too long and repetitive"},{"location":"operation-and-maintenance/Logging-fields/#logger-defaults","title":"Logger defaults","text":"<p>Timestamp should be ordered first when possible, so that sorting is automatic.</p> Name Type Description Examples timestamp atom The timestamp (with timezone information) 2018-07-11T13:41:10+00:00 at string Where in code the call or log line was emitted module:function:line level enum log level according to RFC 5424 warning"},{"location":"operation-and-maintenance/Logging-fields/#generally-required","title":"Generally required","text":"Name Type Description Examples Notes what atom Event (or issue) name remove_user_failed text binary Human readable description <code>&lt;&lt;\"MAM failed to contact MySQL\"&gt;&gt;</code> result binary Explanation of the <code>what</code> key <code>failed</code> Optional tags [atom] The subcomponent taking action and logging data. [c2s, presence], [mam, rdbms] This category should be chosen based on filtering needs, and may represent the domain of concern for some operations"},{"location":"operation-and-maintenance/Logging-fields/#http-requests","title":"HTTP requests","text":"Name Type Description Examples Notes path binary HTTP path <code>&lt;&lt;\"/api/add_user\"&gt;&gt;</code> code integer HTTP code 200 ip tuple IP address inet:ip_address() port integer TCP/UDP port number 5222 peer tuple <code>peer() :: {inet:ip_address(), inet:port_number()}</code> <code>{{127,0,0,1},5222}</code> req map Cowboy request Provide when available reply_body binary Body reply &lt;&lt;\"ok\"&gt;&gt;"},{"location":"operation-and-maintenance/Logging-fields/#xmpp","title":"XMPP","text":"Name Type Description Examples Notes acc map mongoose_acc, used to extract fields <code>#{...}</code> user binary Local Username <code>&lt;&lt;\"alice\"&gt;&gt;</code> Use <code>#jid.luser</code> when available server binary Local Server (host) name <code>&lt;&lt;\"localhost\"&gt;&gt;</code> Use <code>#jid.lserver</code> when available sub_host binary Subhost when MUC or pubsub are used <code>&lt;&lt;\"muc.localhost\"&gt;&gt;</code> It's not the same as <code>server</code> remote_user binary Remote Username (usually who makes IQ requests) <code>&lt;&lt;\"alice\"&gt;&gt;</code> Use <code>#jid.luser</code> when available remote_server binary Remote Server (usually who makes IQ requests) <code>&lt;&lt;\"otherhost\"&gt;&gt;</code> Use <code>#jid.lserver</code> when available iq record MongooseIM IQ record <code>#iq{}</code> Provide when available (but it could be acc instead) sub_el record IQ sub element <code>#xmlel{}</code> Provide ONLY if <code>iq</code> not available c2s_state record C2S process state, that would be used by formatter <code>#state{}</code> from_jid binary Accumulator's from_jid <code>&lt;&lt;\"alice@localhost\"&gt;&gt;</code> to_jid binary Accumulator's to_jid <code>&lt;&lt;\"to@localhost\"&gt;&gt;</code> packet binary Accumulator's element <code>&lt;&lt;\"&lt;message&gt;...\"&gt;&gt;</code> Encoded as XML, not erlang records exml_packet record Same as packet, but in <code>#xmlel{}</code> format <code>#xmlel{}</code> Record, formatted in formatter"},{"location":"operation-and-maintenance/Logging-fields/#other-requests","title":"Other requests","text":"Name Type Description Examples Notes duration integer Duration of some operation in milliseconds 5000 Don't use it for microseconds state_name atom State name in <code>gen_fsm</code> <code>wait_for_stream</code> state term <code>gen_server</code> state <code>#state{}</code> Consider adding a formatter call_from tuple From argument in gen_server's handle_call <code>{Pid, Tag}</code>"},{"location":"operation-and-maintenance/Logging-fields/#when-logging-exceptions","title":"When logging exceptions","text":"<p><code>what</code> key should contain en <code>_exception</code> suffix. Following keys should be present:</p> Name Type Description Examples Notes class enum <code>catch Class:Reason:Stacktrace</code> <code>error</code> reason term <code>catch Class:Reason:Stacktrace</code> <code>http_timeout</code> stacktrace term <code>catch Class:Reason:Stacktrace</code> <code>[...]</code> Formatted by formatter"},{"location":"operation-and-maintenance/Logging-fields/#macros-for-logging-unexpected-requests","title":"Macros for logging unexpected requests","text":"<p><code>gen_server</code> processes sometimes receive messages they couldn't process. We use macros to log such events (just because you would need them in each <code>gen_server</code> module).</p> <p>We don't need to log state or state names for such events.</p> <pre><code>%% We don't always handle unexpected calls.\nhandle_call(Request, From, State) -&gt;\n    ?UNEXPECTED_CALL(Request, From),\n    {reply, {error, unexpected_call}, State}.\n\n%% We don't always handle unexpected casts.\nhandle_cast(Msg, State) -&gt;\n    ?UNEXPECTED_CAST(Msg),\n    {noreply, State}.\n\n%% We SHOULD ignore all unexpected messages, because they could arrive in case\n%% of gen_server call timeouts.\nhandle_info(Msg, State) -&gt;\n    ?UNEXPECTED_INFO(Msg),\n    {noreply, State}.\n</code></pre> <p>These macros translate into warning logs with the following keys, respectively:</p> <pre><code>#{what =&gt; unexpected_cast, msg =&gt; Msg}.\n#{what =&gt; unexpected_info, msg =&gt; Msg}.\n#{what =&gt; unexpected_call, msg =&gt; Msg, call_from =&gt; From}.\n</code></pre>"},{"location":"operation-and-maintenance/Logging/","title":"Configuring logging","text":"<p>The main configuration for logging is in the Application Config file. You can find it in <code>mongooseim/etc/app.config</code> in the release directory.</p>"},{"location":"operation-and-maintenance/Logging/#primary-log-level","title":"Primary log level","text":"<p>Primary log level sets maximum log level in the system. This check is applied for any event in the system before the event is passed to any handler.</p> <p>Primary log level, that is used before MongooseIM config is loaded:</p> <pre><code>[\n    {kernel, [\n         {logger_level, notice}\n    ]}\n].\n</code></pre> <p>Once MongooseIM config is loaded, the <code>loglevel</code> option from <code>mongooseim.toml</code> is used instead.</p>"},{"location":"operation-and-maintenance/Logging/#primary-filters","title":"Primary filters","text":"<p>Functions from the filters section are applied for any message once it passes the primary log level check.</p> <p>Keep that configuration block as it is, unless you are planning to extend the filtering logic.</p> <pre><code>[{kernel, [\n  {logger, [\n    %% Default filters applied to all events before passing them to handlers:\n    {filters, log, [\n           %% If we want to see complete accumulator in logs\n        %  {preserve_acc_filter, {fun mongoose_log_filter:preserve_acc_filter/2, no_state}},\n           {format_packet_filter, {fun mongoose_log_filter:format_packet_filter/2, no_state}},\n           {format_acc_filter, {fun mongoose_log_filter:format_acc_filter/2, no_state}},\n           {format_c2s_state_filter, {fun mongoose_log_filter:format_c2s_state_filter/2, no_state}},\n           {format_stacktrace_filter, {fun mongoose_log_filter:format_stacktrace_filter/2, no_state}}\n        ]},\n....\n}}].\n</code></pre> <p><code>preserve_acc_filter</code> filter is disabled by default, but could be enabled, if you are interested in debugging the accumulator logic (see the <code>mongoose_acc</code> module).</p>"},{"location":"operation-and-maintenance/Logging/#shell-log-handler","title":"Shell log handler","text":"<ul> <li>Controls what MongooseIM prints to the standard output.</li> <li>Erlang OTP docs for logger_std_h</li> </ul> <pre><code>    {handler, shell_log, logger_std_h, #{\n         %% Default log level for handlers is to log everything, that\n         %% passes primary log level and module log levels\n         level =&gt; all,\n         formatter =&gt; {mongoose_flatlog_formatter, #{\n           map_depth =&gt; 3,\n           term_depth =&gt; 50\n         }}\n    }},\n</code></pre>"},{"location":"operation-and-maintenance/Logging/#file-log-handler","title":"File log handler","text":"<ul> <li>Controls what and how MongooseIM prints into files.</li> <li>Erlang OTP docs for logger_disk_log_h</li> <li>You can have several file handlers.</li> <li>File handlers should have different handler IDs (i.e. <code>disk_log</code>, <code>disk_json_log</code>)</li> <li>There are two file log handlers defined by default: one that formats in JSON   and one that formats in Logfmt format (<code>key=value</code> pairs).</li> <li>Both JSON and Logfmt handlers are enabled by default.   We recommend to disable handlers, that you are not using.   This could improve performance greatly.   To disable them, just remove them from <code>app.config</code>.</li> <li>Check information below about log formatters.</li> </ul> <pre><code>    {handler, disk_log, logger_disk_log_h, #{\n         level =&gt; all,\n         config =&gt; #{\n           file =&gt; \"{{mongooseim_log_dir}}/mongooseim.log\",\n           type =&gt; wrap,\n           max_no_files =&gt; 5,\n           max_no_bytes =&gt; 2097152,\n           sync_mode_qlen =&gt; 2000, % If sync_mode_qlen is set to the same value as drop_mode_qlen,\n           drop_mode_qlen =&gt; 2000, % synchronous mode is disabled. That is, the handler always runs\n           flush_qlen =&gt; 5000,     % in asynchronous mode, unless dropping or flushing is invoked.\n           overload_kill_enable =&gt; true\n           % Documentation about Overload protection, together with default values, can be found here:\n           % http://erlang.org/doc/apps/kernel/logger_chapter.html#protecting-the-handler-from-overload\n         },\n         formatter =&gt; ...\n    }},\n</code></pre>"},{"location":"operation-and-maintenance/Logging/#logfmt-file-log-handler","title":"Logfmt file log handler","text":"<p>Wrapper around the flatlog library with custom template options configured by default.</p> <p>Options:</p> <ul> <li><code>map_depth</code> - the maximum depth to format maps. <code>map_depth =&gt; 3</code> means that the    map <code>#{one =&gt; #{two =&gt; #{three =&gt; #{four =&gt; key}}}}</code> would be printed as   <code>one_two_three_four=...</code>. While the map <code>#{one =&gt; #{two =&gt; #{three =&gt; key}}}</code>   would be still printed as <code>one_two_three=key</code>.</li> <li><code>term_depth</code> - the maximum depth to which terms are printed.    Anything below this depth is replaced with <code>...</code>.    <code>unlimited</code> by default.</li> </ul> <pre><code>formatter =&gt; {mongoose_flatlog_formatter, #{\n  map_depth =&gt; 3,\n  term_depth =&gt; 50\n}}\n</code></pre>"},{"location":"operation-and-maintenance/Logging/#json-file-log-handler","title":"JSON file log handler","text":"<p>JSON formatted file. It could be used to store messages in ELK, in Humio or in Splunk.</p> <p>Check this tutorial to configure MongooseIM with Humio. Check below information to configure MongooseIM with ELK.</p> <p>You can use Filebeat to send messages from the file into ELK.</p> <p>Options:</p> <ul> <li><code>format_depth</code> - the maximum depth to which terms are printed.    Anything below this depth is replaced with <code>...</code>.    <code>unlimited</code> by default.</li> <li><code>format_chars_limit</code> - A soft limit on the number of characters when printing    terms. When the number of characters is reached, remaining structures are    replaced by \"...\". <code>format_chars_limit</code> defaults to <code>unlimited</code>, which means    no limit on the number of characters returned.</li> <li><code>depth</code> - the maximum depth for json properties. Default is <code>unlimited</code>.    Options deeper than the depth are replaced with the <code>...</code> string.</li> </ul> <pre><code>formatter =&gt; {mongoose_json_formatter, #{\n  format_depth =&gt; 10,\n  format_chars_limit =&gt; 3000,\n  depth =&gt; 10\n}}\n</code></pre>"},{"location":"operation-and-maintenance/Logging/#different-log-level-for-a-specific-module","title":"Different log level for a specific module","text":"<p>Motivation:</p> <ul> <li>Sometimes we are interested in debug messages from a particular module.</li> <li>Useful to debug new or experimental modules.</li> </ul> <p>This example:</p> <ul> <li>Changes log level for one particular module.</li> <li>Forwards the log messages to any enabled handler.</li> </ul> <p>Changes:</p> <ul> <li>Enable module log level for <code>mongoose_c2s</code>.</li> </ul> <pre><code>%% Module log level\n{module_level, debug, [mongoose_c2s]},\n</code></pre>"},{"location":"operation-and-maintenance/Logging/#separate-log-for-module-debugging","title":"Separate log for module debugging","text":"<p>Motivation:</p> <ul> <li>Sometimes we are only interested in log messages from one particular module.</li> <li>Useful for debugging and development.</li> <li>Does not affect overload protection in other handlers.</li> </ul> <p>This example:</p> <ul> <li>Forwards all logging from a module <code>mongoose_c2s</code> to a separate file.</li> <li>Keeps the other handlers intact.</li> </ul> <p>Changes:</p> <ul> <li>Modify any existing handler to explicitly set log level.</li> <li>Enable module log level for <code>mongoose_c2s</code>.</li> <li>Add a new custom handler into <code>kernel.logger</code> options.</li> </ul> <p>Issues:</p> <ul> <li>This would also disable module log level logic for other handlers.</li> </ul> <pre><code>%% Existing handlers\n{handler, shell_log, logger_std_h, #{\n     level =&gt; notice, %% was level =&gt; all\n     ...\n},\n{handler, disk_log, logger_disk_log_h, #{\n      level =&gt; notice,\n      ...\n},\n...\n%% Module log level\n{module_level, debug, [mongoose_c2s]},\n%% New handler\n{handler, disk_log_c2s, logger_disk_log_h, #{\n     level =&gt; debug,\n     config =&gt; #{\n       %% Choose destination:\n       file =&gt; \"{{mongooseim_log_dir}}/mongoose_c2s.log\",\n       %% Common options:\n       type =&gt; wrap,\n       max_no_files =&gt; 5,\n       max_no_bytes =&gt; 2097152,\n       sync_mode_qlen =&gt; 2000,\n       drop_mode_qlen =&gt; 2000,\n       flush_qlen =&gt; 5000,\n       overload_kill_enable =&gt; true\n     },\n     formatter =&gt; {mongoose_flatlog_formatter, #{\n       map_depth =&gt; 3,\n       term_depth =&gt; 50\n     }},\n     filters =&gt; [\n       %% That filter matches messages from mongoose_c2s module\n       {module_filter, {fun mongoose_log_filter:filter_module/2, [mongoose_c2s]}}\n     ]\n}}\n</code></pre>"},{"location":"operation-and-maintenance/Logging/#setting-up-kibana","title":"Setting up Kibana","text":"<p>This example sets up ElasticSearch and Kibana for development purposes.</p> <p>Create a network, so filebeat can find ELK:</p> <pre><code>docker network create logging\n</code></pre> <p>Run ELK (consult with the container docs for more options):</p> <pre><code>docker run -d -p 5601:5601 -p 9200:9200 -p 5044:5044 --network logging --name elk sebp/elk:oss-792\n</code></pre> <p>Create a volume for logs:</p> <pre><code>docker volume create mongooseim-logs\n</code></pre> <p>Run MongooseIM daemon:</p> <pre><code>docker run -d -t -h mongooseim -v mongooseim-logs:/usr/lib/mongooseim/log \\\n    --network logging --name mongooseim -p 5222:5222 mongooseim/mongooseim:latest\n</code></pre> <p>The next part is based on Filebeat's docs.</p> <p>Setup filebeat (should be called once, that creates indexes in Elasticsearch):</p> <pre><code>docker run --network logging --rm \\\n    docker.elastic.co/beats/filebeat-oss:7.9.2 \\\n    setup -E setup.kibana.host=elk:5601 \\\n          -E output.elasticsearch.hosts='[\"elk:9200\"]'\n</code></pre> <p>Create <code>filebeat.mongooseim.yml</code> config file:</p> <pre><code>filebeat.inputs:\n- paths:\n   - /usr/lib/mongooseim/log/mongooseim.json.1\n  input_type: log\n  json.keys_under_root: true\n  json.add_error_key: true\n  json.overwrite_keys: true\n\nprocessors:\n  # Keep the original \"when\" field too, because of microseconds precision\n  - timestamp:\n      field: when\n      layouts:\n        # Date '2006-01-02T15:04:05.999Z' in mongoose format\n        - '2006-01-02T15:04:05.999+00:00'\n      test:\n        - '2020-09-29T11:25:51.925316+00:00'\n</code></pre> <p>Create a volume for persistent Filebeat data (so, it would not insert log duplicates, if <code>mongooseim-filebeat</code> container is recreated):</p> <pre><code>docker volume create filebeat-data\n</code></pre> <p>Actually run the Filebeat daemon:</p> <pre><code>docker run -d \\\n    --network logging \\\n    --name mongooseim-filebeat \\\n    -v mongooseim-logs:/usr/lib/mongooseim/log \\\n    -v filebeat-data:/usr/share/filebeat/data \\\n    -v=\"$(pwd)/filebeat.mongooseim.yml:/usr/share/filebeat/filebeat.yml:ro\" \\\n    docker.elastic.co/beats/filebeat-oss:7.9.2 \\\n    filebeat -e -E output.elasticsearch.hosts='[\"elk:9200\"]'\n</code></pre> <p>In case you want to store and view logs from a dev server in Elasticsearch:</p> <pre><code>docker run -d \\\n    --network logging \\\n    --name mongooseim-filebeat \\\n    -v \"$(pwd)/_build/mim1/rel/mongooseim/log:/usr/lib/mongooseim/log\" \\\n    -v=\"$(pwd)/priv/filebeat.mongooseim.yml:/usr/share/filebeat/filebeat.yml:ro\" \\\n    docker.elastic.co/beats/filebeat-oss:7.9.2 \\\n    filebeat -e -E output.elasticsearch.hosts='[\"elk:9200\"]'\n</code></pre>"},{"location":"operation-and-maintenance/MongooseIM-metrics/","title":"MongooseIM metrics","text":"<p>MongooseIM by default collects many metrics showing the user behaviour and general system statistics. They are managed by exometer. MongooseIM uses ESL's fork of this project.</p> <p>All metrics are divided into the following groups:</p> <ul> <li> <p>Per host type metrics: Gathered separately for every host type supported by the cluster.</p> <p>Warning</p> <p>If a cluster supports many (thousands or more) host types, performance issues might occur. To avoid this, use global equivalents of the metrics with <code>all_metrics_are_global</code> config option.</p> <ul> <li>Hook metrics. They are created for every hook and incremented on every call to it.</li> </ul> </li> <li> <p>Global metrics: Metrics common for all host types.</p> <ul> <li>Data metrics. These are misc. metrics related to data transfers (e.g. sent and received stanza size statistics).</li> <li>VM metrics. Basic Erlang VM statistics.</li> </ul> </li> <li>Backend metrics: Histograms with timings of calls to various backends.</li> </ul>"},{"location":"operation-and-maintenance/MongooseIM-metrics/#metrics-types","title":"Metrics types","text":""},{"location":"operation-and-maintenance/MongooseIM-metrics/#spiral","title":"<code>spiral</code>","text":"<p>This kind of metric provides 2 values: <code>total</code> event count (e.g. stanzas processed) and a value in 60s window (<code>one</code> value). Dividing <code>one</code> value by 60 provides an average per-second value over last minute.</p> <p>Example: <code>[{total, 1000}, {one, 20}]</code></p>"},{"location":"operation-and-maintenance/MongooseIM-metrics/#value","title":"<code>value</code>","text":"<p>A simple value. It is actually a one-element proplist: <code>[{value, N}]</code>.</p> <p>Example: <code>[{value, 256}]</code></p>"},{"location":"operation-and-maintenance/MongooseIM-metrics/#gauge","title":"<code>gauge</code>","text":"<p>It is similar to a <code>value</code> type but consists of two properties:</p> <ul> <li><code>value</code></li> <li><code>ms_since_reset</code> - Time in milliseconds elapsed from the last metric update.</li> </ul> <p>Example: <code>[{value, 12}, {ms_since_reset, 91761}]</code></p>"},{"location":"operation-and-maintenance/MongooseIM-metrics/#proplist","title":"<code>proplist</code>","text":"<p>A metric which is a nonstandard proplist. You can find the lists of keys in metrics descriptions.</p> <p>Example: <code>[{total,295941736}, {processes_used,263766824}, {atom_used,640435}, {binary,1513152}, {ets,3942592}, {system,32182072}]</code></p>"},{"location":"operation-and-maintenance/MongooseIM-metrics/#histogram","title":"<code>histogram</code>","text":"<p>A histogram collects values over a sliding window of 60s and exposes the following stats:</p> <ul> <li><code>n</code> - A number of samples.</li> <li><code>mean</code> - An arithmetic mean.</li> <li><code>min</code></li> <li><code>max</code></li> <li><code>median</code></li> <li><code>50</code>, <code>75</code>, <code>90</code>, <code>95</code>, <code>99</code>, <code>999</code> - 50th, 75th, 90th, 95th, 99th and 99.9th percentile</li> </ul>"},{"location":"operation-and-maintenance/MongooseIM-metrics/#per-host-type-metrics","title":"Per host type metrics","text":""},{"location":"operation-and-maintenance/MongooseIM-metrics/#hook-metrics","title":"Hook metrics","text":"<p>There are more hook metrics than what is listed in this table, because they are automatically created for every new hook. As a result it makes more sense to maintain a list of the most relevant or useful items, rather than keeping this table fully in sync with the code.</p> Name Type Description (when it gets incremented) <code>[HostType, anonymous_purge_hook]</code> spiral An anonymous user disconnects. <code>[HostType, disco_info]</code> spiral An information about the server has been requested via Disco protocol. <code>[HostType, disco_local_features]</code> spiral A list of server features is gathered. <code>[HostType, disco_local_identity]</code> spiral A list of server identities is gathered. <code>[HostType, disco_local_items]</code> spiral A list of server's items (e.g. services) is gathered. <code>[HostType, disco_sm_features]</code> spiral A list of user's features is gathered. <code>[HostType, disco_sm_identity]</code> spiral A list of user's identities is gathered. <code>[HostType, disco_sm_items]</code> spiral A list of user's items is gathered. <code>[HostType, mam_lookup_messages]</code> spiral An archive lookup is performed. <code>[HostType, offline_message_hook]</code> spiral A message was sent to an offline user. (Except for \"error\", \"headline\" and \"groupchat\" message types.) <code>[HostType, offline_groupchat_message_hook]</code> spiral A groupchat message was sent to an offline user. <code>[HostType, privacy_updated_list]</code> spiral User's privacy list is updated. <code>[HostType, resend_offline_messages_hook]</code> spiral A list of offline messages is gathered for delivery to a user's new connection. <code>[HostType, roster_get_subscription_lists]</code> spiral Presence subscription lists (based on which presence updates are broadcasted) are gathered. <code>[HostType, roster_in_subscription]</code> spiral A presence with subscription update is processed. <code>[HostType, roster_out_subscription]</code> spiral A presence with subscription update is received from a client. <code>[HostType, sm_broadcast]</code> spiral A stanza is broadcasted to all of user's resources. <code>[HostType, unset_presence_hook]</code> spiral A user disconnects or sends an <code>unavailable</code> presence."},{"location":"operation-and-maintenance/MongooseIM-metrics/#presences-rosters","title":"Presences &amp; rosters","text":"Name Type Description (when it gets incremented) <code>[HostType, modPresenceSubscriptions]</code> spiral Presence subscription is processed. <code>[HostType, modPresenceUnsubscriptions]</code> spiral Presence unsubscription is processed. <code>[HostType, modRosterGets]</code> spiral User's roster is fetched. <code>[HostType, modRosterPush]</code> spiral A roster update is pushed to a single session. <code>[HostType, modRosterSets]</code> spiral User's roster is updated."},{"location":"operation-and-maintenance/MongooseIM-metrics/#privacy-lists","title":"Privacy lists","text":"Name Type Description (when it gets incremented) <code>[HostType, modPrivacyGets]</code> spiral IQ privacy <code>get</code> is processed. <code>[HostType, modPrivacyPush]</code> spiral Privacy list update is sent to a single session. <code>[HostType, modPrivacySets]</code> spiral IQ privacy <code>set</code> is processed. <code>[HostType, modPrivacySetsActive]</code> spiral Active privacy list is changed. <code>[HostType, modPrivacySetsDefault]</code> spiral Default privacy list is changed. <code>[HostType, modPrivacyStanzaAll]</code> spiral A packet is checked against the privacy list. <code>[HostType, modPrivacyStanzaDenied]</code> spiral Privacy list check resulted in <code>deny</code>. <code>[HostType, modPrivacyStanzaBlocked]</code> spiral Privacy list check resulted in <code>block</code>."},{"location":"operation-and-maintenance/MongooseIM-metrics/#other","title":"Other","text":"Name Type Description (when it gets incremented) <code>[HostType, sessionAuthFails]</code> spiral A client failed to authenticate. <code>[HostType, sessionCount]</code> counter Number of active sessions. <code>[HostType, sessionLogouts]</code> spiral A client session is closed. <code>[HostType, sessionSuccessfulLogins]</code> spiral A client session is opened. <code>[HostType, xmppErrorIq]</code> spiral An <code>error</code> IQ is sent to a client. <code>[HostType, xmppErrorMessage]</code> spiral An <code>error</code> message is sent to a client. <code>[HostType, xmppErrorPresence]</code> spiral An <code>error</code> presence is sent to a client. <code>[HostType, xmppErrorTotal]</code> spiral A stanza with <code>error</code> type is routed. <code>[HostType, xmppMessageBounced]</code> spiral A <code>service-unavailable</code> error is sent, because the message recipient if offline. <code>[HostType, xmppIqSent]</code> spiral An IQ is sent by a client. <code>[HostType, xmppMessageSent]</code> spiral A message is sent by a client <code>[HostType, xmppPresenceSent]</code> spiral A presence is sent by a client. <code>[HostType, xmppStanzaSent]</code> spiral A stanza is sent by a client. <code>[HostType, xmppIqReceived]</code> spiral An IQ is sent to a client. <code>[HostType, xmppMessageReceived]</code> spiral A message is sent to a client. <code>[HostType, xmppPresenceReceived]</code> spiral A presence is sent to a client. <code>[HostType, xmppStanzaReceived]</code> spiral A stanza is sent to a client. <code>[HostType, xmppStanzaCount]</code> spiral A stanza is sent to and by a client. <code>[HostType, xmppStanzaDropped]</code> spiral A stanza is dropped due to an AMP rule or a <code>filter_packet</code> processing flow."},{"location":"operation-and-maintenance/MongooseIM-metrics/#extension-specific-metrics","title":"Extension-specific metrics","text":"<p>Metrics specific to an extension, e.g. Message Archive Management, are described in respective module documentation pages.</p>"},{"location":"operation-and-maintenance/MongooseIM-metrics/#global-metrics","title":"Global metrics","text":"Name Type Description (when it gets incremented) <code>[global, routingErrors]</code> spiral It is not possible to route a stanza (all routing handlers failed). <code>[global, nodeSessionCount]</code> value A number of sessions connected to a given MongooseIM node. <code>[global, totalSessionCount]</code> value A number of sessions connected to a MongooseIM cluster. <code>[global, uniqueSessionCount]</code> value A number of unique users connected to a MongooseIM cluster (e.g. 3 sessions of the same user will be counted as 1 in this metric). <code>[global, cache, unique_sessions_number]</code> gauge A cached value of <code>uniqueSessionCount</code>. It is automatically updated when a unique session count is calculated. <code>[global, nodeUpTime]</code> value Node uptime. <code>[global, clusterSize]</code> value A number of nodes in a MongooseIM cluster seen by a given MongooseIM node (based on Mnesia). For CETS use <code>global.cets.system.joined_nodes</code> instead. <code>[global, tcpPortsUsed]</code> value A number of open tcp connections. This should relate to the number of connected sessions and databases, as well as federations and http requests, in order to detect connection leaks. <code>[global, processQueueLengths]</code> probe The number of queued messages in the internal message queue of every erlang process, and the internal queue of every fsm (ejabberd_s2s). This is sampled every 30 seconds asynchronously. It is a good indicator of an overloaded system: if too many messages are queued at the same time, the system is not able to process the data at the rate it was designed for."},{"location":"operation-and-maintenance/MongooseIM-metrics/#data-metrics","title":"Data metrics","text":"Metric name Type Description <code>[global, data, xmpp, received, xml_stanza_size]</code> histogram A size (in bytes) of a received stanza after decryption. <code>[global, data, xmpp, sent, xml_stanza_size]</code> histogram A size (in bytes) of a sent stanza before encryption. <code>[global, data, xmpp, received, c2s, tcp]</code> spiral A size (in bytes) of unencrypted data received from a client via TCP channel. <code>[global, data, xmpp, sent, c2s, tcp]</code> spiral A size (in bytes) of unencrypted data sent to a client via TCP channel. <code>[global, data, xmpp, received, c2s, tls]</code> spiral A size (in bytes) of a data received from a client via TLS channel after decryption. <code>[global, data, xmpp, sent, c2s, tls]</code> spiral A size (in bytes) of a data sent to a client via TLS channel before encryption. <code>[global, data, xmpp, received, c2s, bosh]</code> spiral A size (in bytes) of a data received from a client via BOSH connection. <code>[global, data, xmpp, sent, c2s, bosh]</code> spiral A size (in bytes) of a data sent to a client via BOSH connection. <code>[global, data, xmpp, received, c2s, websocket]</code> spiral A size (in bytes) of a data received from a client via WebSocket connection. <code>[global, data, xmpp, sent, c2s, websocket]</code> spiral A size (in bytes) of a data sent to a client via WebSocket connection. <code>[global, data, xmpp, received, s2s]</code> spiral A size (in bytes) of a data received via TCP and TLS (after decryption) Server-to-Server connections. <code>[global, data, xmpp, sent, s2s]</code> spiral A size (in bytes) of a data sent via TCP and TLS (before encryption) Server-to-Server connections. <code>[global, data, xmpp, received, component]</code> spiral A size (in bytes) of a data received from XMPP component. <code>[global, data, xmpp, sent, component]</code> spiral A size (in bytes) of a data sent to XMPP component. <code>[HostType, data, xmpp, c2s, message, processing_time</code>] histogram Processing time for incomming c2s stanzas. <code>[global, data, dist]</code> proplist Network stats for an Erlang distributed communication. A proplist with values: <code>recv_oct</code>, <code>recv_cnt</code>, <code>recv_max</code>, <code>send_oct</code>, <code>send_max</code>, <code>send_cnt</code>, <code>send_pend</code>, <code>connections</code>. <code>[global, data, rdbms, PoolName]</code> proplist For every RDBMS pool defined, an instance of this metric is available. It is a proplist with values <code>workers</code>, <code>recv_oct</code>, <code>recv_cnt</code>, <code>recv_max</code>, <code>send_oct</code>, <code>send_max</code>, <code>send_cnt</code>, <code>send_pend</code>."},{"location":"operation-and-maintenance/MongooseIM-metrics/#cets-system-metrics","title":"CETS system metrics","text":"Metric name Type Description <code>[global, cets, system]</code> proplist A proplist with a list of stats. Description is below. Stat Name Description <code>available_nodes</code> Available nodes (nodes that are connected to us and have the CETS disco process started). <code>unavailable_nodes</code> Unavailable nodes (nodes that do not respond to our pings). <code>joined_nodes</code> Joined nodes (nodes that have our local tables running). <code>discovered_nodes</code> Discovered nodes (nodes that are extracted from the discovery backend). <code>remote_nodes_without_disco</code> Nodes that have more tables registered than the local node. <code>remote_nodes_with_unknown_tables</code> Nodes with unknown tables. <code>remote_unknown_tables</code> Unknown remote tables. <code>remote_nodes_with_missing_tables</code> Nodes that are available, but do not host some of our local tables. <code>remote_missing_tables</code> Nodes that replicate at least one of our local tables to a different list of nodes. <code>conflict_nodes</code> Nodes that replicate at least one of our local tables to a different list of nodes. <code>conflict_tables</code> Tables that have conflicting replication destinations. <code>discovery_works</code> Returns 1 if the last discovery attempt is successful (otherwise returns 0)."},{"location":"operation-and-maintenance/MongooseIM-metrics/#vm-metrics","title":"VM metrics","text":"Metric name Type Description <code>[global, erlang, memory]</code> proplist A proplist with <code>total</code>, <code>processes_used</code>, <code>atom_used</code>, <code>binary</code>, <code>ets</code> and <code>system</code> memory stats. <code>[global, erlang, system_info]</code> proplist A proplist with <code>port_count</code>, <code>port_limit</code>, <code>process_count</code>, <code>process_limit</code>, <code>ets_limit</code> stats."},{"location":"operation-and-maintenance/MongooseIM-metrics/#backend-metrics","title":"Backend metrics","text":"<p>Some extension modules expose histograms with timings of calls made to their backends. Please check the documentation of modules that are enabled in your config file, in order to learn if they provide them.</p> <p>All module backend metrics names use the following convention: <code>[global, backends, Module, BackendAction]</code> and <code>[global, backends, Module, BackendAction, count]</code>. The former is a histogram of operation times. However, the time is not recorded if a backend operation exits with an exception. The latter is a number of calls (spiral metric), incremented for every call (even a failed one).</p> <p>Besides these, following authentication metrics are always available:</p> <ul> <li><code>[HostType, backends, auth, authorize]</code></li> <li><code>[HostType, backends, auth, check_password]</code></li> <li><code>[HostType, backends, auth, try_register]</code></li> <li><code>[HostType, backends, auth, does_user_exist]</code></li> </ul> <p>These are total times of respective operations. One operation usually requires only a single call to an auth backend but sometimes with e.g. 3 backends configured, the operation may fail for first 2 backends. In such case, these metrics will be updated with combined time of 2 failed and 1 successful request.</p> <p>Additionally, the RDBMS layer in MongooseIM exposes two more metrics, if RDBMS is configured:</p> <ul> <li><code>[global, backends, mongoose_rdbms, query]</code> - Execution time of a \"simple\" (not prepared) query by a DB driver.</li> <li><code>[global, backends, mongoose_rdbms, execute]</code> - Execution time of a prepared query by a DB driver.</li> </ul>"},{"location":"operation-and-maintenance/Rolling-upgrade/","title":"Rolling upgrade","text":""},{"location":"operation-and-maintenance/Rolling-upgrade/#rolling-upgrade","title":"Rolling upgrade","text":"<p>For all MongooseIM production deployments we recommend running multiple server nodes connected in a cluster behind a load-balancer. Rolling upgrade is a process of upgrading MongooseIM cluster, one node at a time. Make sure you have at least the number of nodes able to handle your traffic plus one before the rolling upgrade to guarantee the availability and minimise the downtime. Running different MongooseIM versions at the same time beyond the duration of the upgrade is not recommended and not supported.</p> <p>Rolling upgrade procedure is recommended over configuration reload which is not supported since version 4.1.</p> <p>Please note that more complex upgrades that involve schema updates, customisations or have functional changes might require more specific and specially crafted migration procedure.</p> <p>If you want just to make the changes to the configuration file, please follow steps 1, 3, 4, 6, 7, 8. This type of change can also be done one node at a time. It would require you to check the cluster status, modify the configuration file and restart the node.</p> <p>The usual MongooseIM cluster upgrade can be achieved with the following steps:</p>"},{"location":"operation-and-maintenance/Rolling-upgrade/#1-check-the-cluster-status","title":"1. Check the cluster status.","text":"<p>Use the following command on the running nodes and examine the status of the cluster:</p> <pre><code>mongooseimctl mnesia info | grep \"running db nodes\"\n\nrunning db nodes = [mongooseim@node1, mongooseim@node2]\n</code></pre> <p>This command shows all running nodes. A healthy cluster should list all nodes that are part of the cluster.</p> <p>Should you have any issues related to node clustering, please refer to Cluster configuration and node management section.</p>"},{"location":"operation-and-maintenance/Rolling-upgrade/#2-copy-the-configuration-file","title":"2. Copy the configuration file.","text":"<p>Make a copy of the configuration file before the upgrade, as some package managers might override your custom configuration with the default one. Please note that since version 4.1 <code>*.cfg</code> MongooseIM configuration format is no longer supported and needs to be rewritten in the new <code>*.toml</code> format.</p>"},{"location":"operation-and-maintenance/Rolling-upgrade/#3-apply-the-changes-from-the-migration-guide","title":"3. Apply the changes from the migration guide.","text":"<p>All modifications of the configuration file or updates of the database schema, that are required to perform version upgrade, can be found in the Migration Guide section. When upgrading more than one version, please make sure to go over all consecutive migration guides.</p> <p>For example, when migrating from MongooseIM 3.7 to 4.1, please familiarize yourself with and apply all necessary changes described in the following pages of the Migration Guide section.</p> <ul> <li>3.7.0 to 4.0.0</li> <li>4.0.0 to 4.0.1</li> <li>4.0.1 to 4.1.0</li> </ul>"},{"location":"operation-and-maintenance/Rolling-upgrade/#4-stop-the-running-node","title":"4. Stop the running node.","text":"<p>Use the following command to stop the MongooseIM node:</p> <pre><code>mongooseimctl stop\n</code></pre>"},{"location":"operation-and-maintenance/Rolling-upgrade/#5-install-new-mongooseim-version","title":"5. Install new MongooseIM version.","text":"<p>You can get the new version of MongooseIM by either building MongooseIM from source code or downloading and upgrading from package.</p>"},{"location":"operation-and-maintenance/Rolling-upgrade/#6-start-the-node","title":"6. Start the node.","text":"<p>Use the following command to start and check the status of the MongooseIM node and the cluster:</p> <pre><code>mongooseimctl start\nmongooseimctl status\n\nmongooseimctl mnesia info | grep \"running db nodes\"\n</code></pre>"},{"location":"operation-and-maintenance/Rolling-upgrade/#7-test-the-cluster","title":"7. Test the cluster.","text":"<p>Please verify that the nodes are running and part of the same cluster. If the cluster is working as expected, the migration of the node is complete.</p>"},{"location":"operation-and-maintenance/Rolling-upgrade/#8-upgrade-the-remaining-nodes","title":"8. Upgrade the remaining nodes.","text":"<p>Once all the prior steps are completed successfully, repeat the process for all nodes that are part of the MongooseIM cluster.</p>"},{"location":"operation-and-maintenance/Rolling-upgrade/#further-cluster-upgrade-considerations","title":"Further cluster upgrade considerations","text":"<p>Another way to perform a cluster upgrade with minimising possible downtime would be to setup a parallel MongooseIM cluster running newer version. You can redirect the incoming traffic to the new cluster with use of a load-balancer.</p> <p>Once no connections are handled by the old cluster, it can by safely stopped and the migration is complete.</p> <p>We highly recommend testing new software release in staging environment before it is deployed on production.</p> <p>Should you need any help with the upgrade, deployments or load testing of your MongooseIM cluster, please reach out to us. MongooseIM consultancy and support is part of our commercial offering.</p>"},{"location":"operation-and-maintenance/System-Metrics-Privacy-Policy/","title":"System Metrics Privacy Policy","text":""},{"location":"operation-and-maintenance/System-Metrics-Privacy-Policy/#introduction","title":"Introduction","text":"<p>MongooseIM system metrics are gathered to analyse the trends and needs of our users, improve MongooseIM, and let us know where to focus our efforts. This section is devoted to explaining how to customise, read, enable and disable collecting of the system metrics.</p>"},{"location":"operation-and-maintenance/System-Metrics-Privacy-Policy/#consent","title":"Consent","text":"<p>To ensure transparency, a log message is generated on every MongooseIM node start (unless the metrics service is configured with the <code>report</code> option) to show that the functionality is enabled. The user is being notified that the metrics are gathered and has the right to withdraw the consent at any time without limiting the functionality of the product. For more information on how to disable this feature, please see the Services section.</p>"},{"location":"operation-and-maintenance/System-Metrics-Privacy-Policy/#what-information-is-being-gathered","title":"What information is being gathered?","text":"<p>When introducing this feature, it is crucial for us to be fully transparent as to what information is being gathered. In general, we capture information on how MongooseIM is being used, its version and the chosen feature set. We only report the names of known modules and APIs that are part of the opensource product. All additional customisations are simply counted without disclosing any specific details. The user can view all the information that is shared in two different ways. The log file <code>system_metrics_report.json</code> contains the most recent report that was sent. Additionally, the user can configure the Tracking ID to use their own Google Analytics account and have a view of their MongooseIM status in that dashboard. For more information on how to set up the Tracking ID, please see How to configure additional and private Tracking ID in Google Analytics.</p> <p>The full list of information that is being gathered can be seen below:</p> <ul> <li>MongooseIM node uptime.</li> <li>MongooseIM version.</li> <li>Number of nodes that are part of the MongooseIM cluster.</li> <li>Generic modules that are part of the opensource project and are in use. Some modules report what database they use as a backend, e.g. Sample report.</li> <li>Number of custom modules - without disclosing any details, we are just curious to see if there are any.</li> <li>Number of connected external XMPP components.</li> <li>List of configured REST APIs that are part of the opensource project.</li> <li>XMPP transport mechanisms like, TCP/TLS, WebSockets or BOSH.</li> <li>Geographical Data - Google Analytics is providing several geographical dimensions, such as City, Country, Continent. These values are derived from the IP address the data was sent from. See About Geographical Data for more details.</li> </ul>"},{"location":"operation-and-maintenance/System-Metrics-Privacy-Policy/#how-is-the-information-being-used","title":"How is the information being used?","text":"<p>The information collected is automatically anonymised before it is being processed any further. Each MongooseIM is randomly generating a Client ID that is being attached to the reports. The collected data has only statistical relevance and aims to help us understand the needs of our users. Knowing how our product is used will allow us to identify the core value it brings to the users. It will point out the direction in which to expand it and show us how to target our further efforts developing it.</p>"},{"location":"operation-and-maintenance/System-Metrics-Privacy-Policy/#how-does-a-report-look-like","title":"How does a report look like?","text":"<p>A sample report showing metrics for the mod_vcard backends from Google Analytics can be found below. </p> <p>Based on such report we can see the frequency of different backends being used with mod_vcard.</p>"},{"location":"operation-and-maintenance/System-Metrics-Privacy-Policy/#how-often-are-the-metrics-reported","title":"How often are the metrics reported?","text":"<p>Metrics are reported first shortly after the system startup and later at regular intervals. These timers are configurable using the <code>initial_report</code> and <code>periodic_report</code> parameters. The default values are 5 minutes for the initial report and 3 hours for the periodic one. These reporting intervals can be changed depending on the configuration parameters.</p>"},{"location":"operation-and-maintenance/System-Metrics-Privacy-Policy/#how-to-configure-this-service","title":"How to configure this service?","text":"<p>This functionality is provided as a \"service\". For more details regarding service configuration, please see the Services section.</p>"},{"location":"operation-and-maintenance/System-Metrics-Privacy-Policy/#how-to-configure-additional-and-private-tracking-id-in-google-analytics","title":"How to configure additional and private Tracking ID in Google Analytics?","text":"<p>The data is gathered and forwarded to Google Analytics. The user can add custom Google Analytics Tracking ID in the MongooseIM configuration and see all incoming events that are related to their own system metrics. For more details on how to create or sign in to the Google Analytics account, please see Get Started with Analytics.</p> <p>Tracking ID is a property identification code that all collected data is associated with. It is determining the destination where the collected data is sent. To create a new Tracking ID, please follow the steps below:</p> <p>Warning</p> <p>MongooseIM no longer supports Universal Analytics. To use metrics it is needed to create an instance of Google Analytics 4.</p> <ul> <li>Go to the <code>Admin</code> tab of your user dashboard.</li> <li>Create a new account with <code>+ Create Account</code>.</li> <li>Add new property with <code>+ Create Property</code>.<ul> <li>Within the new property go to <code>Data Streams &gt; Add stream &gt; Web</code>.</li> <li>After successful creation, the ID can be found in the top right corner of the section and has the following format G-XXXX and is named <code>Measurement ID</code>.</li> </ul> </li> <li>To create an API secret, in a <code>Data Stream</code> view go to <code>Event &gt; Measurement Protocol API secrets</code> and use the <code>Create</code> button in the top right corner to create a new secret. </li> </ul>"},{"location":"operation-and-maintenance/System-Metrics-Privacy-Policy/#example-configuration","title":"Example configuration","text":"<p>New Tracking ID can be added to the list of options <pre><code>[services.service_mongoose_system_metrics]\n  initial_report = 300_000\n  periodic_report = 10_800_000\n  tracking_id.id = \"G-XXXX\"\n  tracking_id.secret = \"Secret\"\n</code></pre></p> <p>For more details regarding service configuration, please see Services section.</p>"},{"location":"operation-and-maintenance/System-Metrics-Privacy-Policy/#data-sharing-policy","title":"Data Sharing Policy","text":"<p>For more information on how Google Analytics collects and processes data, please see Google Privacy &amp; Terms. Google Analytics is being used due to the ease of host and display reporting information. We will not share any user specific information with further third parties not mentioned in this document. Some insight into the statistical significance regarding our findings from the bulk data collected, has been shared as a blog post on our website.</p>"},{"location":"operation-and-maintenance/gdpr-considerations/","title":"GDPR considerations","text":"<p>This page describes what GDPR implies in terms of server management.</p>"},{"location":"operation-and-maintenance/gdpr-considerations/#data-affected-by-gdpr-commands","title":"Data affected by GDPR commands","text":"<ul> <li>inbox - All entries in the subject's inbox. If their messages are stored in other users' inbox, they will not be removed.</li> <li>message archive - Same as above for 1-1 messages. In case of group chat messages, they are retrieved as personal data but not removed.</li> <li>offline storage - All messages stored for delivery.</li> <li>roster - All entries in the subject's roster. Other users' rosters are NOT affected, even if they include the subject's JID or other data.</li> <li>vCard - The entire content of the subject's vCard.</li> <li>private XML storage - All items stored by the subject will be removed.</li> <li>publish-subscribe<ul> <li>retrieval: all subject's subscriptions and nodes (with their payloads included). </li> <li>removal: subject's subscriptions, push and PEP nodes (with their data included). </li> </ul> </li> </ul>"},{"location":"operation-and-maintenance/gdpr-considerations/#gdpr-cli-commands","title":"GDPR CLI commands","text":"<p>All CLI commands are accessible via the <code>mongooseimctl</code> command, located in the <code>bin/</code> directory inside the MIM release.</p>"},{"location":"operation-and-maintenance/gdpr-considerations/#creating-a-gdpr-safe-user-account","title":"Creating a GDPR-safe user account","text":"<p><code>mongooseimctl account registerUser --domain &lt;domain&gt; --password &lt;password&gt;</code></p> <p>This command will create an anonymised JID with a random username part. It ensures that no personal information will be leaked via logs or database entries, which include the user's JID.</p>"},{"location":"operation-and-maintenance/gdpr-considerations/#example","title":"Example","text":"<pre><code>$ mongooseimctl account registerUser --domain localhost --password secret\n{\n  \"data\" : {\n    \"account\" : {\n      \"registerUser\" : {\n        \"message\" : \"User 1661-175924-881845-449bca06515e060a@localhost successfully registered\",\n        \"jid\" : \"1661-175924-881845-449bca06515e060a@localhost\"\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"operation-and-maintenance/gdpr-considerations/#retrieval-of-personal-data","title":"Retrieval of Personal Data","text":"<p><code>mongooseimctl gdpr retrievePersonalData --username &lt;username&gt; --domain &lt;domain&gt; --resultFilepath &lt;filepath for the output as a zip&gt;</code></p> <p>It retrieves personal data accessible to the server (see \"Technical limitations\" section below). The directory where the zip file will be created must already exist.</p> <p>After the execution is complete, a zip file will appear in the specified folder with personal information in CSV files grouped by type.</p>"},{"location":"operation-and-maintenance/gdpr-considerations/#example_1","title":"Example","text":"<pre><code>$ mongooseimctl gdpr retrievePersonalData --username 1661-175924-881845-449bca06515e060a --domain localhost --resultFilepath /home/mongooseim/gdpr/1661-175924-881845-449bca06515e060a.zip\n</code></pre>"},{"location":"operation-and-maintenance/gdpr-considerations/#removal-of-personal-data","title":"Removal of Personal Data","text":"<p><code>mongooseimctl account removeUser --user &lt;jid&gt;</code></p> <p>It removes the user's account along with all associated personal data accessible to the server (see \"Technical limitations\" section below).</p>"},{"location":"operation-and-maintenance/gdpr-considerations/#example_2","title":"Example","text":"<pre><code>$ mongooseimctl account removeUser --user 1661-175924-881845-449bca06515e060a@localhost\n{\n  \"data\" : {\n    \"account\" : {\n      \"removeUser\" : {\n        \"message\" : \"User 1661-175924-881845-449bca06515e060a@localhost successfully unregistered\",\n        \"jid\" : \"1661-175924-881845-449bca06515e060a@localhost\"\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"operation-and-maintenance/gdpr-considerations/#technical-limitations-of-gdpr-retrieval-and-removal","title":"Technical limitations of GDPR retrieval and removal","text":"<p>Both GDPR retrieval and removal will process the data available via configured extensions and database(s). If a part of personal information is managed by an extension that is e.g. temporarily disabled, it won't be retrieved/deleted.</p> <p>If any MIM extension you had enabled on production is now disabled or you've switched one of them (or e.g. auth module) to another database, it is possible that some personal data will not be retrieved or removed as expected. In such case, please consider starting a separate MIM instance that is configured to access all places, where personal data may be stored. You may also extract the missing pieces of information on your own, however we won't cover the details of this method in this guide.</p> <p>Please also visit Known issues page to learn about a <code>mod_mam_muc</code> issue that may manifest in some environments.</p>"},{"location":"operation-and-maintenance/known-issues/","title":"Known issues","text":"<p>This document provides a list of all known issues with MongooseIM operation and configuration. You may also find proposed workarounds if any are available.</p>"},{"location":"operation-and-maintenance/known-issues/#missing-muc-light-room-config-fields-with-rdbms-backend","title":"Missing MUC Light room config fields with RDBMS backend","text":"<p>Before MongooseIM 3.5.x (incl.) new MUC Light rooms could be created with some config fields absent in the RDBMS table. These options couldn't be re-added later by changing the room config via requests from the clients.</p> <p>It happened when the default config was a subset of the schema, and the client hasn't provided these values when a room was created.</p> <p>Please note that this issue was resolved from MIM 3.6.0 onwards as the <code>default_config</code> option was deleted.</p>"},{"location":"operation-and-maintenance/known-issues/#how-to-fix-this","title":"How to fix this?","text":"<p>You have to iterate over all rooms in the DB (<code>muc_light_rooms</code> table) and add missing entries to the <code>muc_light_config</code> table. Every option is inserted as a separate row and is stored as plain text, so it should be straightforward.</p> <p>Let's say you were using the following config in <code>mongooseim.cfg</code>:</p> <pre><code>{config_schema, [\n                 \"roomname\",\n                 \"subject\",\n                 \"background\",\n                 \"notification_sound\"\n                ]},\n{default_config, [\n                  {\"roomname\", \"The room\"},\n                  {\"subject\", \"Chit-chat\"}\n                 ]}\n</code></pre> <p>Your client application has created some rooms without the <code>background</code> option by mistake.</p> <p>For every <code>id</code> in the <code>muc_light_rooms</code> table, you need to execute:</p> <pre><code>INSERT INTO muc_light_config(room_id, opt, val) VALUES ('put id here', 'background', 'new default value');\n</code></pre>"},{"location":"operation-and-maintenance/known-issues/#mssql-connectivity-via-odbc","title":"MSSQL connectivity via ODBC","text":"<p>We have observed some issues with he ODBC driver used by MongooseIM in the past. The problems should now be resolved, and MSSQL is verified to work on Ubuntu 20.04.2 LTS.</p>"},{"location":"operation-and-maintenance/known-issues/#gdpr-retrieval-for-mam-muc-limitation","title":"GDPR retrieval for MAM MUC limitation","text":"<p>When the personal data retrieval is executed for a user in a specific domain, Message Archive Management for groupchats must be running for this particular domain. This is the case for most configurations, but the problem manifests when a MongooseIM operator configures <code>mod_mam_muc</code>/<code>mod_mam</code> to start only for a subset of domains supported by the cluster (<code>host_config</code> option).</p> <p>In such case, personal data stored by MAM MUC will not be retrieved for this user.</p>"},{"location":"operation-and-maintenance/known-issues/#proposed-workaround","title":"Proposed workaround","text":"<p>Start a dedicated MongooseIM instance with a slightly different config, which enables Message Archive Management for the user's domain. This instance doesn't have to be clustered with other nodes and doesn't have to be accessible for actual users.</p> <p>After a successful retrieval, this instance may be terminated and deleted if necessary.</p>"},{"location":"operation-and-maintenance/tls-distribution/","title":"Distribution over TLS","text":"<p>It's possible to use TLS for communication between MongooseIM cluster nodes. To enable it, find the directory of your release, below it look for <code>etc/vm.dist.args</code> and, inside the file, the section about the distribution protocol:</p> <pre><code>## Use TLS for connections between Erlang cluster members.\n## Don't forget to override the paths to point to your certificate(s) and key(s)!\n## Once a connection is established, Erlang doesn't differentiate between\n## a client and a server - the same certs/keys can be used on both sides.\n#-proto_dist inet_tls\n#-ssl_dist_opt server_certfile   /Users/erszcz/work/esl/mongooseim/_build/mim1/rel/mongooseim/priv/ssl/fake_cert.pem client_certfile   /Users/erszcz/work/esl/mongooseim/_build/mim1/rel/mongooseim/priv/ssl/fake_cert.pem\n#              server_keyfile    /Users/erszcz/work/esl/mongooseim/_build/mim1/rel/mongooseim/priv/ssl/fake_key.pem  client_keyfile    /Users/erszcz/work/esl/mongooseim/_build/mim1/rel/mongooseim/priv/ssl/fake_key.pem\n#              server_cacertfile /Users/erszcz/work/esl/mongooseim/_build/mim1/rel/mongooseim/priv/ssl/cacert.pem    client_cacertfile /Users/erszcz/work/esl/mongooseim/_build/mim1/rel/mongooseim/priv/ssl/cacert.pem\n#              client_verify     verify_peer\n#              server_verify     verify_peer\n#              server_fail_if_no_peer_cert true\n</code></pre> <p>By default, the <code>proto_dist</code> as well as the following options for configuring the cluster member are commented out. Enable them and provide the correct paths to your CA certificate, server certificate and server key.</p> <p>There's a number of caveats to remember about when running Erlang distribution over TLS:</p> <ul> <li> <p>TLS-enabled and non-TLS Erlang nodes can't communicate with one another.     Remember about it when trying to run <code>erl -[s]name ...</code> and communicating with the server.</p> </li> <li> <p>Establishing a TLS connection will fail if a certificate isn't found in the specified location.     You might receive a log message indicating that when nodes try to connect:</p> <pre><code>2017-03-10 16:16:03.844 [warning] &lt;0.4218.2&gt; global: mongooseim@localhost failed to connect to fed1@localhost\n</code></pre> <p>If the pointed-at certificate/key/CA-certificate file doesn't exist, it won't be reported before trying to connect. Look for (grep) the log message on all cluster nodes, as the message doesn't have to appear on all nodes if a connection fails.</p> </li> <li> <p>You can switch a cluster from running non-TLS distribution, to TLS distribution by shutting down a node, enabling TLS on it, starting it up again, and repeating the steps for each remaining node.     Again, nodes with and without TLS enabled won't be able to communicate with one another.</p> </li> <li> <p>It's possible to fortify an Erlang cluster further than the Mongoose's preconfigured <code>vm.dist.args</code> does.     This includes: checking certificate revocation status against a CA's Certificate Revocation List, securing/disabling EPMD (Erlang Port Mapper Daemon), using custom certificate verification functions.     For details on these steps please refer to Erlang Distribution over TLS and Erlang (and Elixir) distribution without epmd.</p> </li> </ul>"},{"location":"rest-api/Administration-backend/","title":"MongooseIM's REST API for backend administration","text":""},{"location":"rest-api/Administration-backend/#configuration","title":"Configuration","text":"<p>To enable the commands, you need to hook the <code>mongoose_admin_api</code> module to an HTTP endpoint as described in the admin REST API handlers configuration section of the listeners documentation.</p>"},{"location":"rest-api/Administration-backend/#openapi-specifications","title":"OpenAPI specifications","text":"<p>Read the Swagger documentation for more information.</p> <p></p>"},{"location":"rest-api/Client-frontend/","title":"MongooseIM's REST API for frontend or client","text":"<p>In addition to the regular XMPP connection methods such as TCP (with TLS/STARTTLS), WebSockets and BOSH, MongooseIM provides parts of its functionality over a REST API.</p>"},{"location":"rest-api/Client-frontend/#assumptions","title":"Assumptions","text":"<ol> <li>Every request has to be authenticated. Please see the Authentication section for more details.</li> <li>We strongly advise that this API is served over HTTPS.</li> <li>User registration has to be done via other methods (f.e. using the REST API for backend services).</li> <li>The relevant endpoint has to be configured on the server side. See the configuration section.</li> <li>A list of provided actions is documented with Swagger. See the specification.</li> </ol>"},{"location":"rest-api/Client-frontend/#authentication","title":"Authentication","text":"<p>MongooseIM uses Basic Authentication as an authentication method for the REST API.</p> <p>Basic authentication is a simple authentication scheme built into the HTTP protocol. Each HTTP request to the client REST API has to contain the Authorization header with the word <code>Basic</code> followed by a space and a base64-encoded string <code>username@host:password</code>, where:</p> <ul> <li><code>username@host</code> is the user's bare JID,</li> <li><code>password</code> is the password used to register the user's account.</li> </ul> <p>For example, to authorize as <code>alice@localhost</code> with the password <code>secret</code>, the client would send a header:</p> <pre><code>Authorization: Basic YWxpY2VAbG9jYWxob3N0OnNlY3JldA==\n</code></pre>"},{"location":"rest-api/Client-frontend/#configuration","title":"Configuration","text":"<p>Handlers have to be configured as shown in the REST API configuration example to enable REST API.</p> <p>In order to get the client REST API up and running simply copy the provided example. For more details about possible configuration parameters please see the relevant documentation of the listeners, in particular the client REST API handlers section.</p>"},{"location":"rest-api/Client-frontend/#smack-library-support","title":"Smack library support","text":"<p>REST API can fetch messages for Smack Stanza Properties.</p> <p>For example if we have properties in the stanza like: <pre><code>    &lt;message xml:lang='en' to='alice@localhost' id='123' type='chat'&gt;\n      &lt;body xml:lang='en_US'&gt;Hi!&lt;/body&gt;\n      &lt;thread parent='7edac73ab41e45c4aafa7b2d7b749080'&gt;\n        e0ffe42b28561960c6b12b944a092794b9683a38\n      &lt;/thread&gt;\n      &lt;properties xmlns=\"http://www.jivesoftware.com/xmlns/xmpp/properties\"&gt;\n          &lt;property&gt;\n              &lt;name&gt;some_number&lt;/name&gt;\n              &lt;value type='integer'&gt;123&lt;/value&gt;\n          &lt;property&gt;\n          &lt;property&gt;\n              &lt;name&gt;some_string&lt;/name&gt;\n              &lt;value type='string'&gt;abc&lt;/value&gt;\n          &lt;property&gt;\n      &lt;/properties&gt;\n    &lt;/message&gt;\n</code></pre> then in the final json message these properties will be converted to json map without tag names and all types will be taken as string: <pre><code>    {   \"to\": \"alice@localhost\",\n        \"timestamp\": 1531329049949,\n        \"id\": \"123\",\n        \"from\": \"bob@localhost\",\n        \"body\": \"Hi!\",\n        \"thread\": \"e0ffe42b28561960c6b12b944a092794b9683a38\",\n        \"parent\": \"7edac73ab41e45c4aafa7b2d7b749080\",\n        \"properties\":{\n            \"some_number\":\"123\",\n            \"some_string\":\"abc\"\n        }\n    }\n</code></pre></p>"},{"location":"rest-api/Client-frontend/#openapi-specifications","title":"OpenAPI specifications","text":"<p>See the Swagger documentation for more information.</p> <p></p>"},{"location":"tutorials/CETS-configure/","title":"How to configure MongooseIM to use CETS instead of Mnesia","text":""},{"location":"tutorials/CETS-configure/#cets-config-example","title":"CETS Config Example","text":"<p>CETS is a library, which allows to replicate in-memory data across the MongooseIM cluster. It could be used to store:</p> <ul> <li>information about online XMPP sessions;</li> <li>information about outgoung S2S connections;</li> <li>stream management session IDs;</li> <li>information about online MUC rooms.</li> </ul> <p>If you want to use CETS instead of Mnesia, ensure that these options are set:</p> <pre><code>[general]\n  sm_backend = \"cets\"\n  component_backend = \"cets\"\n  s2s_backend = \"cets\"\n\n[internal_databases.cets]\n\n# The list of modules that use CETS\n# You should enable only modules that you use\n[modules.mod_stream_management]\n  backend = \"cets\"\n\n[modules.mod_bosh]\n  backend = \"cets\"\n\n[modules.mod_muc]\n  online_backend = \"cets\"\n\n[modules.mod_jingle_sip]\n  backend = \"cets\"\n</code></pre> <p>Ensure that <code>outgoing_pools</code> are configured with RDBMS, so CETS could get a list of MongooseIM nodes, which use the same relational database and cluster them together.</p> <p>A preferred way to install MongooseIM is Helm Charts on Kubernetes, so it allows to set <code>volatileDatabase</code> to <code>cets</code> and the values would be applied using Helm's templates</p>"},{"location":"tutorials/CETS-configure/#cets-with-the-file-discovery-backend","title":"CETS with the file discovery backend","text":"<p>It is possible to read a list of nodes to cluster from a file. But MongooseIM does not modify this file, so it is the task for the operator to update the file. But MongooseIM would reread the file without the restart:</p> <pre><code>[internal_databases.cets]\n    backend = \"file\"\n    node_list_file = \"/etc/mongooseim/mongooseim_nodes.txt\"\n</code></pre> <p>And the format of the <code>node_list_file</code> file is a new line separated list of nodes:</p> <pre><code>mongooseim@host1.example.com\nmongooseim@host2.example.com\nmongooseim@host3.example.com\n</code></pre> <p>File backend for CETS is only useful if you do not use an RDBMS database. You could use some external script to get the list of nodes from the AWS CLI command or some other way.</p>"},{"location":"tutorials/Docker-build/","title":"How to build and run MongooseIM docker image","text":"<p>The instruction below will guide you through the process of building and running the MongooseIM docker image.</p>"},{"location":"tutorials/Docker-build/#requirements","title":"Requirements","text":"<p>To follow this guide you need to have docker installed and the MongooseIM GitHub repository cloned locally.</p>"},{"location":"tutorials/Docker-build/#building-docker-image","title":"Building docker image","text":"<p>To build a MongooseIM image, navigate to the main repo directory (referenced as <code>$REPO</code> in this guide) and execute:</p> <pre><code>./tools/build-docker-from-remote.sh\n</code></pre> <p>which will build a MongooseIM docker image based on the current local commit if it is available on the remote.</p> <p>Alternatively, it is possible to build a docker image based on any commit available on remote (commit hash referenced as <code>$COMMIT_HASH</code>), by executing:</p> <pre><code>./tools/build-docker-from-remote.sh $COMMIT_HASH\n</code></pre>"},{"location":"tutorials/Docker-build/#running-docker-image","title":"Running docker image","text":"<p>Full tutorial on running a docker image is available on mongooseim-docker GitHub. Here only simple and one-node configuration will be presented. In order to run it execute:</p> <pre><code>docker run -dt -h first-node --name first-node -e JOIN_CLUSTER=false mongooseim\n</code></pre> <p>which starts a single MongooseIM node named <code>first-node</code>.</p>"},{"location":"tutorials/How-to-build/","title":"How to build MongooseIM","text":"<p>Instructions provided in this page are verified for:</p> <ul> <li>CentOS 7</li> <li>Ubuntu 16.04 LTS (Xenial)</li> <li>Ubuntu 18.04 LTS (Bionic)</li> <li>macOS 13.3 (Ventura)</li> </ul> <p>For any other OS versions, the instructions should still work, however, some steps or file paths may be different.</p>"},{"location":"tutorials/How-to-build/#requirements","title":"Requirements","text":"<p>To compile MongooseIM you need:</p> CentOSUbuntumacOS <ul> <li>Make: <code>make</code>,</li> <li>C and C++ compiler: <code>gcc</code>, <code>gcc-c++</code>,</li> <li>Erlang/OTP 24.0 or higher:<ul> <li><code>erlang</code> package, or,</li> <li><code>esl-erlang</code> from Erlang Solutions website, or,</li> <li>install using kerl,</li> </ul> </li> <li>OpenSSL 0.9.8 or higher, for STARTTLS, SASL and SSL encryption: <code>openssl</code> and <code>openssl-devel</code>,</li> <li>ODBC library: <code>unixODBC-devel</code>,</li> <li>Zlib 1.2.3 or higher: <code>zlib-devel</code>.</li> </ul> <ul> <li>Make: <code>make</code>,</li> <li>C and C++ compiler: <code>gcc</code>, <code>g++</code>,</li> <li>Erlang/OTP 24.0 or higher:<ul> <li><code>erlang</code> package, or,</li> <li><code>esl-erlang</code> from Erlang Solutions website, or,</li> <li>install using kerl,</li> </ul> </li> <li>OpenSSL 0.9.8 or higher, for STARTTLS, SASL and SSL encryption: <code>olibssl-dev</code>,</li> <li>ODBC library: <code>unixodbc-dev</code>,</li> <li>Zlib 1.2.3 or higher: <code>zlib1g-dev</code>.</li> </ul> <ul> <li>Make, C and C++ compiler: Xcode Command Line Tools,</li> <li>Erlang/OTP 24.0 or higher:<ul> <li><code>erlang</code> from Homebrew,</li> <li>install using kerl,</li> </ul> </li> <li>OpenSSL 0.9.8 or higher, for STARTTLS, SASL and SSL encryption: <code>openssl</code> from Homebrew</li> <li>ODBC library: <code>unixodbc</code> from Homebrew.</li> </ul>"},{"location":"tutorials/How-to-build/#preparing-the-environment","title":"Preparing the environment","text":"centOSUbuntumacOS <p>Please install the required dependencies:</p> <pre><code>sudo yum install git make zlib-devel openssl openssl-devel unixODBC-devel gcc gcc-c++ erlang\n</code></pre> <p>Now, please proceed to the \"Building\" section.</p> <p>Please install the required dependencies:</p> <pre><code>sudo apt install git make zlib1g-dev libssl-dev unixodbc-dev gcc g++ erlang\n</code></pre> <p>Now, please proceed to the \"Building\" section.</p> <p>Step 1</p> <p>Install Homebrew to manage packages on your Mac. You may use a different package manager but you'll need to figure out the package names and file paths on your own.</p> <p>Step 2</p> <p>Install Xcode Command Line Tools.</p> <pre><code>xcode-select --install # install compilation tools\n</code></pre> <p>Step 3</p> <p>Install dependencies with Brew.</p> <pre><code>brew install erlang openssl unixodbc\n</code></pre> <p>Step 4</p> <p>Add OpenSSL paths to the compiler and linker environment variables:</p> <pre><code>export LDFLAGS=\"-L/usr/local/opt/openssl/lib\"\nexport CFLAGS=\"-I/usr/local/opt/openssl/include\"\n</code></pre> <p>Now, please proceed to the \"Building\" section.</p>"},{"location":"tutorials/How-to-build/#building","title":"Building","text":"<p>To compile MongooseIM, navigate to the main repo directory (referenced as <code>$REPO</code> in this guide) and execute:</p> <pre><code>make [rel]\n</code></pre> <p><code>rel</code> is optional as it is the default target. This will download all dependencies, compile everything and build a <code>prod</code> release.</p> <p>If a more advanced release is required (with only specific DB support, e.g. mysql or pgsql) or you want to set the <code>prefix</code> or <code>user</code> for the installation script please refer to the release configuration page in our documentation.</p> <p>The <code>make rel</code> commands will generate a self-contained OTP system structure in the project's <code>_build/prod/rel/mongooseim</code> subdirectory. The contents of that directory are as follows:</p> <ul> <li><code>bin</code> - startup/administration scripts,</li> <li><code>etc</code> - configuration files,</li> <li><code>lib</code> - MongooseIM binary, header and runtime files,</li> <li><code>var</code> - spool directory,</li> <li><code>log</code> - log file directory,</li> <li><code>releases</code> - release files directory.</li> </ul>"},{"location":"tutorials/How-to-build/#running-mongooseim","title":"Running MongooseIM","text":"<p>To run MongooseIM from the project tree after compiling it, change the directory to <code>$REPO/_build/prod/rel/mongooseim</code>.</p> <p>There you can use the <code>mongooseim</code> command line administration script to start and stop MongooseIM. For example, this command will start the server:</p> <pre><code>bin/mongooseim start\n</code></pre> <p>You can also run the server in interactive mode (drop into an Erlang shell):</p> <pre><code>bin/mongooseim live\n</code></pre> <p>There's also a tool called <code>mongooseimctl</code> to perform some operations on a running instance, e.g.:</p> <pre><code>$ bin/mongooseimctl status\nMongooseIM node mongooseim@localhost:\n    operating system pid: 3105\n    Erlang VM status: started (of: starting | started | stopping)\n    boot script status: started\n    version: 3.4.0-7-gaec944c92 (as mongooseim)\n    uptime: 0 days 00:00:12\n    distribution protocol: inet_tcp\n    logs:\n        log/mongooseim.log\n</code></pre>"},{"location":"tutorials/How-to-build/#building-the-testing-target-and-running-tests","title":"Building the testing target and running tests","text":"<p>For testing purposes there's a different make target available:</p> <pre><code>make devrel\n</code></pre> <p>which will generate releases <code>mim1</code>, <code>mim2</code>, <code>mim3</code>, <code>fed1</code>, <code>reg1</code> in <code>$REPO/_build/</code> and prepare them for testing and generating coverage reports.</p> <p>In order to learn how to execute tests, please consult Testing MongooseIM page.</p>"},{"location":"tutorials/ICE_tutorial/","title":"How to set up MongooseICE (ICE/TURN/STUN server)","text":""},{"location":"tutorials/ICE_tutorial/#introduction","title":"Introduction","text":""},{"location":"tutorials/ICE_tutorial/#who-is-this-document-for","title":"Who is this document for?","text":"<p>This tutorial presents our TURN/STUN server in action. You get to see how to set up and configure MongooseICE and examine a system utilising its many talents.</p> <p>Are you in need of an application requiring NAT traversal? Want to see how a TURN and STUN server would handle it? Or maybe you just like to tinker with interesting technologies and experience setting them up first hand?</p> <p>If that's the case, this tutorial is for you.</p>"},{"location":"tutorials/ICE_tutorial/#what-is-the-end-result-of-this-tutorial","title":"What is the end result of this tutorial?","text":"<p>At the end of the tutorial you will have a working environment with two peers, one sending a live video to another. The peer-to-peer communication will not be obstructed by any NATs that may occur in the background. The live video stream is only an example here - there are many possible use cases for peer-to-peer communication with NAT traversal. We chose to build an example application that shows video streaming, because it's vivid, catchy and fun.</p>"},{"location":"tutorials/ICE_tutorial/#what-do-i-need-to-begin","title":"What do I need to begin?","text":"<p>Before you begin you have to prepare an environment for setting up the components used in this tutorial. Here's a list of things you'll need: * One Android phone (or at least an Android emulator). The video player in this tutorial is available only as an Android application. * RaspberryPi or any other device that is able to run Elixir code. Oh, and also has ffmpeg installed. We are going to use use RaspberryPi 3, to give this tutorial a hint of IoT. * At least one machine with a public IPv4 address. It is necessary, because both MongooseIM and MongooseICE servers need to be accessible by all devices that are used in this demo system. You could use a private, local IP address, but then you would need to ensure that your phone and the RaspberryPi are behind some kind of a NAT relative to this IP address.</p> <p>Note</p> <p>The demo will probably work without the NAT, but then there is no point in setting up a TURN server.</p> <p>We are going to use 2 VPS (Virtual Private Server) that are located somewhere far far away, both having public IPv4 address. Let's say MongooseICE is bound to 1.1.1.1, and MongooseIM to 2.2.2.2.</p>"},{"location":"tutorials/ICE_tutorial/#general-architecture-of-the-environment-built-with-this-tutorial","title":"General architecture of the environment built with this tutorial","text":"<p>This is the architecture of the system we are building: </p> <p>As we know by now, MongooseIM is bound to 2.2.2.2/myxmpp.com and MongooseICE to 1.1.1.1. We also have a RaspberryPi that is connected to a private network (so is behind some NAT) and an Android phone that is connected to an LTE network and also is behind the carrier's NAT.</p>"},{"location":"tutorials/ICE_tutorial/#ice-notes","title":"ICE notes","text":"<p>The end result of this tutorial not only uses MongooseICE and MongooseIM servers but also uses custom version of Mangosta-Android and [DemoStreamerICE]. Both projects are custom modified and custom made respectively in order to showcase the video streaming using the data relay capabilities provided by MongooseICE. The streaming itself, along with the signalling protocol, were prepared only for the case of this demo and are not a part of the platform. Those components exist only to visualize what can be achieved with MongooseICE and what can be built on top of it.</p>"},{"location":"tutorials/ICE_tutorial/#setting-up-mongooseim-signalling","title":"Setting up MongooseIM (signalling)","text":"<p>The ICE is nothing without signalling. The signalling protocol itself can be designed specifically for the application that is being deployed or can be implemented based on some standards, e.g. Jingle. Here, we chose to implement the simplest signalling possible, i.e. sending relay addresses via XMPP messages. No matter if we decide to go with this approach or with Jingle, we can use the MongooseIM XMPP server as a transport layer for the signalling. In order to enable signalling we need an instance of MongooseIM running with the simplest configuration, since the only thing we need from it is to provide us with means to communicate between two peers.</p>"},{"location":"tutorials/ICE_tutorial/#configuration","title":"Configuration","text":"<p>You can find MongooseIM installation instructions on this page. Once you have it installed, you need to modify the <code>mongooseim.toml</code> config file: <pre><code>[general]\n  hosts = [\"localhost\", \"myxmpp.com\"]\n</code></pre> This sets the virtual hostname of the XMPP server, so that you can register users in this domain. After that, you can start MongooseIM with <pre><code>mongooseimctl start\n</code></pre></p>"},{"location":"tutorials/ICE_tutorial/#users","title":"Users","text":"<p>After we finish setting up MongooseIM, we need to register some users. For this demo we need two users: movie@myxmpp.com and phone@myxmpp.com, for RaspberryPi and the Android phone respectively. In order to do that, type:</p> <pre><code>mongooseimctl account registerUser --username movie --domain myxmpp.com --password xmpp_password\nmongooseimctl account registerUser --username phone --domain myxmpp.com --password xmpp_password\n</code></pre> <p>on the machine that has MongooseIM installed.</p> <p>As you can see here, we have created those two users, both with the password xmpp_password for simplicity.</p>"},{"location":"tutorials/ICE_tutorial/#setting-up-mongooseice-turnstun-server","title":"Setting up MongooseICE (TURN/STUN server)","text":"<p>Now, since MongooseIM handles the signalling, we need the TURN relay and the STUN server to send peer-to-peer data. For that we are going to use the star of this tutorial - MongooseICE.</p>"},{"location":"tutorials/ICE_tutorial/#how-to-get-and-configure","title":"How to get and configure","text":"<p>The whole documentation that describes all options and deployment methods, can be found on the project's github page. Let's get to it! (this command assumes that we are on the server for MongooseICE and that it has Docker installed): <pre><code>docker run -it --net=host -e \"MONGOOSEICE_UDP_RELAY_IP=1.1.1.1\" -e \"MONGOOSEICE_STUN_SECRET=secret\" -e \"MONGOOSEICE_UDP_REALM=myrelay\" mongooseim/mongooseice:0.4.0\n</code></pre></p> <p>This command starts the MongooseICE server in the Docker container, attaching its virtual network interface to the network interface of the host machine the Docker daemon is running on. There are three important configuration options we have to set via environment variables:</p> <ul> <li>MONGOOSEICE_UDP_RELAY_IP - This is the IP address that MongooseICE provides data relay on. This should be set to public IPv4 address.</li> <li>MONGOOSEICE_STUN_SECRET - This is a secret password that TURN clients need to provide to connect to this server.</li> <li>MONGOOSEICE_UDP_REALM - This is just a name for your TURN relay.</li> </ul> <p>And that's it! MongooseICE is now ready to roll!</p>"},{"location":"tutorials/ICE_tutorial/#setting-up-mangosta-android","title":"Setting up Mangosta-Android","text":""},{"location":"tutorials/ICE_tutorial/#how-to-get-and-install","title":"How to get and install","text":"<p>The source code of the video-stream-demo-enabled Mangosta-Android can be found on the ice_demo_kt branch. If you want to tinker with it and compile it yourself, you can do that. All you need is Android Studio 2.3+. The compilation is pretty straightforward, so I'm not going to explain it here. If you are interested in how it works, most of the code is in the <code>inaka.com.mangosta.videostream</code> package. If you don't want to compile this application from source, you can just install this .apk on your phone and that's it.</p>"},{"location":"tutorials/ICE_tutorial/#how-to-configure","title":"How to configure","text":"<p>Right after you start Mangosta-Android for the first time, you will need to login to your XMPP server. In order to do that, just enter the JID you have created for the phone (phone@myxmpp.com), the password (xmpp_password) and the server address (2.2.2.2 or myxmpp.com if you've set up the domain to actually point to this IP address), and then confirm by clicking \"Enter\".</p> <p></p> <p>After we log in, we can start setting up the connection to the MongooseICE server we set up before. The process is shown on the screenshots below.</p> <p></p> <p>On the \"Configure ICE\" screen we have to set 5 fields up:</p> <ul> <li>TURN server address - IPv4 address of our MongooseICE</li> <li>TURN Server port - since we did not set the port while configuring MongooseICE it uses a default one - 3478</li> <li>TURN Realm - Realm name we have set via MONGOOSEICE_UDP_REALM variable. In our case it's \"myrelay\".</li> <li>TURN username - Current version of MongooseICE ignores this, so you may leave it as is.</li> <li>TURN password - The password that we have set via MONGOOSEICE_STUN_SECRET variable. In our case it's \"secret\"</li> </ul> <p>And that would be all. Now you can click \"TEST CONNECTION\" to, well..., test the connection. If everything works, you can \"SAVE\" the settings. Now your Mangosta-Android is ready to play streamed video, but we still need the source...</p>"},{"location":"tutorials/ICE_tutorial/#setting-up-raspberrypi","title":"Setting up RaspberryPi","text":"<p>Let's configure the video source now. In our case it will be a RaspberryPi with Elixir and ffmpeg installed running our ICE demo application.</p>"},{"location":"tutorials/ICE_tutorial/#the-software","title":"The software","text":"<p>For this demo we provide a simple XMPP client that also is able to send live video stream using ffmpeg whenever other peer asks for it via XMPP. This client is written in Elixir, so we can run it from source quite easily.</p>"},{"location":"tutorials/ICE_tutorial/#how-to-get-and-configure_1","title":"How to get and configure","text":"<p>You can get the client's sources here. For now we only need to run it, so let's get to it (on our RaspberryPi): <pre><code>git clone https://github.com/esl/ice_demo.git\ncd ice_demo\nmix deps.get\niex -S mix\n</code></pre></p> <p>After a while we should get into Elixir shell. In order to enable the streamer, we need to start it, providing some configuration options (in the Elixir shell): <pre><code>opts = [\njid: \"movie@myxmpp.com\",\npassword: \"xmpp_password\",\nhost: \"myxmpp.com\",\nturn_addr: \"1.1.1.1:3784\"\nturn_username: \"username\",\nturn_secret: \"secret\",\nvideo_file: \"/home/pi/sintel.h264\"\n]\nICEDemo.start_movie(opts)\n</code></pre></p> <p>The first 3 options are all about connecting to the XMPP server - we use \"movie@myxmpp.com\" user that we created earlier. Next 3 options are about connecting to the MongooseICE server. Those are similar to ones we set in Mangosta-Android. The last one points to the video file that will be streamed on request. This file has to be raw, H.264-encoded, video-only file. If you are not sure how to get one, you can just use this one (pre-rendered Sintel, OpenBlender project). With this configuration, our RaspberryPi is ready to stream!</p>"},{"location":"tutorials/ICE_tutorial/#the-end-result","title":"The end result","text":""},{"location":"tutorials/ICE_tutorial/#playing-the-video","title":"Playing the video","text":"<p>Now we finally can get out phone and start streaming the video! In order to do that, we have to click the \"New video stream\" button as shown on the screenshots below, enter the JID of the RaspberryPi and confirm with the \"Stream!\" button.</p> <p></p> <p>Hopefully, now you can see the video on your own mobile device.</p>"},{"location":"tutorials/Jingle-SIP-setup/","title":"Jingle/SIP setup proof of concept","text":"<p>This tutorial will show you how to configure MongooseIM, Routr (a SIP server) and client applications to demonstrate how the Jingle/SIP integration works.</p>"},{"location":"tutorials/Jingle-SIP-setup/#prerequisites","title":"Prerequisites","text":"<p>We are going to use the following open source software:</p> <ul> <li> <p>MongooseIM - https://github.com/esl/MongooseIM</p> <ul> <li>see How-to-build for details on building.   It's important to remember to run the configuration script with <code>with-jingle-sip</code> flag set:   <code>tools/configure with-jingle-sip</code>.   Without this, third party dependencies required by the Jingle/SIP translator will not be included in the release.</li> </ul> </li> <li> <p>Routr (SIP server) - https://routr.io</p> <ul> <li>I recommend downloading binaries for your system from official source.</li> </ul> </li> <li>Jitsi (XMPP and SIP client application) - https://desktop.jitsi.org</li> <li>Otalk - web based XMPP client - https://github.com/otalk/otalk-im-client<ul> <li>Follow the instructions on otalk-im-client#installing to run it</li> </ul> </li> </ul> <p>We will use 2 users <code>xmpp.user@xmpp.example</code> and <code>sip.user@sip.example</code>.</p>"},{"location":"tutorials/Jingle-SIP-setup/#configuring-routr","title":"Configuring Routr","text":"<p>First the domain <code>sip.example</code> needs to be added to domains served by Routr. To do it, paste the following content to config/domains.yml in the directory where Routr was:</p> <pre><code>- apiVersion: v1beta1\n  kind: Domain\n  metadata:\n    name: SIP domain\n  spec:\n    context:\n      domainUri: sip.example\n</code></pre> <p>Then the <code>sip.user@sip.example</code> needs to be added to <code>config/agents.yml</code> like below:</p> <pre><code>- apiVersion: v1beta1\n  kind: Agent\n  metadata:\n    name: SIP User\n  spec:\n    credentials:\n      username: 'sip.user'\n      secret: '1234'\n    domains: [sip.example]\n</code></pre> <p>Now Routr can be started with</p> <pre><code>./routr\n</code></pre> <p>If all goes well we'll see the following output:</p> <pre><code>[INFO ] Starting Routr\n[INFO ] Listening  on 10.152.1.27:5060 [udp]\n[INFO ] Listening  on 10.152.1.27:5060 [tcp]\n[INFO ] Starting Location service\n[INFO ] Starting Registry service\n[INFO ] Starting Restful service (port: 4567, apiPath: '/api/v1beta1')\n</code></pre> <p>It is important to remember the IP address as it'll be used in next point.</p>"},{"location":"tutorials/Jingle-SIP-setup/#a-side-note","title":"A side note","text":"<p>In Routr's logs you may see messages like</p> <pre><code>[WARN ] Unable to register with Gateway -&gt; sip.provider.net. (Verify your network status)\n</code></pre> <p>or</p> <pre><code>[ERROR] java.lang.RuntimeException: javax.sip.header.TooManyHopsException: has already reached 0!\n</code></pre> <p>They can be ignored for the purpose of the tutorial.</p>"},{"location":"tutorials/Jingle-SIP-setup/#configuring-etchosts","title":"Configuring /etc/hosts","text":"<p>In my case the IP reported by Routr was <code>10.152.1.27</code>. Now we need to use this to update <code>/etc/hosts</code> file like below:</p> <pre><code>10.152.1.27     sip.example xmpp.example\n</code></pre>"},{"location":"tutorials/Jingle-SIP-setup/#configuring-mongooseim","title":"Configuring MongooseIM","text":"<p>At this point I assume that MongooseIM was built with <code>make rel</code>, that it is running and the current working directory is <code>_build/prod/rel/mongooseim</code>. Similar to Routr, MongooseIM also needs to know which hosts to server. Please replace the default host defined in <code>etc/mongooseim.toml</code>; the line:</p> <pre><code>[general]\n  hosts = [\"localhost\"]\n</code></pre> <p>should be changed to:</p> <pre><code>[general]\n  hosts = [\"xmpp.example\", \"sip.example\"]\n</code></pre> <p>Now we need to enable <code>mod_jingle_sip</code>, please add the following line in modules list (somewhere around line 740 in the same file)</p> <pre><code>[modules.mod_jingle_sip]\n  proxy_host = \"sip.example\"\n</code></pre> <p>More details on MongooseIM configuration you can find in Configuration and in Modules configuration</p> <p>Now we are registering both users in MongooseIM by calling the following commands:</p> <pre><code>mongooseimctl account registerUser --username xmpp.user --domain xmpp.example --password test_pass\nmongooseimctl account registerUser --username sip.user --domain sip.example --password test_pass\n</code></pre> <p>Yes, we need to have the <code>sip.user@sip.example</code> registered in MongooseIM. This is needed because a Jingle call can be initiated by a regular XMPP client only when the app knows the other user's full JID. The easiest way to achieve that is to exchange presence information between these 2 users. This can happen automatically if 2 xmpp users have each other in the roster.</p> <p>The roster can be set up with the following command:</p> <pre><code>mongooseimctl roster setMutualSubscription --userA xmpp.user@xmpp.example --userB sip.user@sip.example --action CONNECT\n</code></pre>"},{"location":"tutorials/Jingle-SIP-setup/#adding-users-to-jitsi","title":"Adding users to Jitsi","text":"<p>Now the <code>sip.user@sip.example</code> has to be added to Jitsi app. When the app is opened for the first time it will display a window to configure the user. Later users can be configured from the <code>Preferences</code> page.</p>"},{"location":"tutorials/Jingle-SIP-setup/#adding-a-sip-user","title":"Adding a SIP user","text":"<p>In order to add a user who connects to the SIP server we need to choose the <code>SIP</code> protocol from the available <code>networks</code> in Jitsi. In the <code>SIP id</code> field we put <code>sip.user@sip.example</code> and in the <code>Password</code> field we put <code>1234</code> as in the <code>agents.yml</code> file. Now we need to switch to <code>Advanced</code> options and go to the <code>Connection</code> tab. Here we need to unselect the <code>Configure proxy automatically</code> and put the IP of our <code>Routr</code> server, port number <code>5060</code> and <code>TCP</code> as the preferred transport.</p> <p></p>"},{"location":"tutorials/Jingle-SIP-setup/#adding-an-xmpp-user","title":"Adding an XMPP user","text":"<p>Now we have to add <code>sip.user@sip.example</code> to Jitsi's XMPP network in order to connect this user to MongooseIM over XMPP. It's very similar to adding a user to Jitsi's SIP network, the only difference is the password, for the XMPP connection it's <code>test_pass</code> as set when registering the user in MongooseIM. Here we also need to go to the <code>Advanced</code> window and the <code>Connection</code> tab in order to put the IP address (the same as before) in the <code>Connect Server</code> field. Remember to check the <code>Override server default options</code> box.</p> <p>To connect <code>sip.user@sip.exmple</code> to MongooseIM over XMPP is to cheat Jingle a bit, so that the client app for user <code>sip.xmpp@xmpp.example</code> can start the Jingle call. When Jitsi connects this user, it will likely display a warning about the server's certificate. This is because by default MongooseIM is configured with a freshly generated, self-signed certificate. We can click <code>Continue anyway</code> button in order to proceed.</p>"},{"location":"tutorials/Jingle-SIP-setup/#adding-user-to-otalk","title":"Adding user to Otalk","text":"<p>Please follow the instructions on https://github.com/otalk/otalk-im-client#installing in order to compile and run the app. If all goes well, you should see the following message printed in the console:</p> <pre><code>demo.stanza.io running at: http://localhost:8000\n</code></pre> <p>This means that the app is hosted on <code>http://localhost:8000</code>.</p> <p>At this point I also recommend opening wss://localhost:5285/ws-xmpp in the same browser. This endpoint works correctly only for WebSocket connections but most probably you will be prompted about the certificate. This is again due to the self-signed certificate. We need to add an exception for this certificate in order to successfully connect from Otalk.</p> <p>Now let's open http://localhost:8000 where the Otalk app is hosted. In the <code>Log in</code> section put <code>xmpp.user@xmpp.example</code> in the <code>JID</code> field and <code>test_pass</code> in the <code>Password</code> filed. The default WebSocket endpoint in the <code>WebSocket or BOSH URL</code> field needs to be changed to:</p> <pre><code>wss://localhost:5285/ws-xmpp\n</code></pre> <p>Mind the <code>wss</code> protocol, Otalk will not connect the user over WebSockets if for example <code>https</code> is put in the field.</p> <p></p> <p>Now we can hit the <code>Go!</code> button and the <code>xmpp.user@xmpp.example</code> will connect to MongooseIM.</p>"},{"location":"tutorials/Jingle-SIP-setup/#making-a-call","title":"Making a call","text":"<p>On the left side we can see that the user already has <code>sip.user@sip.example</code> in the roster and there should be a green dot indicating that the user is online. When we click on the contact, the <code>Call</code> button should appear allowing us to initiate the call.</p> <p>In Jitsi, the following window should pop up: </p> <p>Behind the scene the following SIP request was send from MongooseIM to Routr.</p> <pre><code>INVITE sip:sip.user@sip.example:5060 SIP/2.0\nVia: SIP/2.0/TCP localhost:5600;rport;branch=z9hG4bK1HMB3o-3mbahM\nFrom: xmpp.user &lt;sip:xmpp.user@xmpp.example&gt;;tag=aVEBue\nTo: sip.user &lt;sip:sip.user@sip.example&gt;\nCall-ID: ae602f16-d57d-4452-b83e-36e54bb6d325\nCSeq: 159913767 INVITE\nMax-Forwards: 70\nContent-Length: 2243\nContact: &lt;sip:xmpp.user@localhost:5600;ob;transport=tcp&gt;;+sip.instance=\"&lt;urn:uuid:f45950f1-70cd-229d-6c2b-8c85903ce14e&gt;\"\nContent-Type: application/sdp\nSupported: outbound,100rel,path\nAllow: PRACK,INVITE,ACK,CANCEL,BYE,OPTIONS,INFO,UPDATE,SUBSCRIBE,NOTIFY,REFER,MESSAGE\n\nv=0\no=- 1531401304 1531401304 IN IP4 127.0.0.1\ns=nksip\nc=IN IP4 127.0.0.1\nt=0 0\na=group:BUNDLE sdparta_0 sdparta_1\nm=audio 1436 UDP/TLS/RTP/SAVPF 109 9 0 8 101\na=sendrecv\na=mid:sdparta_0\na=setup:actpass\na=fingerprint:sha-256 44:84:41:8F:B7:A3:B7:37:BA:00:26:5E:B1:D6:AB:D0:56:56:CF:53:F2:05:DB:99:DE:D4:1C:63:A4:68:58:EA\na=ice-pwd:49ad0f02b4f5181c9af3c4006575e071\na=ice-ufrag:a3cc96e2\na=rtcp-mux\na=extmap:3 urn:ietf:params:rtp-hdrext:sdes:mid\na=extmap:2/recvonly urn:ietf:params:rtp-hdrext:csrc-audio-level\na=extmap:1 urn:ietf:params:rtp-hdrext:ssrc-audio-level\na=rtpmap:109 opus/48000/2\na=fmtp:109 useinbandfec=1;stereo=1;maxplaybackrate=48000\na=rtpmap:9 G722/8000\na=rtpmap:0 PCMU/8000\na=rtpmap:8 PCMA/8000\na=rtpmap:101 telephone-event/8000\na=fmtp:101 0-15\na=ssrc:1698222108 cname:{ce7fa171-069e-db4f-ba41-cfa4455c1033}\na=ssrc:1698222108 msid:{788b64bb-c4fc-b644-89b0-89f69c78f8b0} {2ba61f91-abca-3e48-84b7-85b57e8fdfb5}\nm=video 1031 UDP/TLS/RTP/SAVPF 120 121 126 97\na=sendrecv\na=mid:sdparta_1\na=setup:actpass\na=fingerprint:sha-256 44:84:41:8F:B7:A3:B7:37:BA:00:26:5E:B1:D6:AB:D0:56:56:CF:53:F2:05:DB:99:DE:D4:1C:63:A4:68:58:EA\na=ice-pwd:49ad0f02b4f5181c9af3c4006575e071\na=ice-ufrag:a3cc96e2\na=rtcp-mux\na=extmap:5 urn:ietf:params:rtp-hdrext:toffset\na=extmap:4 http://www.webrtc.org/experiments/rtp-hdrext/abs-send-time\na=extmap:3 urn:ietf:params:rtp-hdrext:sdes:mid\na=rtpmap:120 VP8/90000\na=fmtp:120 max-fr=60;max-fs=12288\na=rtcp-fb:120 goog-remb\na=rtcp-fb:120 ccm fir\na=rtcp-fb:120 nack pli\na=rtcp-fb:120 nack\na=rtpmap:121 VP9/90000\na=fmtp:121 max-fr=60;max-fs=12288\na=rtcp-fb:121 goog-remb\na=rtcp-fb:121 ccm fir\na=rtcp-fb:121 nack pli\na=rtcp-fb:121 nack\na=rtpmap:126 H264/90000\na=fmtp:126 packetization-mode=1;level-asymmetry-allowed=1;profile-level-id=42e01f\na=rtcp-fb:126 goog-remb\na=rtcp-fb:126 ccm fir\na=rtcp-fb:126 nack pli\na=rtcp-fb:126 nack\na=rtpmap:97 H264/90000\na=fmtp:97 level-asymmetry-allowed=1;profile-level-id=42e01f\na=rtcp-fb:97 goog-remb\na=rtcp-fb:97 ccm fir\na=rtcp-fb:97 nack pli\na=rtcp-fb:97 nack\na=ssrc:823938224 cname:{ce7fa171-069e-db4f-ba41-cfa4455c1033}\na=ssrc:823938224 msid:{788b64bb-c4fc-b644-89b0-89f69c78f8b0} {a7f87c8d-6002-fd4c-badb-13383c759e48}\n</code></pre> <p>And Routr sent the <code>Ringing</code> response code to MongooseIM as soon as the Jitsi app displayed the incoming call window:</p> <pre><code>SIP/2.0 180 Ringing\nCSeq: 159913767 INVITE\nCall-ID: ae602f16-d57d-4452-b83e-36e54bb6d325\nFrom: \"xmpp.user\" &lt;sip:xmpp.user@xmpp.example&gt;;tag=aVEBue\nTo: \"sip.user\" &lt;sip:sip.user@sip.example&gt;;tag=9b4c72a3\nVia: SIP/2.0/TCP localhost:5600;rport=54071;branch=z9hG4bK1HMB3o-3mbahM;received=10.152.1.27\nContact: \"sip.user\" &lt;sip:sip.user@10.152.1.27:53697;transport=tcp;registering_acc=sip_example&gt;\nUser-Agent: Jitsi2.10.5550Mac OS X\nContent-Length: 0\n</code></pre>"},{"location":"tutorials/Jingle-SIP-setup/#summary","title":"Summary","text":"<p>The example above showcases how you can use Jingle/SIP switch with the available open source software. Sonetel, who are this feature's sponsor, operate on a slightly different use case and utilize more of the functionality with their proprietary software. Current implementation makes following assumptions:</p> <ul> <li>The peer-to-peer stream is always encrypted.   This means that MongooseIM expects element <code>&lt;fingerprint&gt;</code> as described in XEP-0320: Use of DTLS-SRTP in Jingle Sessions to be in the content description.   Not every open source XMPP client supporting Jingle supports this encryption.</li> <li>MongooseIM expects that the <code>200 OK</code> response contains at least one ICE candidate to set the peer-to-peer connection up.</li> </ul> <p>This makes the current implementation a bit limited, but on the other hand the basic integration between XMPP and SIP world is already there. Based on the current state it can be improved and extended if needed.</p>"},{"location":"tutorials/client-certificate/","title":"How to Set up SASL client certificate authentication","text":""},{"location":"tutorials/client-certificate/#overview","title":"Overview","text":"<p>Clients connected to MongooseIM may authenticate with their TLS certificates. This method uses the <code>SASL EXTERNAL</code> mechanism.</p>"},{"location":"tutorials/client-certificate/#server-side-prerequisites","title":"Server-side prerequisites","text":""},{"location":"tutorials/client-certificate/#properly-configure-client-to-server-c2s-listener","title":"Properly configure Client-to-server (C2S) listener","text":"<p>A server must request the certificate from a client, so you'll need to enable <code>verify_peer</code> option and provide a path to CA chain that may be used for client's certificate check (<code>cafile</code> option).</p> <p>Please check the Listener modules page for more information or simply follow the examples at the end of this section.</p>"},{"location":"tutorials/client-certificate/#properly-configure-http-listener","title":"Properly configure <code>http</code> listener","text":"<p>SASL EXTERNAL authentication is also possible for WebSocketSecure and BOSH connections over HTTPS. Similarly as in the <code>client-to-server</code> case, the server must request the certificate from the client. In this case it's enabled by adding the following options to the <code>tls</code> option of <code>listen.http</code> :</p> <ul> <li><code>tls.verify_peer = true</code> - this is to tell Erlang's SSL to request the cert from the client</li> <li><code>tls.cacertfile = \"ca.pem\"</code> - this is to tell Erlang's SSL where  the CA cert file is in order to check if the cert is correctly signed</li> </ul> <p>Please check Options: Listen for more details regarding <code>http</code> listener configuration.</p>"},{"location":"tutorials/client-certificate/#enable-sasl-external-mechanism","title":"Enable <code>SASL EXTERNAL</code> mechanism","text":"<p>A <code>SASL EXTERNAL</code> authentication mechanism is disabled by default. In order to enable it, please configure <code>auth.sasl_mechanisms</code> option in the MongooseIM config file. <pre><code>[auth]\n  sasl_mechanisms = [\"external\"]\n</code></pre></p> <p>Obviously the list may be longer, if the system should support both the certificate and password based authentication.</p> <p>The <code>SASL EXTERNAL</code> authentication mechanism requires a digital client certificate. This digital certificate should contain <code>xmppAddr</code> field(s), which is always checked first. If there is more than one JID specified in the <code>xmppAddr</code> fields, the client must include the authorisation entity which corresponds to the one of the specified JIDs.</p> <p>When no <code>xmppAddr</code> is specified, the <code>cn</code> (common name) field might be used to provide the client's username, but it is optional and can be configured with the <code>sasl_external</code> option in the <code>auth</code> section.</p> <p>If the client certificate does not contain a JID, the client must provide one in authorisation entity.</p> <p>For the details please refer to XEP-0178: Best Practices for Use of SASL EXTERNAL with Certificates.</p>"},{"location":"tutorials/client-certificate/#enable-compatible-authentication-method","title":"Enable compatible authentication method","text":"<p>You need to enable one of the following authentication methods by using the <code>auth.methods</code> option in the MongooseIM configuration file.</p> <ul> <li><code>\"pki\"</code> - accepts user credentials,</li> <li><code>\"http\"</code> - accepts user credentials if the provided certificate is known and valid</li> <li><code>\"ldap\"</code> - accepts user credentials if a corresponding user account exists in LDAP.</li> </ul>"},{"location":"tutorials/client-certificate/#self-signed-certificates","title":"Self-signed certificates","text":"<p>By default MongooseIM doesn't accept self-signed certs for the SASL-EXTERNAL authentication. For development purposes, it is possible to tell MongooseIM to accept them.</p>"},{"location":"tutorials/client-certificate/#self-signed-certificates-for-regular-tcptls-connections","title":"Self-signed certificates for regular TCP/TLS connections","text":"<p>In order to tell MongooseIM to accept self-signed certs, the <code>listen.c2s.tls.verify_mode</code> option needs to be configured like below:</p> <pre><code>[listen.c2s]\n  tls.verify_mode = \"selfsigned_peer\"\n  tls.disconnect_on_failure = false\n  tls.cacertfile = \"ca.pem\"\n</code></pre> <p>where the <code>tls.disconnect_on_failure</code> is a boolean with the following meaning only for <code>just_tls</code>:</p> <ul> <li><code>true</code> - the connection is closed if a certificate is invalid,</li> <li><code>false</code> - the connection isn't closed, but the certificate is not returned if it's invalid.   This leads to an authentication failure but allows the client to choose a different auth method if available.</li> </ul> <p>For <code>fast_tls</code> backend, the configuration is the same, only the <code>disconnect_on_failure</code> is ignored.</p>"},{"location":"tutorials/client-certificate/#self-signed-certificates-for-ws-or-bosh","title":"Self-signed certificates for WS or BOSH","text":"<p>In order to accept self-signed certs for WS or BOSH connections, the <code>tls</code> options for <code>http</code> listener must have the following configured:</p> <pre><code>[listen.http]\n  tls.verify_mode = \"selfsigned_peer\"\n  tls.cacertfile = \"ca.pem\"\n</code></pre>"},{"location":"tutorials/client-certificate/#examples","title":"Examples","text":"<p>Certificate authentication only.</p> <pre><code>[listen.c2s]\n  port = 5222\n  (...)\n  tls.cacertfile = \"ca.pem\"\n  tls.verify_peer = true\n\n[listen.http]\n  port = 5285\n  (...)\n  tls.cacertfile = \"ca.pem\"\n  tls.verify_peer = true\n\n  [[listen.http.handlers.mod_bosh]]\n    host = \"_\"\n    path = \"/http-bind\"\n\n  [[listen.http.handlers.mod_websockets]]\n    host = \"_\"\n    path = \"/ws-xmpp\"\n\n[auth]\n  method = [\"pki\"]\n  sasl_mechanisms = [\"external\"]\n</code></pre> <p>Authentication with a client certificate (validated with provided CA chain) or password (validated with data stored in RDBMS).</p> <pre><code>[listen.c2s]\n  port = 5222\n  (...)\n  tls.cacertfile = \"ca.pem\"\n  tls.verify_peer = true\n\n[auth]\n  methods = [\"rdbms\", \"pki\"]\n  sasl_mechanisms = [\"scram_sha1\", \"external\"]\n</code></pre>"},{"location":"tutorials/client-certificate/#client-certificate-prerequisites","title":"Client certificate prerequisites","text":"<p><code>SASL EXTERNAL</code> will be offered by the server only when a client provides a valid certificate.</p> <p>Please check documentation of a specific authentication backend you're going to use.</p>"},{"location":"tutorials/client-certificate/#usage-example-gajim","title":"Usage example - Gajim","text":"<p>Verified with Gajim 0.16.8, installed from package <code>gajim-0.16.8-1.fc25.noarch</code>.</p>"},{"location":"tutorials/client-certificate/#generate-client-certificate","title":"Generate client certificate","text":"<pre><code>openssl genrsa -des3 -out rootCA.key 4096\nopenssl req -x509 -new -nodes -key rootCA.key -sha256 -days 1024 -out rootCA.crt\nopenssl genrsa -out client.key 2048\nopenssl req -new -key client.key -out client.csr # Remember to provide username as Common Name!\nopenssl x509 -req -in client.csr -CA rootCA.crt -CAkey rootCA.key -CAcreateserial -out client.crt -days 500 -sha256\nopenssl pkcs12 -export -inkey client.key -in client.crt -out client.p12\n</code></pre>"},{"location":"tutorials/client-certificate/#configure-mongooseim","title":"Configure MongooseIM","text":"<p>See examples in the section above. We recommend using the first snippet for simplicity.</p> <p>You don't need to pre-create a user account in order to log in with a certificate.</p>"},{"location":"tutorials/client-certificate/#add-an-account-in-gajim","title":"Add an account in Gajim","text":"<ol> <li>Edit -&gt; Accounts -&gt; Add.</li> <li>Pick \"I already have an account I want to use\".</li> <li>Jabber ID is <code>[Common Name from certificate]@localhost</code> (domain is different if you've changed it in <code>hosts</code> option). Press \"Next\".</li> <li>Untick \"Connect when I press Finish\" and press \"Advanced\".</li> <li>Unfold \"Client certificate\" and choose the <code>.p12</code> you've created earlier. Tick \"Certificate is encrypted\".</li> <li>Click \"Close\" and set status to \"Available\". Tell Gajim to ignore the unverified server certificate (by default it's self-signed).</li> </ol> <p>If Gajim fails to connect, try to restart it. Version 0.16.8 sometimes \"forgets\" to ask for the client certificate password.</p>"},{"location":"tutorials/iOS_tutorial/","title":"Build a complete iOS messaging app using XMPPFramework","text":"<p>Read our blog posts:</p> <ul> <li>Build a complete iOS messaging app using XMPPFramework - Tutorial Part 1</li> <li>Build a complete iOS messaging app using XMPPFramework - Part 2</li> </ul>"},{"location":"tutorials/iOS_tutorial/#yaxt-yet-another-xmpp-tutorial","title":"YAXT??! Yet another XMPP tutorial?","text":"<p>Well, this is going to be another tutorial, but I\u2019m going to try to make it a little bit different. This is an XMPP tutorial from an iOS developer\u2019s perspective. I\u2019ll try to answer all the questions I had when I started working in this area. This journey is going to go from no XMPP knowldege at all to having a fully functional instant messaging iOS appusing this cool protocol. We are going to be using the super awesome (yet overwhelming at the beginning\u2026) XMPPFramework library, and the idea is also to also mix in some iOS concepts that you are going to need for your app.</p>"},{"location":"tutorials/iOS_tutorial/#whats-xmpp","title":"What\u2019s XMPP?","text":"<p>From Wikipedia: Extensible Messaging and Presence Protocol (XMPP) is a communications protocol for message-oriented middleware based on XML.</p> <p>This basically means XMPP is a protocol for exchanging stuff. What kind of stuff? Messages and presences. We all know what messages are, but what about presences? A presence is just a way of sharing a \u201cstatus\u201d, that\u2019s it. You can be \u2018online\u2019, 'offline\u2019, 'having lunch\u2019, or whatever you want. Also there\u2019s another important word: Extensible meaning it can grow. It started as an instant messaging protocol and it has grown into multiple fields for example IoT (Internet of Things). And last, but not least: every piece of information we are going to exchange under this protocol is going to be XML. I can heard you complaining but\u2026 Come on, it\u2019s not that bad!</p>"},{"location":"tutorials/iOS_tutorial/#why-do-we-need-xmpp-why-not-just-rest","title":"Why do we need XMPP? Why not just REST?","text":"<p>Well what other options do we have? On the one hand, a custom solution means building everything from scratch, that takes time. On the other hand, we have XMPP, a super tested technology broadly used by millions of people every day, so we can say that\u2019s an advantage over a custom approach.</p> <p>Every time I talk about XMPP, someone asks me 'Why not just REST?\u2019. Well, there is a misconception here. REST is not a protocol, it\u2019s just a way of architecting a networked application; it\u2019s just a standardized way of doing something (that I love btw). So let\u2019s change the question to something that makes more sense: \u201cWhy not just build a custom REST chat application?\u201d. The first thing that comes to my mind is what I already explained in the previous paragraph, but there is something else. How do I know when someone has sent me a message? For XMPP this is trivial: we have an open connection all the time so, as soon as a message arrives to the server, it will send us the message. We have a full-duplex. On the other hand, the only solution with REST is polling. We will need to ask the server for new messages from time to time to see if there is something new for us. That sucks. So, we will have to add a mechanism that allows us to receive the messages as soon as they are created, like SSE or WebSockets.</p> <p>There is one more XMPP advantage over a custom REST chat application. REST uses HTTP, an application level protocol that is built on top of a transport level protocol: TCP. So every time you want to use your REST solution, you will need HTTP, a protocol that is not always available everywhere (maybe you need to embed this in a cheap piece of hardware?). Besides, we have XMPP built on top of TCP that\u2019s going to be always available.</p>"},{"location":"tutorials/iOS_tutorial/#whats-the-basic-stuff-i-need-to-know-to-get-started","title":"What\u2019s the basic stuff I need to know to get started?","text":"<p>Well, you know a lot already but let\u2019s make a list. Lists are always good:</p> <ul> <li>XMPP is built on top of TCP. It keeps an open connection all the time.</li> <li>Client/Server architecture. Messages always go through a server.</li> <li>Everything we send and receive is going to be XML and it\u2019s called Stanza.</li> <li>We have three different types of stanzas: iq, message and presence.</li> <li>Every individual on the XMPP network is univocally identified by a JID (Jabber ID).</li> <li>All the stanzas are contained in a Stream. Let\u2019s imagine the Stream as a white canvas where you and the server write the stanzas.</li> <li>Stream, iq, message and presence are the core of XMPP. You can find everything perfectly detailed in RFC6120 XMPP can be extended to accomplish different stuff. Each extension is called XEP (XMPP Extension Protocol).</li> </ul>"},{"location":"tutorials/iOS_tutorial/#whats-a-jid","title":"What\u2019s a JID?","text":"<p>Jabber ID (JID) is how we univocally identify each individual in XMPP. It is the address to where we are going to send our stanzas.</p> <p>This is how a JID looks like:</p> <p></p> <ul> <li>localpart: This is your username.</li> <li>domainpart: Server name where the localpart resides.</li> <li>resourcepart: This is optional, and it identifies a particular client for the user. For example: I can be logged in with <code>andres@erlang-solutions.com</code> on my iPhone, on my Android and on my mac at the same time\u2026 So all these will be the same localpart + domainpart but different resourcepart</li> </ul> <p>I\u2019m sure you have already noticed how similar the JID looks to a standard email address. This is because you can connect multiple servers together and the messages are rooted to the right user in the right server, just as email works. Pretty cool, right?</p> <p>Sometimes you will see we have a JID with just the domain part. Why?! Because it\u2019s also possible to send stanzas to a service instead of a user. A service? What\u2019s a service?! Services are different pieces of an XMPP server that offer you some special functionality, but don\u2019t worry about this right now, just remember: you can have JIDs without a localpart.</p>"},{"location":"tutorials/iOS_tutorial/#whats-a-stanza","title":"What\u2019s a Stanza?","text":"<p>Stanza is the name of the XML pieces that we are going to be sending and receiving. The defined stanzas are: <code>&lt;message/&gt;</code>, <code>&lt;presence/&gt;</code> and <code>&lt;iq/&gt;</code>.</p>"},{"location":"tutorials/iOS_tutorial/#message","title":"<code>&lt;message/&gt;</code>","text":"<p>This is a basic <code>&lt;message/&gt;</code> stanza. Every time you want to send a message to someone (a JID), you will have to send this stanza:</p> <pre><code>&lt;message from='andres@erlang-solutions.com/iphone' to='juana@erlang-solutions.com' type='chat'&gt;\n    &lt;body&gt;Hey there!&lt;/body&gt;\n&lt;/message&gt;\n</code></pre>"},{"location":"tutorials/iOS_tutorial/#iq","title":"<code>&lt;iq/&gt;</code>","text":"<p>It stands for Info/Query. It\u2019s a query-action mechanism, you send an <code>iq</code> and you will get a response to that query. You can pair the <code>iq-query</code> with the <code>iq-response</code> using the stanza id.</p> <p>For example, we send an <code>iq</code> to the server to do something (don\u2019t pay attention to what we want to do\u2026 you just need to know there is an <code>iq</code> stanza and how the mechanism works):</p> <pre><code>&lt;iq to='erlang-solutions.com' type='get' id='1'&gt;\n  &lt;query xmlns='http://jabber.org/protocol/disco#items'/&gt;\n&lt;/iq&gt;\n</code></pre> <p>And we get back another <code>iq</code> with the same id with the result of the previous query:</p> <pre><code>&lt;iq from='erlang-solutions.com' to='ramabit@erlang-solutions.com/Andress-MacBook-Air' id='1' type='result'&gt;\n    &lt;query xmlns='http://jabber.org/protocol/disco#items'&gt;\n        &lt;item jid='muc.erlang-solutions.com'/&gt;\n        &lt;item jid='muclight.erlang-solutions.com'/&gt;\n        &lt;item jid='pubsub.erlang-solutions.com'/&gt;\n    &lt;/query&gt;\n&lt;/iq&gt;\n</code></pre>"},{"location":"tutorials/iOS_tutorial/#presence","title":"<code>&lt;presence/&gt;</code>","text":"<p>Used to exchange presence information, as you could have imagined. Usually presences are sent from the client to the server and broadcasted by it. The most basic, yet valid presence, to indicate to the server that a user is available is:</p> <pre><code>&lt;presence/&gt;\n</code></pre> <p>After a successful connection, you are not going to receive any <code>&lt;message/&gt;</code> until you make yourself available sending the previous presence.</p> <p>If you want to make yourself unavailable, you just have to send:</p> <pre><code>&lt;presence type=\"unavailable\"&gt;&lt;/presence&gt;\n</code></pre> <p>If we want to make the presences more useful, we can send something like this:</p> <pre><code>&lt;presence&gt;\n      &lt;status&gt;On vacation&lt;/status&gt;\n&lt;/presence&gt;\n</code></pre>"},{"location":"tutorials/iOS_tutorial/#whats-a-stream","title":"What\u2019s a Stream?","text":"<p>Before answering this, let\u2019s refresh our mind. What\u2019s a Unix socket? From Wikipedia: A socket is a special file used for inter-process communication. These allows communication between two processes. So a socket is a file that can be written by two processes (in the same computer or in different computers in the same network). So the client is going to write to this file and server too.</p> <p>Ok, but how is a socket related to a Stream? Well, we are going to be connected to a server using a socket, therefore we are going to have a 'shared file\u2019 between the client and the server. This shared file is a white canvas where we are going to start writing our XML stanzas. The first thing we are going to write to this file is an opening <code>&lt;stream&gt;</code> tag!  And there you go\u2026 that\u2019s our stream.</p> <p>Perfect, I understand what a stream is, but I still don\u2019t understand how to send a message to the server. Well, the only thing we need to do to send a message is writing a  stanza in our shared file. But what happens when the server wants to send me a message? Simple: it will write the message in the 'shared file\u2019.</p>"},{"location":"tutorials/iOS_tutorial/#are-we-ok-so-far","title":"Are we ok so far?","text":"<p>I\u2019m sure at this point you have questions like:</p> <ul> <li>\u201cWhat?! An active TCP connection open all the time? I\u2019m used to REST! How am I going to do that?!\u201d </li> <li>Easy, you don\u2019t have to care about that any more! That\u2019s why we are going to use the library, and it will take care of that.</li> <li>\u201cYou said nothing about how to connect to the server!\u201d</li> <li>Believe me, you don\u2019t have to care about this either. If we start adding all this info, we are going to get crazy. Trust me, I\u2019ve been there.</li> <li>\u201cWhat about encrypted messages? We need security! How are we going to handle this?\u201d</li> <li>Again, you don\u2019t have to care about this at this point. Baby steps!</li> </ul> <p>You just need to be able to answer: \u201cWhat\u2019s XMPP?\u201d, \u201cHow do you send a message?\u201d, \u201cHow do you change your status in XMPP?\u201d, \u201cHow do you ask something to the server?\u201d, \u201cWhat\u2019s a Stream?\u201d. If you can answer all that, you are WAY better than me when I started.</p>"},{"location":"tutorials/iOS_tutorial/#first-steps-installing-the-xmppframework-library","title":"First steps: installing the XMPPFramework library","text":"<p>Let\u2019s create a brand new Xcode project and install the library. In this tutorial we are going to be using <code>Swift 3</code>. The easiest way to integrate XMPPFramework to the project is using CocoaPods.</p> <p>Let\u2019s create our <code>Podfile</code> using the <code>pod init</code> command in the folder where our <code>.xcodeproj</code> lives. There are thousands of forks but the maintained one is the original: <code>robbiehanson/XMPPFramework</code>.</p> <p>So let\u2019s add the <code>pod</code> to our <code>Podfile</code> and remember to uncomment the <code>use_frameworks!</code>.</p> <pre><code>use_frameworks!\n\ntarget 'CrazyMessages' do\n    pod 'XMPPFramework', :git=&gt; 'git@github.com:robbiehanson/XMPPFramework.git', :branch =&gt; 'master'\nend\n</code></pre> <p>Then <code>pod install</code> and <code>CocoaPods</code> is going to do its magic and create a <code>.xcworkspace</code> with the library integrated. Now we just need to <code>import XMPPFramework</code> in the files we want to use the library and that\u2019s it.</p>"},{"location":"tutorials/iOS_tutorial/#starting-to-build-our-instant-messaging-app","title":"Starting to build our Instant Messaging app","text":"<p>The most important thing in an XMPP application is the stream, that\u2019s where we are going to \u201cwrite\u201d our stanzas, so we need an object that is going to hold it. We are going to create an <code>XMPPController</code> class with an <code>XMPPStream</code>:</p> <pre><code>import Foundation\nimport XMPPFramework\n\nclass XMPPController: NSObject {\n    var xmppStream: XMPPStream\n\n    init() {\n        self.xmppStream = XMPPStream()  \n    }\n\n}\n</code></pre> <p>We are dealing with a highly asynchronous library here. For every action we are going to have a response some time in the future. To handle this <code>XMPPFramework</code> defines the <code>XMPPStreamDelegate</code>. So implementing that delegate is going to help us answer lots of different questions like: \u201cHow do I know when XMPP has successfully connected?\u201d, \u201cHow do I know if I\u2019m correctly authenticated?\u201d, \u201cHow do I know if I received a message?\u201d. <code>XMPPStreamDelegate</code> is your friend!</p> <p>So we have our <code>XMPPController</code> and our <code>XMPPStream</code>, what do we need to do now? Configure our stream with the <code>hostName</code>, <code>port</code> and <code>ourJID</code>. To provide all this info to the controller we are going to make some changes to the <code>init</code> to be able to receive all these parameters:</p> <pre><code>enum XMPPControllerError: Error {\n    case wrongUserJID\n}\n\nclass XMPPController: NSObject {\n    var xmppStream: XMPPStream\n\n    let hostName: String\n    let userJID: XMPPJID\n    let hostPort: UInt16\n    let password: String\n\n    init(hostName: String, userJIDString: String, hostPort: UInt16 = 5222, password: String) throws {\n        guard let userJID = XMPPJID(string: userJIDString) else {\n            throw XMPPControllerError.wrongUserJID\n        }\n\n        self.hostName = hostName\n        self.userJID = userJID\n        self.hostPort = hostPort\n        self.password = password\n\n        // Stream Configuration\n        self.xmppStream = XMPPStream()\n        self.xmppStream.hostName = hostName\n        self.xmppStream.hostPort = hostPort\n        self.xmppStream.startTLSPolicy = XMPPStreamStartTLSPolicy.allowed\n        self.xmppStream.myJID = userJID\n\n        super.init()\n\n        self.xmppStream.addDelegate(self, delegateQueue: DispatchQueue.main)\n    }\n}\n</code></pre> <p>Our next step is going to actually connect to a server and authenticate using our <code>userJID</code> and <code>password</code>, so we are adding a <code>connect</code> method to our <code>XMPPController</code>.</p> <pre><code>func connect() {\n    if !self.xmppStream.isDisconnected() {\n        return\n    }\n\n   try! self.xmppStream.connect(withTimeout: XMPPStreamTimeoutNone)\n}\n</code></pre> <p>But how do we know we have successfully connected to the server? As I said earlier, we need to check for a suitable delegate method from <code>XMPPStreamDelegate</code>. After we connect to the server we need to authenticate so we are going to do the following:</p> <pre><code>extension XMPPController: XMPPStreamDelegate {\n\n    func xmppStreamDidConnect(_ stream: XMPPStream!) {\n        print(\"Stream: Connected\")\n        try! stream.authenticate(withPassword: self.password)\n    }\n\n    func xmppStreamDidAuthenticate(_ sender: XMPPStream!) {\n        self.xmppStream.send(XMPPPresence())\n        print(\"Stream: Authenticated\")\n    }\n}\n</code></pre> <p>We need to test this. Let\u2019s just create an instance of <code>XMPPController</code> in the <code>AppDelegate</code> to test how it works:</p> <pre><code>try! self.xmppController = XMPPController(hostName: \"host.com\",\n                                     userJIDString: \"user@host.com\",\n                                          password: \"password\")\nself.xmppController.connect()\n</code></pre> <p>If everything goes fine we should see two messages in the logs but of course that\u2019s not happening, we missed something. We never told to our <code>xmppStream</code> who was the delegate object! We need to add the following line after the <code>super.init()</code></p> <pre><code>self.xmppStream.addDelegate(self, delegateQueue: DispatchQueue.main)\n</code></pre> <p>If we run the app again:</p> <pre><code>Stream: Connected\nStream: Authenticated\n</code></pre> <p>Success! We have our own <code>XMPPController</code> with a fully functional and authenticated stream!</p> <p>Something that may catch your attention is how we are setting our delegate, we are not doing:</p> <pre><code>self.xmppStream.delegate = self\n</code></pre> <p>Why not? Because we can \u201cbroadcast\u201d the events to multiple delegates, we can have 10 different objects implementing those methods. Also we can tell what\u2019s the thread where we want to receive that call, in the previous example we want it in the main thread.</p>"},{"location":"tutorials/iOS_tutorial/#getting-a-log-in","title":"Getting a Log In","text":"<p>Our app is super ugly, let\u2019s put on some makeup! We have nothing but an <code>XMPPController</code> and a hardcoded call in the <code>AppDelegate</code>. I\u2019m going to create a <code>ViewController</code> that is going to be presented modally as soon as the app starts, that <code>ViewController</code> will have the necessary fields/info to log in to the server.</p> <p>I\u2019m going to create a <code>LogInViewControllerDelegate</code> that is going to tell to our <code>ViewController</code> that the <code>Log in</code> button was pressed and that\u2019s it. In that delegate implementation we are going to create our <code>XMPPController</code>, add the <code>ViewControlleras</code> delegate of the <code>XMPPStream</code> and connect!</p> <pre><code>extension ViewController: LogInViewControllerDelegate {\n\n    func didTouchLogIn(sender: LogInViewController, userJID: String, userPassword: String, server: String) {\n        self.logInViewController = sender\n\n        do {\n            try self.xmppController = XMPPController(hostName: server,\n                                                     userJIDString: userJID,\n                                                     password: userPassword)\n            self.xmppController.xmppStream.addDelegate(self, delegateQueue: DispatchQueue.main)\n            self.xmppController.connect()\n        } catch {\n            sender.showErrorMessage(message: \"Something went wrong\")\n        }\n    }\n}\n</code></pre> <p>Why are we adding <code>ViewController</code> as a delegate of <code>XMPPStream</code> if our <code>XMPPController</code> already has that delegate implemented? Because we need to know if this connection and authentication was successful or not in our <code>ViewController</code> so we are able to dismiss the <code>LogInViewController</code> or show an error message if something failed. This is why being able to add multiple delegates is so useful.</p> <p>So as I said I\u2019m going to make <code>ViewController</code> to comform to the <code>XMPPStreamDelegate</code>:</p> <pre><code>extension ViewController: XMPPStreamDelegate {\n\n    func xmppStreamDidAuthenticate(_ sender: XMPPStream!) {\n        self.logInViewController?.dismiss(animated: true, completion: nil)\n    }\n\n    func xmppStream(_ sender: XMPPStream!, didNotAuthenticate error: DDXMLElement!) {\n        self.logInViewController?.showErrorMessage(message: \"Wrong password or username\")\n    }\n\n}\n</code></pre> <p>And that\u2019s it! Our app can log in to our server as I\u2019m showing here:</p> <p></p>"},{"location":"tutorials/iOS_tutorial/#logging","title":"Logging!","text":"<p>We\u2019ve been talking a lot about XMPP, stanzas and streams\u2026 but is there a way I can see the stream? Yes SR! XMPPFramework got us covered!</p> <p>XMPPFramework ships with CocoaLumberJack, a pretty well known logging framework. We just need to configure it, set the logging level we want and that\u2019s it. Logs are going to start showing up!</p>"},{"location":"tutorials/iOS_tutorial/#configuring-cocoalumberjack","title":"Configuring CocoaLumberjack","text":"<p>This is a really simple task, you just need to add to your <code>func application(application: UIApplication, didFinishLaunchingWithOptions ...</code> method the following line (remember to <code>import CocoaLumberjack</code>):</p> <pre><code>DDLog.add(DDTTYLogger.sharedInstance(), with: DDLogLevel.all)\n</code></pre> <p>I\u2019m not going to paste here all the connection process log because it makes no sense to try to understand what\u2019s going on at this stage of our learning. But I think showing what some stanzas look like is a good idea. To do this I\u2019m going to be sending messages from Adium.</p> <p>I\u2019m going to send this <code>&lt;message/&gt;</code>:</p> <pre><code>&lt;message to=\"test.user@erlang-solutions.com\"&gt;\n    &lt;body&gt;This is a message sent from Adium!&lt;/body&gt;\n&lt;/message&gt;\n</code></pre> <p>Let\u2019s see how it looks like when it reaches our app:</p> <pre><code>&lt;message xmlns=\"jabber:client\" from=\"iamadium@erlang-solutions.com/MacBook-Air\" to=\"test.user@erlang-solutions.com\"&gt;\n   &lt;body&gt;This is a message sent from Adium!&lt;/body&gt;\n&lt;/message&gt;\n</code></pre> <p>Let\u2019s send a <code>&lt;presence/&gt;</code> from Adium:</p> <pre><code>&lt;presence&gt;\n    &lt;status&gt;On vacation&lt;/status&gt;\n&lt;/presence&gt;\n</code></pre> <p>We are receiving:</p> <pre><code>&lt;presence xmlns=\"jabber:client\" from=\"iamadium@erlang-solutions.com/MacBook-Air\" to=\"test.user@erlang-solutions.com\"&gt;\n   &lt;status&gt;On vacation&lt;/status&gt;\n&lt;/presence&gt;\n</code></pre> <p>No doubts at all right? We send something and we receive it on the other end! That\u2019s it!</p>"},{"location":"tutorials/iOS_tutorial/#test-time","title":"Test Time!","text":"<p>I want to be sure that you are understanding and following everything and not just copy and pasting from a tutorial (as I usually do \ud83d\ude4a). So if you are able to answer these questions you are on a good track!</p> <ul> <li>Why am I sending a presence after successfully authenticating? What happens if I don\u2019t send it?</li> <li>What happens if I write a wrong server URL in the Log In form? How do I fix this problem if there is a problem\u2026</li> <li>How do I detect if suddenly the stream is disconnected from the server? (maybe a network outage?)</li> <li>How do I detect if the user/password was wrong?</li> </ul> <p>If you need help leave a message!</p>"},{"location":"tutorials/push-notifications/MongoosePush-setup/","title":"Push notifications with MongoosePush","text":"<p>MongoosePush is a simple RESTful service written in Elixir. It provides the ability to send push notifications to FCM (Firebase Cloud Messaging) and/or APNS (Apple Push Notification Service) via their HTTP/2 API.</p> <p>To take advantage of MongoosePush's functionality, you will need to enable the <code>mod_push_service_mongoosepush</code> module: this module acts as a bridge between the <code>push_notifications</code> hook and MongoosePush itself.</p>"},{"location":"tutorials/push-notifications/MongoosePush-setup/#getting-started","title":"Getting started","text":"<p>To enable integration with MongoosePush, it is as simple as the next two steps. First, you need to define a pool of HTTPS connections to MongoosePush in the <code>outgoing_pools</code> section:</p> <pre><code>[outgoing_pools.http.mongoose_push_http]\n  scope = \"global\"\n  strategy = \"available_worker\"\n\n  [outgoing_pools.http.mongoose_push_http.connection]\n    host = \"https://localhost:8443\"\n</code></pre> <p>And second, you need to add <code>mod_push_service_mongoosepush</code> to the <code>modules</code> section in the config file:</p> <pre><code>[modules.mod_push_service_mongoosepush]\n  pool_name = \"mongoose_push_http\"\n  api_version = \"v3\"\n</code></pre> <p>Here, we assume that MongoosePush will be available on the localhost on port 8443, which is the default one \u2014\u00a0note the <code>server</code> option in the outgoing pool definition. Next we enable mod_push_service_mongoosepush. The first option is the name of the HTTP pool to use and the second one is the version of MongoosePush's API (\"v2\" or \"v3\" are supported).</p> <p>And that's it, we've just completed the entire MongooseIM configuration. All we need to do now is to set up MongoosePush.</p>"},{"location":"tutorials/push-notifications/MongoosePush-setup/#starting-mongoosepush","title":"Starting MongoosePush","text":"<p>The easiest way to start MongoosePush is using its docker image. But before you can set MongoosePush up, you need a FCM application token and/or an APNS application certificate. You can get the FCM token here and the easiest way of getting an APNS application certificate is by running this script (please note that you need the certificate in <code>pem</code> format).</p> <p>After you get the FCM application token and/or the APNS application certificate, you can prepare to start MongoosePush. Firstly, prepare the following files structure:</p> <ul> <li>priv/<ul> <li>ssl/<ul> <li>rest_cert.pem - The REST endpoint certificate</li> <li>rest_key.pem - private key for the REST endpoint certificate</li> </ul> </li> <li>apns/<ul> <li>prod_cert.pem - Production APNS app certificate</li> <li>prod_key.pem - Production APNS app certificate's private key</li> <li>dev_cert.pem - Development APNS app certificate</li> <li>dev_key.pem - Development APNS app certificate's private key</li> </ul> </li> <li>fcm/<ul> <li>token.json - FCM service account JSON file</li> </ul> </li> </ul> </li> </ul> <p>If your FCM app token is <code>MY_FCM_SECRET_TOKEN</code> and you have the <code>priv</code> directory with all certificates in the current directory, start MongoosePush with the following command:</p> <pre><code>docker run -v `pwd`/priv:/opt/app/priv \\\n  -e PUSH_FCM_APP_FILE=\"MY_FCM_SECRET_TOKEN\" \\\n  -e PUSH_HTTPS_CERTFILE=\"/opt/app/priv/ssl/rest_cert.pem\" \\\n  -e PUSH_HTTPS_KEYFILE=\"/opt/app/priv/ssl/rest_key.pem\" \\\n  -it --rm mongooseim/mongoose-push:2.0.0\n</code></pre> <p>If you don't want to use either APNS or FCM, you simply need to pass <code>PUSH_APNS_ENABLED=0</code> or <code>PUSH_FCM_ENABLED=0</code> respectively as additional env variables in your <code>docker run</code> command. For more advanced options and configuration please refer to \"Quick start / Configuring\" in MongoosePush's README.md.</p> <p>When your MongoosePush docker is up and running, Push Notifications can be used in your MongooseIM instance.</p>"},{"location":"tutorials/push-notifications/Push-notifications-client-side/","title":"Using push notifications on the client side","text":"<p>There are just a few things the XMPP client application needs to receive the push notifications. Depending on whether you plan to use PubSub-full or PubSub-less configuration, some of the steps may be unnecessary.</p>"},{"location":"tutorials/push-notifications/Push-notifications-client-side/#registering-with-a-push-service-provider","title":"Registering with a Push Service provider","text":"<p>First, the client application has to get a device-specific token from the Push Service Provider (FCM or APNS). This process is different, depending on the platform, so please consult your Push Service Provider's manual to see how to get this token. For example, here you can learn about setting up FCM on Android platform and here you can learn about setting up APNS on iOS platform.</p> <p>After this step, your application shall be able to receive FCM or APNS token - it will be required in the next step of this tutorial.</p>"},{"location":"tutorials/push-notifications/Push-notifications-client-side/#setting-up-an-xmpp-pubsub-node","title":"Setting up an XMPP <code>pubsub</code> node","text":"<p>This step is specific to the PubSub-full push configuration that you chose for your MongooseIM server. If you're running a PubSub-less configuration, skip to this point.</p>"},{"location":"tutorials/push-notifications/Push-notifications-client-side/#creating-a-new-push-node","title":"Creating a new push node","text":"<p>In this example <code>mypubsub.com</code> is a domain of the MongooseIM server that has mod_pubsub enabled with the <code>push</code> node support. The client sends the following stanza to the server:</p> <pre><code>&lt;iq type='set'\n    to='pubsub.mypubsub.com'\n    id='create1'&gt;\n  &lt;pubsub xmlns='http://jabber.org/protocol/pubsub'&gt;\n    &lt;create node='punsub_node_for_my_private_iphone' type='push'/&gt;\n    &lt;configure&gt;\n      &lt;x xmlns='jabber:x:data' type='submit'&gt;\n        &lt;field var='FORM_TYPE' type='hidden'&gt;\n          &lt;value&gt;http://jabber.org/protocol/pubsub#node_config&lt;/value&gt;\n        &lt;/field&gt;\n        &lt;field var='pubsub#access_model'&gt;\n          &lt;value&gt;whitelist&lt;/value&gt;\n        &lt;/field&gt;\n        &lt;field var='pubsub#publish_model'&gt;\n          &lt;value&gt;publishers&lt;/value&gt;\n        &lt;/field&gt;\n      &lt;/x&gt;\n    &lt;/configure&gt;\n  &lt;/pubsub&gt;\n&lt;/iq&gt;\n</code></pre> <p>The <code>pubsub.mypubsub.com</code> will be used as a gateway for all notifications and will pass them through to the APNS and/or FCM.</p> <p>The most important and only difference from the standard node creation is the <code>type='push'</code> part of the <code>create</code> element. According to XEP-0357: Push Notifications, a PubSub node is required to route the push notification mechanism. This implies you need a node that will handle your push notifications, hence we create a node called <code>punsub_node_for_my_private_iphone</code>. This node should be unique to the device and you may reuse nodes already created this way. The token obtained from APNS or FCM is a good option to ensure this uniqueness, by either using it directly or within some custom node name generation. It is also important from the security perspective to configure the node with:</p> <ul> <li><code>access_model</code> set to <code>whitelist</code> so only affiliated users can access the node.</li> <li><code>publish_model</code> set to <code>publishers</code> so only users with <code>publisher</code> or <code>publisher_only</code> role can publish notifications.</li> </ul>"},{"location":"tutorials/push-notifications/Push-notifications-client-side/#adding-the-servers-jid-to-allowed-publishers","title":"Adding the server's JID to allowed publishers","text":"<p>Push notifications to the push node are addressed from your server's JID. If the push node was configured with the above recommended options, you need to allow your server's JID to publish notifications to that node. Considering your JID is <code>alice@mychat.com</code>, your server's JID is just <code>mychat.com</code>. The following stanza sent to the just created push node will allow your server JID to publish notifications:</p> <pre><code>&lt;iq to='pubsub.mypubsub.com'\n    type='set'\n    id='wy6Hibg='\n    from='alice@mychat.com/resource'&gt;\n    &lt;pubsub xmlns='http://jabber.org/protocol/pubsub#owner'&gt;\n        &lt;affiliations node='punsub_node_for_my_private_iphone'&gt;\n            &lt;affiliation jid='mychat.com' affiliation='publish-only'/&gt;\n        &lt;/affiliations&gt;\n    &lt;/pubsub&gt;\n&lt;/iq&gt;\n</code></pre>"},{"location":"tutorials/push-notifications/Push-notifications-client-side/#enabling-push-notifications","title":"Enabling push notifications","text":"<p>The next and the last step is to enable push notifications on the server that handles your messages (and has mod_event_pusher_push enabled). Let's assume this server is available under the domain <code>mychat.com</code>.</p> <p>To enable push notifications in the simplest configuration, just send the following stanza:</p> <pre><code>&lt;iq type='set' id='x43'&gt;\n  &lt;enable xmlns='urn:xmpp:push:0' jid='pubsub.mypubsub.com' node='punsub_node_for_my_private_iphone'&gt;\n    &lt;x xmlns='jabber:x:data' type='submit'&gt;\n      &lt;field var='FORM_TYPE'&gt;&lt;value&gt;http://jabber.org/protocol/pubsub#publish-options&lt;/value&gt;&lt;/field&gt;\n      &lt;field var='service'&gt;&lt;value&gt;apns&lt;/value&gt;&lt;/field&gt;\n      &lt;field var='device_id'&gt;&lt;value&gt;your_pns_device_token&lt;/value&gt;&lt;/field&gt;\n      &lt;field var='silent'&gt;&lt;value&gt;false&lt;/value&gt;&lt;/field&gt;\n      &lt;field var='topic'&gt;&lt;value&gt;some_apns_topic&lt;/value&gt;&lt;/field&gt;\n      &lt;field var='priority'&gt;&lt;value&gt;some_priority&lt;/value&gt;&lt;/field&gt;\n    &lt;/x&gt;\n  &lt;/enable&gt;\n&lt;/iq&gt;\n</code></pre> <p>We have now enabled push notifications to be send to the <code>pubsub.mypubsub.com</code> domain on the node <code>punsub_node_for_my_private_iphone</code> created previously, or in the case of PubSub-less, for whatever unique node name we give here, for example any variation of the token obtained from APNS or FCM. Please note that <code>publish-options</code> are specific to various XMPP Push Services.</p>"},{"location":"tutorials/push-notifications/Push-notifications-client-side/#publish-options","title":"Publish options","text":"<p>For mod_push_service_mongoosepush the next <code>publish-options</code> are mandatory:</p> <ul> <li><code>device_id</code> - device token (here: <code>your_pns_device_token</code>) that you received from your push notification service provider (as described in Registering with Push Service provider)</li> <li><code>service</code> - push notification service provider name (<code>apns</code> or <code>fcm</code>)</li> </ul> <p>there are also some other <code>publish-options</code> supported:</p> <ul> <li><code>mode</code> - which may be either <code>prod</code> or <code>dev</code> (default to <code>prod</code>). Decides which connection pool     type on MongoosePush shall be used. This may be used when APNS on MongoosePush is     configured to work with both production and development certificate.</li> <li><code>click_action</code> - action to perform when notification is clicked on the device. <code>activity</code> on     Android and <code>category</code> on iOS. Please refer to your platform / push notification service     provider for more info.</li> <li><code>topic</code> - currently only used with APNS. The value is passed to APNS as <code>topic</code> header. For     more information please refer to APNS documentation.</li> <li><code>silent</code> - if set to <code>true</code>, all notifications will be \"silent\". This means that only the data     payload will be send to the push notifications provider with no notification. The data payload     will contain all notification fields as defined in XEP-0357: Push Notifications.</li> <li><code>priority</code> \u2014 which may be either <code>normal</code> or <code>high</code>, and if not given, defaults to <code>normal</code>.     This value will set the push notification priority. Please refer to FCM / APNS documentation for     more details on those values.</li> <li><code>sound</code> - sound that should be played when a notification arrives. Please refer to FCM/APNS documentation for more details.</li> <li><code>mutable_content</code> - only applicable to APNS. If set to <code>true</code>, sets \"mutable-content=1\" in the APNS payload.</li> <li><code>time_to_live</code> - only applicable to FCM. Maximum lifespan of an FCM notification. Please refer to the FCM documentation for more details.</li> </ul> <p>Any other <code>publish-options</code> are ignored by mod_push_service_mongoosepush</p>"},{"location":"tutorials/push-notifications/Push-notifications-client-side/#disabling-push-notifications","title":"Disabling push notifications","text":"<p>Disabling push notifications is very simple. Just send the following stanza to your XMPP chat server:</p> <pre><code>&lt;iq type='set' id='x44'&gt;\n  &lt;disable xmlns='urn:xmpp:push:0' jid='pubsub.mypubsub.com' node='punsub_node_for_my_private_iphone'/&gt;\n&lt;/iq&gt;\n</code></pre> <p>You may skip the <code>node='punsub_node_for_my_private_iphone'</code> to globally disable push notifications on all nodes that are registered with your <code>JID</code>. This may be used to disable push notifications on all your devices.</p>"},{"location":"tutorials/push-notifications/Push-notifications-client-side/#communication-overview","title":"Communication overview","text":"<p>One picture is worth a thousand words, so here are two diagrams showing the typical communication when using push notifications:</p>"},{"location":"tutorials/push-notifications/Push-notifications-client-side/#pubsub-full","title":"PubSub-full","text":""},{"location":"tutorials/push-notifications/Push-notifications-client-side/#pubsub-less","title":"PubSub-less","text":""},{"location":"tutorials/push-notifications/Push-notifications/","title":"How to set up Push Notifications","text":"<p>Push notifications are the bread and butter of the modern mobile experience, and MongooseIM has support for them. When used together with MongoosePush, you get out-of-the-box push notifications for FCM (Firebase Cloud Messaging) and APNS (Apple Push Notification Service) providers. And it's easy to extend it to any other protocols of your choice.</p> <p>You might also want to read about the push notification's client side configuration.</p> <p>All push notification mechanisms use mod_event_pusher_push as a backend implementation, read the relevant documentation to know more about it.</p>"},{"location":"tutorials/push-notifications/Push-notifications/#xep-0357-push-notifications","title":"XEP-0357: Push Notifications","text":"<p>Server side push notification support is fully compliant with XEP-0357: Push Notifications, which defines several components that need to work together in order to provide clients with working push notifications. However, there's just one non-optimal detail required by the aforementioned XEP: that push notifications being a PubSub service \u2014 we can do better than that.</p> <p>If you're already familiar with the workings of XEP-0357: Push Notifications, make sure to have a look at our PubSub-less enhancement.</p> <p>As it is always said, one picture is worth a thousand words:</p> <p></p> <p>Who does what is highly configurable. You may use MongooseIM as the XMPP server clients connect to, and send the push XMPP stanzas to a different server that will take care of the push business; or you might use MongooseIM as the remote XMPP-PubSub server that does such business. Note that the XEP doesn't enforce the push IQ stanza format, so whichever setup is used, you need to take care of the producing and processing of these stanzas.</p> <p>You might also use MongooseIM as both, or you might even do both things within a single MongooseIM node (the most common setup!). Or, for the best performance, you might just skip that PubSub node altogether. While the whole setup can be incredibly extensible, we see the following straightforward uses of it.</p>"},{"location":"tutorials/push-notifications/Push-notifications/#xep-0357-compliant-with-local-pubsub","title":"XEP-0357 compliant with local PubSub","text":"<p>This is, historically, the most common setup. It allows your clients to enable push notifications via a local PubSub, and the IQ stanza is routed internally.</p> <p>A direct connection to a push service (e.g. MongoosePush) must be configured on the same MongooseIM node. Check out this tutorial on how to setup MongoosePush.</p> <pre><code>[modules.mod_pubsub]\n  plugins = [\"push\"] # mandatory minimal config\n\n[modules.mod_event_pusher.push]\n  backend = \"mnesia\" # optional, default\n  wpool.workers = 200 # optional\n  plugin_module = \"mod_event_pusher_push_plugin_defaults\" # optional, default\n</code></pre>"},{"location":"tutorials/push-notifications/Push-notifications/#advantages","title":"Advantages","text":"<ul> <li>Completely XEP-0357 compliant, and therefore compatible with any compliant 3rd party client library</li> <li>No need to have two different servers</li> </ul>"},{"location":"tutorials/push-notifications/Push-notifications/#drawbacks","title":"Drawbacks","text":"<ul> <li>Less efficient (PubSub has a considerable impact on heavily loaded systems)</li> <li>More load within a single node</li> <li>Harder to customise</li> </ul>"},{"location":"tutorials/push-notifications/Push-notifications/#mongooseim-as-a-pubsub-less-xmpp-server","title":"MongooseIM as a PubSub-less XMPP server","text":"<p>PubSub is completely bypassed and clients don't need to create a push node \u2014 if they attempt to do so, and PubSub is not configured, the server would respond with an error stanza. They only have to provide the virtual PubSub address in the enable stanza, and node name can be anything unique. In order to ensure uniqueness the APNS/FCM token can be used. Note that the token must be provided as a publish option anyway.</p> <p>A direct connection to a push service (e.g. MongoosePush) must be configured on the same MongooseIM node. Check out this tutorial on how to setup MongoosePush.</p> <pre><code>[modules.mod_event_pusher.push]\n  backend = \"mnesia\" # optional, default\n  wpool.workers = 200 # optional\n  plugin_module = \"mod_event_pusher_push_plugin_defaults\" # optional, default\n  virtual_pubsub_hosts = [\"pubsub.@HOST@\"]\n</code></pre>"},{"location":"tutorials/push-notifications/Push-notifications/#advantages_1","title":"Advantages","text":"<ul> <li>No need to use PubSub at all</li> <li>More efficient (PubSub has a considerable impact on heavily loaded systems)</li> <li>Simpler client-side usage \u2014 Read about the client side configuration here</li> </ul>"},{"location":"tutorials/push-notifications/Push-notifications/#drawbacks_1","title":"Drawbacks","text":"<ul> <li>If the client application is built to create the push PubSub node, this might require a migration   for such client \u2014 as he attempts to create the node, the server will answer with an IQ error   stanza. If migrating the client side is a problem, there's a solution for that   in the module section</li> </ul>"},{"location":"tutorials/push-notifications/Push-notifications/#virtual-pubsub-hosts","title":"Virtual PubSub hosts","text":"<p>These domains will shadow any identical domain configured for PubSub, stealing any notification published to it. It enables easy migration from PubSub-full deployments to PubSub-less variants. Read more in the relevant section.</p>"},{"location":"tutorials/push-notifications/Push-notifications/#overview-of-all-the-involved-mongooseim-components","title":"Overview of all the involved MongooseIM components","text":"<p>The components that make push notifications possible in MongooseIM comprise the following architecture:</p> PubSub-full setup PubSub-less setup"},{"location":"tutorials/push-notifications/Push-notifications/#mod_event_pusher_push","title":"mod_event_pusher_push","text":"<p>The first component that we need to configure in MongooseIM is the mod_event_pusher_push module.</p>"},{"location":"tutorials/push-notifications/Push-notifications/#mod_push_service_mongoosepush","title":"mod_push_service_mongoosepush","text":"<p>A connector to MongoosePush application. You can read more about it here.</p>"},{"location":"tutorials/push-notifications/Push-notifications/#mod_pubsubs-push-node","title":"mod_pubsub's <code>push</code> node","text":"<p>According to the XEP-0357: Push Notifications, all notifications generated via the module we have just enabled (i.e. mod_event_pusher_push) have to be send to a push enabled publish-subscribe node. In order to allow clients to allocate such a node, we need to enable it in our mod_pubsub on the MongooseIM server that will communicate with the XMPP Push Service.</p>"},{"location":"user-guide/Features/","title":"MongooseIM Features","text":"<p>MongooseIM is Erlang Solutions' robust, scalable and efficient XMPP server, aimed at large installations. Specifically designed for enterprise purposes, it is fault-tolerant and can utilise the resources of multiple clustered machines.</p> <p>Some traits that make it unique include:</p> <ul> <li>Massive scalability: simple growth through adding nodes provides costs-effectiveness as well as great resource utilisation.</li> <li>Platform approach: designed with consistency, end-to-end battle testing across the whole ecosystem (all server and client components, and tools) can be performed.</li> <li>Dynamic domains: thanks to the support for multi-tenancy, it is possible to set up thousands of domains dynamically without a noticeable performance overhead.</li> <li>Code quality: extensive refactoring, substantial optimisations, continuous integration and deployment.</li> <li>Extensive testing: automated continuous functional code coverage, integration testing, end-to-end testing with real clients.</li> <li>Unique openness: no proprietary extensions, fully open source, fully open standards.</li> <li>Contributions to (XMPP Standards Foundation): implementations of XEPs, innovations contributed.</li> <li>Professional support and flexible customer service.</li> <li>Contributions to third party open source projects: strengthening the Erlang and XMPP ecosystems.</li> </ul>"},{"location":"user-guide/Features/#architecture","title":"Architecture","text":"<p>MongooseIM brings configurability, scalability and fault-tolerance to the core feature of XMPP \u2013 routing messages. Its architecture is based on a set of pluggable extension modules that enable different features, including:</p> <ul> <li>Websockets: long-lived connections in the browser</li> <li>BOSH: HTTP long-polling</li> <li>MUC (Multi-User Chat): group chat</li> <li>Rosters: contact list, and subscriptions to users' presences</li> <li>MAM: Message Archive Management</li> <li>Message Carbons: for multi-device, real-time copies of all messages</li> <li>Last activity</li> <li>Metrics</li> <li>Offline messages</li> <li>Privacy settings</li> <li>vCards: user profiles</li> </ul> <p>This modular architecture allows high customisability and easy access to the required features.</p> <p>MongooseIM enables authenticating users using external or internal databases (Mnesia, RDBMS, NoSQL), LDAP, HTTP or external scripts. It also allows connecting anonymous users, when required.</p> <p>For storing persistent data, MongooseIM uses Mnesia (the distributed internal Erlang database), relational databases: MySQL, PostgreSQL or NoSQL alternative: Cassandra. Please take a look at database backends configurations to learn more. If necessary, MongooseIM can be customised to work with a different database. You can contact us to learn more.</p> <p>Basic MongooseIM session storage is handled in Mnesia, but using Redis is also possible. It is also possible to store user Message Archives using ElasticSearch or Cassandra.</p>"},{"location":"user-guide/Features/#deployment-and-management","title":"Deployment and management","text":"<p>MongooseIM can be deployed for a number of scenarios fitting your needs. The simplest installation setup consists of a single MongooseIM node using Mnesia, so it does not require any additional services. Such system is sufficient for fast deployment and connecting XMPP clients.</p> <p>A more scalable solution would be deploying MongooseIM with an external database for persistent data. Bigger setups may require a cluster of MongooseIM nodes, and a load balancer to manage the traffic from the client applications.</p> <p>A single MongooseIM node can handle as many as 2.5 million online users. Based on our load tests, for deployments with multiple nodes, we are confident that 10 million online users is well within reach. Please note that such scalability numbers depend on the selected feature set that your MongooseIM installation is running.</p> <p>For more details please see our blogpost: Scaling a Mongoose: How scalable is the MongooseIM XMPP server? </p> <p>If the service requires a cluster of more than 10 nodes, we recommend using Redis instead of Mnesia for session storage. To avoid a single point of failure, a master-slave Redis setup is advisable.</p> <p>MongooseIM allows connecting different clusters as parts of larger systems. This feature is used in geo-localised services handling massive traffic from all over the world.</p> <p>MongooseIM gathers over 50 different XMPP-related metrics, allowing close monitoring of what happens inside the nodes. To manage the users, rosters, messages and general settings, we provide a GraphQL API which can be utilized via HTTP or command-line tool <code>mongooseimctl</code>(see <code>GraphQL Admin API</code>).</p> <p>Erlang Solutions also provides WombatOAM, an Erlang VM monitoring solution, that enables ops and devs to better understand what going on in a MongooseIM cluster.</p> <p>For load testing we use our own tools, that enable us to validate MongooseIM's scalability, given different scenarios.</p>"},{"location":"user-guide/Features/#multi-tenancy-dynamic-domains","title":"Multi-tenancy (dynamic domains)","text":"<p>MongooseIM supports multi-tenancy. This makes it possible to set up thousands of domains dynamically without a noticeable performance overhead. On more information on how to set up this feature, see dynamic domains configuration.</p>"},{"location":"user-guide/Features/#integration-with-other-platform-components","title":"Integration with other platform components","text":""},{"location":"user-guide/Features/#client-applications","title":"Client applications","text":"<p>In order to build client applications, the MongooseIM team recommends the following libraries:</p> XMPP REST API iOS XMPPframework, Objective-C Jayme, Swift Android Smack, Java Retrofit, Java Web Stanza.io/Strophe.js, JavaScript"},{"location":"user-guide/Features/#mongoosepush","title":"MongoosePUSH","text":"<p>MongooseIM can be integrated with MongoosePush. For more details visit the push notification user guide.</p>"},{"location":"user-guide/Features/#mongooseice","title":"MongooseICE","text":"<p>You can also connect Mongoose with MongooseICE. To get started, we recommend going through this tutorial.</p>"},{"location":"user-guide/High-level-Architecture/","title":"High-level Architecture","text":""},{"location":"user-guide/High-level-Architecture/#inside-mongooseim","title":"Inside MongooseIM","text":""},{"location":"user-guide/High-level-Architecture/#modules","title":"Modules","text":"<p>At its core MongooseIM is a huge message router you can customise to fit your system's needs. You can choose and enable behaviours and functionalities by configuring any of the available modules. A wide range of options includes authentication, privacy, storage, backend integration and mobile optimisations. See Extension Modules for a full list.</p> <p>Modules can be configured and started either for all virtual hosts served by the instance or with individual configuration for only some of them. Modules may depend on services and on other modules. If a module depends on other modules, required modules are started automatically with configuration provided by the dependent module. If a module requires certain services which are not running, the module will not start.</p>"},{"location":"user-guide/High-level-Architecture/#services","title":"Services","text":"<p>Services provide certain functionalities not specific to virtual hosts but rather applied to the whole instance or to modules started for various hosts. They are configured globally and launched on startup, before modules, so that needed dependencies are satisfied. A service can require other services to be operational; required services are started automatically. The required service must also be present in the server's configuration file. Modules which are not host-specific are gradually being refactored to services.</p>"},{"location":"user-guide/High-level-Architecture/#databases","title":"Databases","text":"<p>MongooseIM manages two sets of data: transient for session data management, and persistent for archive and configurations.</p> <p>Please refer to Database Backends doc for more configuration information.</p>"},{"location":"user-guide/High-level-Architecture/#transient-databases","title":"Transient databases","text":"<p>In the MongooseIM architecture each MongooseIM node host has an accompanying Mnesia node.</p> <p>Redis on the other hand forms a separate cluster and does not utilise MongooseIM nodes.</p> <p>There is no need to set up any backups for transient data since it naturally rebuilds as clients reconnect massively.</p>"},{"location":"user-guide/High-level-Architecture/#persistent-databases","title":"Persistent databases","text":"<p>Both RDBMS/SQL (MySQL/PostgreSQL) and NoSQL (Cassandra) databases are supported.</p> <p>Backups should be regular, and tested.</p>"},{"location":"user-guide/High-level-Architecture/#ldap-directory","title":"LDAP directory","text":"<p>LDAP will also run on a separate cluster.</p> <p>Backups should be regular, and tested.</p>"},{"location":"user-guide/High-level-Architecture/#outside-mongooseim-ecosystem-in-a-datacenter","title":"Outside MongooseIM: ecosystem in a datacenter","text":""},{"location":"user-guide/High-level-Architecture/#frontend","title":"Frontend","text":"<p>Native clients on platforms such as Android, iOS, Windows, Linux, macOS, will preferably use a plain XMPP over TCP connections.</p> <p>Since web clients cannot use TCP connections, they will preferably use XMPP over websockets, or the now less relevant XMPP over BOSH (using long-lived HTTP connections, more and more used as fallback).</p> <p>Any client could use the client GraphQL API, which is using HTTP request/responses.</p> <p>All these client connections will hit a frontend load balancer before reaching the MongooseIM cluster.</p>"},{"location":"user-guide/High-level-Architecture/#backend","title":"Backend","text":"<p>MongooseIM supports bilateral communication with other backend services in the datacenter infrastructure.</p> <p>MongooseIM GraphQL API is available for control/management of MongooseIM's operations as well as the functional aspects.</p> <p>An HTTP notification enables forwarding of the events to any other external HTTP service.</p>"},{"location":"user-guide/High-level-Architecture/#management-and-monitoring","title":"Management and monitoring","text":"<p>WombatOAM enables the monitoring and management of MongooseIM clusters, as well as RabbitMQ and any other Erlang and Elixir based system.</p>"},{"location":"user-guide/High-level-Architecture/#mongooseice-stunturn","title":"MongooseICE (STUN/TURN)","text":"<p>Available on: MongooseICE</p>"},{"location":"user-guide/High-level-Architecture/#mongoosepush-apns-gcm","title":"MongoosePush (APNS, GCM)","text":"<p>Available on: MongoosePush</p>"},{"location":"user-guide/High-level-Architecture/#mongooseim-in-a-worldwide-multi-datacenter-configuration","title":"MongooseIM in a worldwide, multi-datacenter configuration","text":"<p>The MongooseIM platform enables a service to scale worldwide, with proximity servers across continents and datacenters. It leverages the use of the open standard S2S (server-to-server) protocol.</p> <p>We advise contacting us in case of such a big deployment.</p>"},{"location":"user-guide/Supported-XEPs/","title":"Supported XEPs","text":"XEP Name Version Status Modules <code>0004</code> Data Forms 2.13.1 complete <code>mongoose_data_forms</code> <code>0012</code> Last Activity 2.0 complete <code>mod_last</code> <code>0016</code> Privacy Lists 1.7 complete <code>mod_privacy</code> <code>0022</code> Message Events 1.4 complete <code>mod_offline</code> <code>0023</code> Message Expiration 1.3 complete <code>mod_offline</code> <code>0030</code> Service Discovery 2.5rc3 complete <code>mod_disco</code> <code>0045</code> Multi-User Chat 1.34.5 complete <code>mod_muc</code> <code>0049</code> Private XML Storage 1.2 complete <code>mod_private</code> <code>0050</code> Ad-Hoc Commands 1.3.0 complete <code>adhoc</code> <code>0054</code> vcard-temp 1.2 complete <code>mod_vcard</code> <code>0055</code> Jabber Search 1.3 complete <code>mod_vcard</code> <code>0059</code> Result Set Management 1.0 complete <code>jlib</code> <code>0060</code> Publish-Subscribe 1.25.0 complete <code>mod_pubsub</code> <code>0068</code> Field Standardization for Data Forms 1.3.0 complete <code>mongoose_data_forms</code> <code>0077</code> In-Band Registration 2.4 complete <code>mod_register</code> <code>0079</code> Advanced Message Processing 1.2 partial <code>mod_amp</code> <code>0082</code> XMPP Date and Time Profiles 1.1.1 complete <code>mod_time</code> <code>0083</code> Nested Roster Groups 1.0 complete <code>mod_roster</code> <code>0085</code> Chat State Notifications 2.1 complete <code>mod_offline</code> <code>0086</code> Error Condition Mappings 1.0 complete <code>jlib</code> <code>0092</code> Software Version 1.1 complete <code>mod_version</code> <code>0093</code> Roster Item Exchange 1.2 complete <code>mod_roster</code> <code>0114</code> Jabber Component Protocol 1.6 complete <code>ejabberd_service</code> <code>0115</code> Entity Capabilities 1.6.0 complete <code>mod_caps</code> <code>0124</code> Bidirectional-streams Over Synchronous HTTP (BOSH) 1.11.2 complete <code>mod_bosh</code> <code>0126</code> Invisibility 1.1 complete <code>mod_privacy</code> <code>0157</code> Contact Addresses for XMPP Services 1.1.1 complete <code>mod_disco</code> <code>0160</code> Best Practices for Handling Offline Messages 1.0.1 complete <code>mod_offline</code>, <code>mod_offline_chatmarkers</code> <code>0163</code> Personal Eventing Protocol 1.2.2 complete <code>mod_pubsub</code> <code>0170</code> Recommended Order of Stream Feature Negotiation 1.0 complete <code>mongoose_c2s</code> <code>0175</code> Best Practices for Use of SASL ANONYMOUS 1.2 complete <code>cyrsasl_anonymous</code> <code>0178</code> Best Practices for Use of SASL EXTERNAL with Certificates 1.2 partial <code>cyrsasl_external</code> <code>0185</code> Dialback Key Generation and Validation 1.0 complete <code>mongoose_s2s_dialback</code> <code>0191</code> Blocking Command 1.3 complete <code>mod_blocking</code> <code>0198</code> Stream Management 1.6.1 complete <code>mod_stream_management</code> <code>0199</code> XMPP Ping 2.0.1 complete <code>mod_ping</code> <code>0202</code> Entity Time 2.0 complete <code>mod_time</code> <code>0206</code> XMPP Over BOSH 1.4 complete <code>mod_bosh</code> <code>0215</code> External Service Discovery 1.0.0 complete <code>mod_extdisco</code> <code>0220</code> Server Dialback 1.1.1 complete <code>ejabberd_s2s_out</code>, <code>mongoose_s2s_dialback</code> <code>0237</code> Roster Versioning 1.3 complete <code>mod_roster</code> <code>0248</code> PubSub Collection Nodes 0.3.0 complete <code>mod_pubsub</code> <code>0249</code> Direct MUC Invitations 1.2 complete <code>mod_muc</code> <code>0277</code> Microblogging over XMPP 0.6.5 complete <code>mod_pubsub</code> <code>0279</code> Server IP Check 0.2 complete <code>mod_sic</code> <code>0280</code> Message Carbons 1.0.1 complete <code>mod_carboncopy</code> <code>0313</code> Message Archive Management 1.1.0 complete <code>mod_mam</code> <code>0333</code> Displayed Markers (was: Chat Markers) 0.4 complete <code>mod_smart_markers</code> <code>0352</code> Client State Indication 1.0.0 complete <code>mod_csi</code> <code>0357</code> Push Notifications 0.4.1 complete <code>mod_event_pusher_push</code> <code>0363</code> HTTP File Upload 1.1.0 complete <code>mod_http_upload</code> <code>0384</code> OMEMO Encryption 0.8.3 complete <code>mod_pubsub</code> <code>0386</code> Bind 2 0.4.0 partial <code>mod_bind2</code> <code>0388</code> Extensible SASL Profile 0.4.0 partial <code>mod_sasl2</code> <code>0424</code> Message Retraction 0.3.0 complete <code>mod_mam</code>"},{"location":"user-guide/Supported-standards/","title":"Supported standards","text":"<ul> <li> <p>XMPP Core: RFC 3920, RFC 6120</p> <p>Note</p> <p>In RFC 6120 there are 3 different strategies defined in case of a session conflict (same full JID). They are described in 7.7.2.2. Conflict. MongooseIM always uses the 3rd option. It terminates the older session with a <code>&lt;conflict/&gt;</code> stream error.</p> </li> <li> <p>XMPP Instant Messaging and Presence: RFC 3921, RFC 6121</p> </li> <li>Client connections:<ul> <li>over TCP (with TLS/STARTTLS available) as defined in RFC 6120</li> <li>over WebSockets as defined in  RFC 7395</li> <li>over HTTP(S) long-polling (BOSH) as defined in XEP-0124: Bidirectional-streams Over Synchronous HTTP (BOSH) and XEP-0206: XMPP Over BOSH</li> <li>GraphQL API</li> <li>REST API (deprecated)</li> </ul> </li> <li>Server/backend connections:<ul> <li>GraphQL API</li> <li>REST API (deprecated)</li> </ul> </li> <li>Configurable database backends:<ul> <li>Transient:<ul> <li>Mnesia</li> <li>Redis</li> </ul> </li> <li>Persistent:<ul> <li>RDBMS: MySQL, PostgreSQL, generic ODBC</li> <li>NoSQL: Cassandra</li> </ul> </li> </ul> </li> <li>Integration with third-party services<ul> <li>Amazon Simple Notification Service</li> </ul> </li> </ul>"},{"location":"user-guide/Supported-standards/#supported-xeps","title":"Supported XEPs","text":"XEP Name Version Status Modules <code>0004</code> Data Forms 2.13.1 complete <code>mongoose_data_forms</code> <code>0012</code> Last Activity 2.0 complete <code>mod_last</code> <code>0016</code> Privacy Lists 1.7 complete <code>mod_privacy</code> <code>0022</code> Message Events 1.4 complete <code>mod_offline</code> <code>0023</code> Message Expiration 1.3 complete <code>mod_offline</code> <code>0030</code> Service Discovery 2.5rc3 complete <code>mod_disco</code> <code>0045</code> Multi-User Chat 1.34.5 complete <code>mod_muc</code> <code>0049</code> Private XML Storage 1.2 complete <code>mod_private</code> <code>0050</code> Ad-Hoc Commands 1.3.0 complete <code>adhoc</code> <code>0054</code> vcard-temp 1.2 complete <code>mod_vcard</code> <code>0055</code> Jabber Search 1.3 complete <code>mod_vcard</code> <code>0059</code> Result Set Management 1.0 complete <code>jlib</code> <code>0060</code> Publish-Subscribe 1.25.0 complete <code>mod_pubsub</code> <code>0068</code> Field Standardization for Data Forms 1.3.0 complete <code>mongoose_data_forms</code> <code>0077</code> In-Band Registration 2.4 complete <code>mod_register</code> <code>0079</code> Advanced Message Processing 1.2 partial <code>mod_amp</code> <code>0082</code> XMPP Date and Time Profiles 1.1.1 complete <code>mod_time</code> <code>0083</code> Nested Roster Groups 1.0 complete <code>mod_roster</code> <code>0085</code> Chat State Notifications 2.1 complete <code>mod_offline</code> <code>0086</code> Error Condition Mappings 1.0 complete <code>jlib</code> <code>0092</code> Software Version 1.1 complete <code>mod_version</code> <code>0093</code> Roster Item Exchange 1.2 complete <code>mod_roster</code> <code>0114</code> Jabber Component Protocol 1.6 complete <code>ejabberd_service</code> <code>0115</code> Entity Capabilities 1.6.0 complete <code>mod_caps</code> <code>0124</code> Bidirectional-streams Over Synchronous HTTP (BOSH) 1.11.2 complete <code>mod_bosh</code> <code>0126</code> Invisibility 1.1 complete <code>mod_privacy</code> <code>0157</code> Contact Addresses for XMPP Services 1.1.1 complete <code>mod_disco</code> <code>0160</code> Best Practices for Handling Offline Messages 1.0.1 complete <code>mod_offline</code>, <code>mod_offline_chatmarkers</code> <code>0163</code> Personal Eventing Protocol 1.2.2 complete <code>mod_pubsub</code> <code>0170</code> Recommended Order of Stream Feature Negotiation 1.0 complete <code>mongoose_c2s</code> <code>0175</code> Best Practices for Use of SASL ANONYMOUS 1.2 complete <code>cyrsasl_anonymous</code> <code>0178</code> Best Practices for Use of SASL EXTERNAL with Certificates 1.2 partial <code>cyrsasl_external</code> <code>0185</code> Dialback Key Generation and Validation 1.0 complete <code>mongoose_s2s_dialback</code> <code>0191</code> Blocking Command 1.3 complete <code>mod_blocking</code> <code>0198</code> Stream Management 1.6.1 complete <code>mod_stream_management</code> <code>0199</code> XMPP Ping 2.0.1 complete <code>mod_ping</code> <code>0202</code> Entity Time 2.0 complete <code>mod_time</code> <code>0206</code> XMPP Over BOSH 1.4 complete <code>mod_bosh</code> <code>0215</code> External Service Discovery 1.0.0 complete <code>mod_extdisco</code> <code>0220</code> Server Dialback 1.1.1 complete <code>ejabberd_s2s_out</code>, <code>mongoose_s2s_dialback</code> <code>0237</code> Roster Versioning 1.3 complete <code>mod_roster</code> <code>0248</code> PubSub Collection Nodes 0.3.0 complete <code>mod_pubsub</code> <code>0249</code> Direct MUC Invitations 1.2 complete <code>mod_muc</code> <code>0277</code> Microblogging over XMPP 0.6.5 complete <code>mod_pubsub</code> <code>0279</code> Server IP Check 0.2 complete <code>mod_sic</code> <code>0280</code> Message Carbons 1.0.1 complete <code>mod_carboncopy</code> <code>0313</code> Message Archive Management 1.1.0 complete <code>mod_mam</code> <code>0333</code> Displayed Markers (was: Chat Markers) 0.4 complete <code>mod_smart_markers</code> <code>0352</code> Client State Indication 1.0.0 complete <code>mod_csi</code> <code>0357</code> Push Notifications 0.4.1 complete <code>mod_event_pusher_push</code> <code>0363</code> HTTP File Upload 1.1.0 complete <code>mod_http_upload</code> <code>0384</code> OMEMO Encryption 0.8.3 complete <code>mod_pubsub</code> <code>0386</code> Bind 2 0.4.0 partial <code>mod_bind2</code> <code>0388</code> Extensible SASL Profile 0.4.0 partial <code>mod_sasl2</code> <code>0424</code> Message Retraction 0.3.0 complete <code>mod_mam</code>"},{"location":"user-guide/Supported-standards/#supported-open-extensions","title":"Supported Open Extensions","text":"Name Module MUC Light <code>mod_muc_light</code> Inbox <code>mod_inbox</code> Token-based reconnection <code>mod_auth_token</code>, <code>mod_keystore</code> MAM extensions <code>mam</code>"}]}